<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a4
 * Haxe source file: /opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx
 */

namespace hxbit\enumSer;

use \php\_Boot\HxAnon;
use \haxe\io\_BytesData\Container;
use \php\Boot;
use \hxbit\Schema;
use \haxe\io\Error;
use \hxbit\PropTypeDesc;
use \php\_Boot\HxException;
use \haxe\io\Bytes;
use \hxbit\Serializer;

class hxbit_PropTypeDesc {
	/**
	 * @param Serializer $ctx
	 * @param PropTypeDesc $v
	 * 
	 * @return void
	 */
	static public function doSerialize ($ctx, $v) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:835: characters 37-125
		if ($v === null) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:835: characters 53-67
			$_this = $ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			$__hx__switch = ($v->index);
			if ($__hx__switch === 0) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:814: characters 21-47
				$_this1 = $ctx->out;
				$_this1->b = ($_this1->b . chr(1));
			} else if ($__hx__switch === 1) {
				$_this2 = $ctx->out;
				$_this2->b = ($_this2->b . chr(2));
			} else if ($__hx__switch === 2) {
				$_this3 = $ctx->out;
				$_this3->b = ($_this3->b . chr(3));
			} else if ($__hx__switch === 3) {
				$_this4 = $ctx->out;
				$_this4->b = ($_this4->b . chr(4));
			} else if ($__hx__switch === 4) {
				$_this5 = $ctx->out;
				$_this5->b = ($_this5->b . chr(5));
			} else if ($__hx__switch === 5) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
				$name = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:790: characters 9-35
				$_this6 = $ctx->out;
				$_this6->b = ($_this6->b . chr(6));

				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:64: characters 2-33
				if ($name === null) {
					$_this7 = $ctx->out;
					$_this7->b = ($_this7->b . chr(0));
				} else {
					$b = strlen($name);
					$b1 = new Bytes($b, new Container($name));
					$v1 = $b1->length + 1;
					if (($v1 >= 0) && ($v1 < 128)) {
						$_this8 = $ctx->out;
						$_this8->b = ($_this8->b . chr($v1));
					} else {
						$_this9 = $ctx->out;
						$_this9->b = ($_this9->b . chr(128));

						$ctx->out->addInt32($v1);
					}

					$_this10 = $ctx->out;
					$_this10->b = ($_this10->b . $b1->b->s);

				}

			} else if ($__hx__switch === 6) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
				$name1 = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:790: characters 9-35
				$_this11 = $ctx->out;
				$_this11->b = ($_this11->b . chr(7));

				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:65: characters 2-25
				if ($name1 === null) {
					$_this12 = $ctx->out;
					$_this12->b = ($_this12->b . chr(0));
				} else {
					$b2 = strlen($name1);
					$b3 = new Bytes($b2, new Container($name1));
					$v2 = $b3->length + 1;
					if (($v2 >= 0) && ($v2 < 128)) {
						$_this13 = $ctx->out;
						$_this13->b = ($_this13->b . chr($v2));
					} else {
						$_this14 = $ctx->out;
						$_this14->b = ($_this14->b . chr(128));

						$ctx->out->addInt32($v2);
					}

					$_this15 = $ctx->out;
					$_this15->b = ($_this15->b . $b3->b->s);

				}

			} else if ($__hx__switch === 7) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
				$v3 = $v->params[1];
				$k = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:790: characters 9-35
				$_this16 = $ctx->out;
				$_this16->b = ($_this16->b . chr(8));

				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:66: characters 2-37
				hxbit_PropTypeDesc::doSerialize($ctx, $k);
				hxbit_PropTypeDesc::doSerialize($ctx, $v3);


			} else if ($__hx__switch === 8) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
				$k1 = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:790: characters 9-35
				$_this17 = $ctx->out;
				$_this17->b = ($_this17->b . chr(9));

				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:67: characters 2-25
				hxbit_PropTypeDesc::doSerialize($ctx, $k1);

			} else if ($__hx__switch === 9) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
				$fields = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:790: characters 9-35
				$_this18 = $ctx->out;
				$_this18->b = ($_this18->b . chr(10));

				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:68: characters 2-73
				if ($fields === null) {
					$_this19 = $ctx->out;
					$_this19->b = ($_this19->b . chr(0));
				} else {
					$v4 = $fields->length + 1;
					if (($v4 >= 0) && ($v4 < 128)) {
						$_this20 = $ctx->out;
						$_this20->b = ($_this20->b . chr($v4));
					} else {
						$_this21 = $ctx->out;
						$_this21->b = ($_this21->b . chr(128));

						$ctx->out->addInt32($v4);
					}

					$_g = 0;
					while ($_g < $fields->length) {
						$v5 = ($fields->arr[$_g] ?? null);
						++$_g;
						$v6 = $v5;
						if ($v6 === null) {
							$_this22 = $ctx->out;
							$_this22->b = ($_this22->b . chr(0));
						} else {
							$fbits = 0;
							if ($v6->name !== null) {
								$fbits |= 1;
							}
							if ($v6->type !== null) {
								$fbits |= 2;
							}

							$v7 = $fbits + 1;
							if (($v7 >= 0) && ($v7 < 128)) {
								$_this23 = $ctx->out;
								$_this23->b = ($_this23->b . chr($v7));
							} else {
								$_this24 = $ctx->out;
								$_this24->b = ($_this24->b . chr(128));

								$ctx->out->addInt32($v7);
							}

							if (($fbits & 1) !== 0) {
								$s = $v6->name;
								if ($s === null) {
									$_this25 = $ctx->out;
									$_this25->b = ($_this25->b . chr(0));
								} else {
									$b4 = strlen($s);
									$b5 = new Bytes($b4, new Container($s));
									$v8 = $b5->length + 1;
									if (($v8 >= 0) && ($v8 < 128)) {
										$_this26 = $ctx->out;
										$_this26->b = ($_this26->b . chr($v8));
									} else {
										$_this27 = $ctx->out;
										$_this27->b = ($_this27->b . chr(128));

										$ctx->out->addInt32($v8);
									}

									$_this28 = $ctx->out;
									$_this28->b = ($_this28->b . $b5->b->s);

								}
							}
							$_this29 = $ctx->out;
							$_this29->b = ($_this29->b . chr(($v6->opt ? 1 : 0)));

							if (($fbits & 2) !== 0) {
								hxbit_PropTypeDesc::doSerialize($ctx, $v6->type);
							}

						}

					}

				}

			} else if ($__hx__switch === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
				$k2 = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:790: characters 9-35
				$_this30 = $ctx->out;
				$_this30->b = ($_this30->b . chr(11));

				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:69: characters 2-25
				hxbit_PropTypeDesc::doSerialize($ctx, $k2);

			} else if ($__hx__switch === 11) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
				$k3 = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:790: characters 9-35
				$_this31 = $ctx->out;
				$_this31->b = ($_this31->b . chr(12));

				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:70: characters 2-26
				hxbit_PropTypeDesc::doSerialize($ctx, $k3);

			} else if ($__hx__switch === 12) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
				$t = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:790: characters 9-35
				$_this32 = $ctx->out;
				$_this32->b = ($_this32->b . chr(13));

				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:71: characters 2-24
				hxbit_PropTypeDesc::doSerialize($ctx, $t);

			} else if ($__hx__switch === 13) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:814: characters 21-47
				$_this33 = $ctx->out;
				$_this33->b = ($_this33->b . chr(14));
			} else if ($__hx__switch === 14) {
				$_this34 = $ctx->out;
				$_this34->b = ($_this34->b . chr(15));
			} else if ($__hx__switch === 15) {
				$_this35 = $ctx->out;
				$_this35->b = ($_this35->b . chr(16));
			} else if ($__hx__switch === 16) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
				$t1 = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:790: characters 9-35
				$_this36 = $ctx->out;
				$_this36->b = ($_this36->b . chr(17));

				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:75: characters 2-25
				hxbit_PropTypeDesc::doSerialize($ctx, $t1);

			} else if ($__hx__switch === 17) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:814: characters 21-47
				$_this37 = $ctx->out;
				$_this37->b = ($_this37->b . chr(18));
			}
		}
	}

	/**
	 * @param Serializer $ctx
	 * 
	 * @return PropTypeDesc
	 */
	static public function doUnserialize ($ctx) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:845: characters 9-31
		$b = ord($ctx->input->b->s[$ctx->inPos++]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:846: lines 846-847
		if ($b === 0) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:847: characters 10-21
			return null;
		}
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
		if ($b === 1) {
			return PropTypeDesc::PInt();
		} else if ($b === 2) {
			return PropTypeDesc::PFloat();
		} else if ($b === 3) {
			return PropTypeDesc::PBool();
		} else if ($b === 4) {
			return PropTypeDesc::PString();
		} else if ($b === 5) {
			return PropTypeDesc::PBytes();
		} else if ($b === 6) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_name = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$v = ord($ctx->input->b->s[$ctx->inPos++]);
			if ($v === 128) {
				$_this = $ctx->input;
				$pos = $ctx->inPos;
				$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
				$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
				$ctx->inPos += 4;
			}
			$len = $v;
			if ($len === 0) {
				$_name = null;
			} else {
				--$len;
				$_this1 = $ctx->input;
				$pos1 = $ctx->inPos;
				$s = null;
				if (($pos1 < 0) || ($len < 0) || (($pos1 + $len) > $_this1->length)) {
					throw new HxException(Error::OutsideBounds());
				} else {
					$s = substr($_this1->b->s, $pos1, $len);
				}
				$ctx->inPos += $len;
				$_name = $s;
			}
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			return PropTypeDesc::PSerializable($_name);
		} else if ($b === 7) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_name1 = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$v2 = ord($ctx->input->b->s[$ctx->inPos++]);
			if ($v2 === 128) {
				$_this2 = $ctx->input;
				$pos2 = $ctx->inPos;
				$v3 = ord($_this2->b->s[$pos2]) | (ord($_this2->b->s[$pos2 + 1]) << 8) | (ord($_this2->b->s[$pos2 + 2]) << 16) | (ord($_this2->b->s[$pos2 + 3]) << 24);
				$v2 = (($v3 & ((int)-2147483648)) !== 0 ? $v3 | ((int)-2147483648) : $v3);
				$ctx->inPos += 4;
			}
			$len1 = $v2;
			if ($len1 === 0) {
				$_name1 = null;
			} else {
				--$len1;
				$_this3 = $ctx->input;
				$pos3 = $ctx->inPos;
				$s1 = null;
				if (($pos3 < 0) || ($len1 < 0) || (($pos3 + $len1) > $_this3->length)) {
					throw new HxException(Error::OutsideBounds());
				} else {
					$s1 = substr($_this3->b->s, $pos3, $len1);
				}
				$ctx->inPos += $len1;
				$_name1 = $s1;
			}
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			return PropTypeDesc::PEnum($_name1);
		} else if ($b === 8) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_k = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$__e = hxbit_PropTypeDesc::doUnserialize($ctx);
			$_k = $__e;

			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_v = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$__e1 = hxbit_PropTypeDesc::doUnserialize($ctx);
			$_v = $__e1;

			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			return PropTypeDesc::PMap($_k, $_v);
		} else if ($b === 9) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_k1 = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$__e2 = hxbit_PropTypeDesc::doUnserialize($ctx);
			$_k1 = $__e2;

			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			return PropTypeDesc::PArray($_k1);
		} else if ($b === 10) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_fields = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$e0 = null;
			$v4 = ord($ctx->input->b->s[$ctx->inPos++]);
			if ($v4 === 128) {
				$_this4 = $ctx->input;
				$pos4 = $ctx->inPos;
				$v5 = ord($_this4->b->s[$pos4]) | (ord($_this4->b->s[$pos4 + 1]) << 8) | (ord($_this4->b->s[$pos4 + 2]) << 16) | (ord($_this4->b->s[$pos4 + 3]) << 24);
				$v4 = (($v5 & ((int)-2147483648)) !== 0 ? $v5 | ((int)-2147483648) : $v5);
				$ctx->inPos += 4;
			}
			$len2 = $v4;
			if ($len2 === 0) {
				$_fields = null;
			} else {
				--$len2;
				$a = new \Array_hx();
				$_g = 0;
				$_g1 = $len2;
				while ($_g < $_g1) {
					$i = $_g++;
					$v6 = ord($ctx->input->b->s[$ctx->inPos++]);
					if ($v6 === 128) {
						$_this5 = $ctx->input;
						$pos5 = $ctx->inPos;
						$v7 = ord($_this5->b->s[$pos5]) | (ord($_this5->b->s[$pos5 + 1]) << 8) | (ord($_this5->b->s[$pos5 + 2]) << 16) | (ord($_this5->b->s[$pos5 + 3]) << 24);
						$v6 = (($v7 & ((int)-2147483648)) !== 0 ? $v7 | ((int)-2147483648) : $v7);
						$ctx->inPos += 4;
					}
					$fbits = $v6;
					if ($fbits === 0) {
						$e0 = null;
					} else {
						--$fbits;
						$type = null;
						$name = null;
						if (($fbits & 1) !== 0) {
							$v8 = ord($ctx->input->b->s[$ctx->inPos++]);
							if ($v8 === 128) {
								$_this6 = $ctx->input;
								$pos6 = $ctx->inPos;
								$v9 = ord($_this6->b->s[$pos6]) | (ord($_this6->b->s[$pos6 + 1]) << 8) | (ord($_this6->b->s[$pos6 + 2]) << 16) | (ord($_this6->b->s[$pos6 + 3]) << 24);
								$v8 = (($v9 & ((int)-2147483648)) !== 0 ? $v9 | ((int)-2147483648) : $v9);
								$ctx->inPos += 4;
							}
							$len3 = $v8;
							if ($len3 === 0) {
								$name = null;
							} else {
								--$len3;
								$_this7 = $ctx->input;
								$pos7 = $ctx->inPos;
								$s2 = null;
								if (($pos7 < 0) || ($len3 < 0) || (($pos7 + $len3) > $_this7->length)) {
									throw new HxException(Error::OutsideBounds());
								} else {
									$s2 = substr($_this7->b->s, $pos7, $len3);
								}
								$ctx->inPos += $len3;
								$name = $s2;
							}
						}
						$opt = ord($ctx->input->b->s[$ctx->inPos++]) !== 0;
						if (($fbits & 2) !== 0) {
							$__e3 = hxbit_PropTypeDesc::doUnserialize($ctx);
							$type = $__e3;
						}
						$e0 = new HxAnon([
							"name" => $name,
							"opt" => $opt,
							"type" => $type,
						]);

					}

					$a[$i] = $e0;
				}

				$_fields = $a;
			}

			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			return PropTypeDesc::PObj($_fields);
		} else if ($b === 11) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_k2 = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$__e4 = hxbit_PropTypeDesc::doUnserialize($ctx);
			$_k2 = $__e4;

			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			return PropTypeDesc::PAlias($_k2);
		} else if ($b === 12) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_k3 = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$__e5 = hxbit_PropTypeDesc::doUnserialize($ctx);
			$_k3 = $__e5;

			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			return PropTypeDesc::PVector($_k3);
		} else if ($b === 13) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_t = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$__e6 = hxbit_PropTypeDesc::doUnserialize($ctx);
			$_t = $__e6;

			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			return PropTypeDesc::PNull($_t);
		} else if ($b === 14) {
			return PropTypeDesc::PUnknown();
		} else if ($b === 15) {
			return PropTypeDesc::PDynamic();
		} else if ($b === 16) {
			return PropTypeDesc::PInt64();
		} else if ($b === 17) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:799: characters 25-28
			$_t1 = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:800: characters 61-68
			$__e7 = hxbit_PropTypeDesc::doUnserialize($ctx);
			$_t1 = $__e7;

			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:396: character 25
			return PropTypeDesc::PFlags($_t1);
		} else if ($b === 18) {
			return PropTypeDesc::PStruct();
		} else {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:848: characters 56-61
			throw new HxException("Invalid enum index " . ($b??'null'));
		}
	}

	/**
	 * @return Schema
	 */
	static public function getSchema () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:860: characters 23-44
		$s = new Schema();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:820: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length] = null;
		++$_this->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this1 = $s->fieldsNames;
		$_this1->arr[$_this1->length] = "PInt";
		++$_this1->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:820: characters 30-54
		$_this2 = $s->fieldsTypes;
		$_this2->arr[$_this2->length] = null;
		++$_this2->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this3 = $s->fieldsNames;
		$_this3->arr[$_this3->length] = "PFloat";
		++$_this3->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:820: characters 30-54
		$_this4 = $s->fieldsTypes;
		$_this4->arr[$_this4->length] = null;
		++$_this4->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this5 = $s->fieldsNames;
		$_this5->arr[$_this5->length] = "PBool";
		++$_this5->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:820: characters 30-54
		$_this6 = $s->fieldsTypes;
		$_this6->arr[$_this6->length] = null;
		++$_this6->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this7 = $s->fieldsNames;
		$_this7->arr[$_this7->length] = "PString";
		++$_this7->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:820: characters 30-54
		$_this8 = $s->fieldsTypes;
		$_this8->arr[$_this8->length] = null;
		++$_this8->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this9 = $s->fieldsNames;
		$_this9->arr[$_this9->length] = "PBytes";
		++$_this9->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this10 = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:801: characters 28-40
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 68-76
		$t = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 80-116
		$_g->arr[$_g->length] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		++$_g->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this10->arr[$_this10->length] = PropTypeDesc::PObj($_g);
		++$_this10->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this11 = $s->fieldsNames;
		$_this11->arr[$_this11->length] = "PSerializable";
		++$_this11->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this12 = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 54-117
		$_g1 = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:801: characters 28-40
		$v1 = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 68-76
		$t1 = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 80-116
		$_g1->arr[$_g1->length] = new HxAnon([
			"name" => "",
			"type" => $t1,
			"opt" => false,
		]);
		++$_g1->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this12->arr[$_this12->length] = PropTypeDesc::PObj($_g1);
		++$_this12->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this13 = $s->fieldsNames;
		$_this13->arr[$_this13->length] = "PEnum";
		++$_this13->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this14 = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 54-117
		$_g2 = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:801: characters 28-40
		$v2 = null;
		$v3 = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 68-76
		$t2 = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 80-116
		$_g2->arr[$_g2->length] = new HxAnon([
			"name" => "",
			"type" => $t2,
			"opt" => false,
		]);
		++$_g2->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this14->arr[$_this14->length] = PropTypeDesc::PObj($_g2);
		++$_this14->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this15 = $s->fieldsNames;
		$_this15->arr[$_this15->length] = "PMap";
		++$_this15->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this16 = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 54-117
		$_g3 = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:801: characters 28-40
		$v4 = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 68-76
		$t3 = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 80-116
		$_g3->arr[$_g3->length] = new HxAnon([
			"name" => "",
			"type" => $t3,
			"opt" => false,
		]);
		++$_g3->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this16->arr[$_this16->length] = PropTypeDesc::PObj($_g3);
		++$_this16->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this17 = $s->fieldsNames;
		$_this17->arr[$_this17->length] = "PArray";
		++$_this17->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this18 = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 54-117
		$_g4 = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:801: characters 28-40
		$v5 = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 68-76
		$t4 = PropTypeDesc::PArray(PropTypeDesc::PObj(\Array_hx::wrap([
			new HxAnon([
				"name" => "name",
				"opt" => false,
				"type" => PropTypeDesc::PString(),
			]),
			new HxAnon([
				"name" => "opt",
				"opt" => false,
				"type" => PropTypeDesc::PBool(),
			]),
			new HxAnon([
				"name" => "type",
				"opt" => false,
				"type" => PropTypeDesc::PEnum("hxbit.PropTypeDesc"),
			]),
		])));
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 80-116
		$_g4->arr[$_g4->length] = new HxAnon([
			"name" => "",
			"type" => $t4,
			"opt" => false,
		]);
		++$_g4->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this18->arr[$_this18->length] = PropTypeDesc::PObj($_g4);
		++$_this18->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this19 = $s->fieldsNames;
		$_this19->arr[$_this19->length] = "PObj";
		++$_this19->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this20 = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 54-117
		$_g5 = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:801: characters 28-40
		$v6 = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 68-76
		$t5 = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 80-116
		$_g5->arr[$_g5->length] = new HxAnon([
			"name" => "",
			"type" => $t5,
			"opt" => false,
		]);
		++$_g5->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this20->arr[$_this20->length] = PropTypeDesc::PObj($_g5);
		++$_this20->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this21 = $s->fieldsNames;
		$_this21->arr[$_this21->length] = "PAlias";
		++$_this21->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this22 = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 54-117
		$_g6 = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:801: characters 28-40
		$v7 = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 68-76
		$t6 = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 80-116
		$_g6->arr[$_g6->length] = new HxAnon([
			"name" => "",
			"type" => $t6,
			"opt" => false,
		]);
		++$_g6->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this22->arr[$_this22->length] = PropTypeDesc::PObj($_g6);
		++$_this22->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this23 = $s->fieldsNames;
		$_this23->arr[$_this23->length] = "PVector";
		++$_this23->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this24 = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 54-117
		$_g7 = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:801: characters 28-40
		$v8 = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 68-76
		$t7 = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 80-116
		$_g7->arr[$_g7->length] = new HxAnon([
			"name" => "",
			"type" => $t7,
			"opt" => false,
		]);
		++$_g7->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this24->arr[$_this24->length] = PropTypeDesc::PObj($_g7);
		++$_this24->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this25 = $s->fieldsNames;
		$_this25->arr[$_this25->length] = "PNull";
		++$_this25->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:820: characters 30-54
		$_this26 = $s->fieldsTypes;
		$_this26->arr[$_this26->length] = null;
		++$_this26->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this27 = $s->fieldsNames;
		$_this27->arr[$_this27->length] = "PUnknown";
		++$_this27->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:820: characters 30-54
		$_this28 = $s->fieldsTypes;
		$_this28->arr[$_this28->length] = null;
		++$_this28->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this29 = $s->fieldsNames;
		$_this29->arr[$_this29->length] = "PDynamic";
		++$_this29->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:820: characters 30-54
		$_this30 = $s->fieldsTypes;
		$_this30->arr[$_this30->length] = null;
		++$_this30->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this31 = $s->fieldsNames;
		$_this31->arr[$_this31->length] = "PInt64";
		++$_this31->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this32 = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 54-117
		$_g8 = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:801: characters 28-40
		$v9 = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 68-76
		$t8 = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 80-116
		$_g8->arr[$_g8->length] = new HxAnon([
			"name" => "",
			"type" => $t8,
			"opt" => false,
		]);
		++$_g8->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:808: characters 30-119
		$_this32->arr[$_this32->length] = PropTypeDesc::PObj($_g8);
		++$_this32->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this33 = $s->fieldsNames;
		$_this33->arr[$_this33->length] = "PFlags";
		++$_this33->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:820: characters 30-54
		$_this34 = $s->fieldsTypes;
		$_this34->arr[$_this34->length] = null;
		++$_this34->length;

		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:822: characters 29-54
		$_this35 = $s->fieldsNames;
		$_this35->arr[$_this35->length] = "PStruct";
		++$_this35->length;


		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,4,1/hxbit/Macros.hx:860: characters 62-70
		return $s;
	}
}

Boot::registerClass(hxbit_PropTypeDesc::class, 'hxbit.enumSer.hxbit_PropTypeDesc');
