<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: src/model/auth/User.hx
 */

namespace model\auth;

use \php\_Boot\HxAnon;
use \db\DbUser;
use \php\Boot;
use \haxe\Exception;
use \me\cunity\debug\Out;
use \db\DbQuery;
use \haxe\Log;
use \php\Lib;
use \shared\DbData;
use \php\Web;
use \haxe\Json;
use \haxe\_CallStack\CallStack_Impl_;
use \jwt\JWT;
use \haxe\ds\StringMap;

class User extends \Model {
	/**
	 * @var User
	 */
	static public $_me;
	/**
	 * @var int
	 */
	static public $lc = 0;

	/**
	 * @var \Date
	 */
	public $last_login;

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public static function _create ($param) {
		#src/model/auth/User.hx:47: characters 3-8
		(Log::$trace)(($param === null ? "null" : $param->toString()), new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 47,
			"className" => "model.auth.User",
			"methodName" => "_create",
		]));
		#src/model/auth/User.hx:48: characters 3-35
		$self = new User($param);
	}

	/**
	 * @param string $jwt
	 * @param string $user
	 * @param StringMap $params
	 * 
	 * @return string
	 */
	public static function getViciDialPassword ($jwt, $user, $params = null) {
		#src/model/auth/User.hx:412: characters 3-12
		return "";
	}

	/**
	 * @param DbUser $user
	 * 
	 * @return bool
	 */
	public static function login ($user) {
		#src/model/auth/User.hx:224: characters 3-8
		(Log::$trace)($user, new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 224,
			"className" => "model.auth.User",
			"methodName" => "login",
		]));
		#src/model/auth/User.hx:225: characters 10-38
		$_g = User::userIsAuthorized($user, true);
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 0) {
			#src/model/auth/User.hx:227: characters 32-38
			$dbData = $_g->params[0];
			#src/model/auth/User.hx:227: characters 9-75
			$uath = $_g;
			#src/model/auth/User.hx:228: characters 5-78
			$d = \Date::fromTime(\Date::now()->getTime() + 39600000.)->getTime();
			#src/model/auth/User.hx:229: characters 5-10
			(Log::$trace)(($d??'null') . ":" . (\Std::string(\Date::fromTime($d))??'null'), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 229,
				"className" => "model.auth.User",
				"methodName" => "login",
			]));
			#src/model/auth/User.hx:231: characters 9-30
			$jwt = ($dbData->dataInfo->data["id"] ?? null);
			#src/model/auth/User.hx:233: characters 10-27
			$jwt1 = $_SERVER["REMOTE_ADDR"];
			#src/model/auth/User.hx:230: lines 230-235
			$jwt2 = JWT::sign(new HxAnon([
				"id" => $jwt,
				"validUntil" => $d,
				"ip" => $jwt1,
				"mandator" => ($dbData->dataInfo->data["mandator"] ?? null),
			]), \S::$secret);
			#src/model/auth/User.hx:240: characters 5-64
			Web::setCookie("user.jwt", $jwt2, \Date::fromTime($d + 86400000));
			#src/model/auth/User.hx:241: characters 5-81
			Web::setCookie("user.id", ($dbData->dataInfo->data["id"] ?? null), \Date::fromTime($d + 86400000));
			#src/model/auth/User.hx:242: characters 5-95
			Web::setCookie("user.last_name", ($dbData->dataInfo->data["last_name"] ?? null), \Date::fromTime($d + 86400000));
			#src/model/auth/User.hx:243: characters 5-97
			Web::setCookie("user.first_name", ($dbData->dataInfo->data["first_name"] ?? null), \Date::fromTime($d + 86400000));
			#src/model/auth/User.hx:245: characters 5-10
			(Log::$trace)($uath->tag, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 245,
				"className" => "model.auth.User",
				"methodName" => "login",
			]));
			#src/model/auth/User.hx:246: characters 5-109
			$this1 = $dbData->dataInfo;
			$v = \Std::string($uath->tag === "PassChangeRequired");
			$this1->data["change_pass_required"] = $v;
			#src/model/auth/User.hx:248: characters 5-33
			$dbData->dataInfo->data["jwt"] = $jwt2;
			#src/model/auth/User.hx:250: characters 5-23
			\S::sendInfo($dbData);
			#src/model/auth/User.hx:251: characters 5-16
			return true;
		} else if ($__hx__switch === 2) {
			#src/model/auth/User.hx:227: characters 68-74
			$dbData = $_g->params[0];
			#src/model/auth/User.hx:227: characters 9-75
			$uath = $_g;
			#src/model/auth/User.hx:228: characters 5-78
			$d = \Date::fromTime(\Date::now()->getTime() + 39600000.)->getTime();
			#src/model/auth/User.hx:229: characters 5-10
			(Log::$trace)(($d??'null') . ":" . (\Std::string(\Date::fromTime($d))??'null'), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 229,
				"className" => "model.auth.User",
				"methodName" => "login",
			]));
			#src/model/auth/User.hx:231: characters 9-30
			$jwt = ($dbData->dataInfo->data["id"] ?? null);
			#src/model/auth/User.hx:233: characters 10-27
			$jwt1 = $_SERVER["REMOTE_ADDR"];
			#src/model/auth/User.hx:230: lines 230-235
			$jwt2 = JWT::sign(new HxAnon([
				"id" => $jwt,
				"validUntil" => $d,
				"ip" => $jwt1,
				"mandator" => ($dbData->dataInfo->data["mandator"] ?? null),
			]), \S::$secret);
			#src/model/auth/User.hx:240: characters 5-64
			Web::setCookie("user.jwt", $jwt2, \Date::fromTime($d + 86400000));
			#src/model/auth/User.hx:241: characters 5-81
			Web::setCookie("user.id", ($dbData->dataInfo->data["id"] ?? null), \Date::fromTime($d + 86400000));
			#src/model/auth/User.hx:242: characters 5-95
			Web::setCookie("user.last_name", ($dbData->dataInfo->data["last_name"] ?? null), \Date::fromTime($d + 86400000));
			#src/model/auth/User.hx:243: characters 5-97
			Web::setCookie("user.first_name", ($dbData->dataInfo->data["first_name"] ?? null), \Date::fromTime($d + 86400000));
			#src/model/auth/User.hx:245: characters 5-10
			(Log::$trace)($uath->tag, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 245,
				"className" => "model.auth.User",
				"methodName" => "login",
			]));
			#src/model/auth/User.hx:246: characters 5-109
			$this1 = $dbData->dataInfo;
			$v = \Std::string($uath->tag === "PassChangeRequired");
			$this1->data["change_pass_required"] = $v;
			#src/model/auth/User.hx:248: characters 5-33
			$dbData->dataInfo->data["jwt"] = $jwt2;
			#src/model/auth/User.hx:250: characters 5-23
			\S::sendInfo($dbData);
			#src/model/auth/User.hx:251: characters 5-16
			return true;
		} else {
			#src/model/auth/User.hx:253: characters 5-17
			return false;
		}
	}

	/**
	 * @param DbQuery $dbQuery
	 * 
	 * @return bool
	 */
	public static function logout ($dbQuery) {
		#src/model/auth/User.hx:259: characters 3-8
		(Log::$trace)($dbQuery->dbUser, new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 259,
			"className" => "model.auth.User",
			"methodName" => "logout",
		]));
		#src/model/auth/User.hx:261: characters 3-50
		$expiryDate = \Date::fromTime(\Date::now()->getTime() + 31556926000);
		#src/model/auth/User.hx:262: characters 3-44
		Web::setCookie("user.jwt", "", $expiryDate);
		#src/model/auth/User.hx:263: characters 3-70
		Web::setCookie("user.id", \Std::string($dbQuery->dbUser->id), $expiryDate);
		#src/model/auth/User.hx:267: characters 14-26
		$tmp = new DbData();
		#src/model/auth/User.hx:267: characters 27-45
		$_g = new StringMap();
		$_g->data["logout"] = "Done";
		#src/model/auth/User.hx:267: characters 3-46
		\S::sendInfo($tmp, $_g);
		#src/model/auth/User.hx:268: characters 3-14
		return true;
	}

	/**
	 * @param StringMap $user
	 * 
	 * @return bool
	 */
	public static function resetPassword ($user) {
		#src/model/auth/User.hx:139: characters 3-36
		$dbData = new DbData();
		#src/model/auth/User.hx:141: characters 3-77
		$d = \Date::fromTime(\Date::now()->getTime() + 480000.)->getTime();
		#src/model/auth/User.hx:142: characters 3-36
		$value = User::userEmail($user);
		$user->data["email"] = $value;
		#src/model/auth/User.hx:144: characters 14-31
		$value = ($user->data["user_name"] ?? null);
		#src/model/auth/User.hx:143: lines 143-147
		$value1 = JWT::sign(new HxAnon([
			"user_name" => $value,
			"validUntil" => $d,
			"mandator" => ($user->data["mandator"] ?? null),
		]), \S::$secret);
		$user->data["jwt"] = $value1;
		#src/model/auth/User.hx:148: characters 3-17
		User::sendMail($user);
		#src/model/auth/User.hx:149: lines 149-153
		$_g = new StringMap();
		$value = ($user->data["email"] ?? null);
		$_g->data["email"] = $value;
		$_g->data["pin"] = "12341";
		$_g->data["resetPassword"] = "OK";
		$dbData->dataInfo = $_g;
		#src/model/auth/User.hx:154: characters 3-21
		\S::sendInfo($dbData);
		#src/model/auth/User.hx:155: characters 3-14
		return true;
	}

	/**
	 * @param int $id
	 * @param DbQuery $dbQuery
	 * 
	 * @return bool
	 */
	public static function saveRequest ($id, $dbQuery) {
		#src/model/auth/User.hx:394: characters 3-8
		(Log::$trace)(Json::phpJsonEncode($dbQuery, null, null), new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 394,
			"className" => "model.auth.User",
			"methodName" => "saveRequest",
		]));
		#src/model/auth/User.hx:396: characters 3-42
		$request = Web::getPostData();
		#src/model/auth/User.hx:397: characters 3-8
		(Log::$trace)((mb_strlen($request)??'null') . " == " . (\Std::string(strlen(@iconv("UTF-8", "UTF-8//IGNORE",$request)))??'null'), new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 397,
			"className" => "model.auth.User",
			"methodName" => "saveRequest",
		]));
		#src/model/auth/User.hx:399: characters 3-83
		$rTime = \DateTools::format(\S::$last_request_time, "'%Y-%m-%d %H:%M:%S'");
		#src/model/auth/User.hx:400: characters 3-160
		$stmt = \S::$dbh->prepare("UPDATE activity SET \"request\"=:request FROM users WHERE users.id=:id AND users.id=activity.user", ((array)(null)));
		#src/model/auth/User.hx:402: lines 402-404
		$success = \Model::paramExecute($stmt, ((array)(new HxAnon([
			":id" => $id,
			":request" => $request,
		]))));
		#src/model/auth/User.hx:405: lines 405-406
		if (\Std::parseInt($stmt->errorCode()) > 0) {
			#src/model/auth/User.hx:406: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 406,
				"className" => "model.auth.User",
				"methodName" => "saveRequest",
			]));
		}
		#src/model/auth/User.hx:407: characters 3-17
		return $success;
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public static function sendMail ($param) {
		#src/model/auth/User.hx:311: characters 3-34
		$address = User::userEmail($param);
		#src/model/auth/User.hx:312: characters 3-8
		(Log::$trace)($address, new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 312,
			"className" => "model.auth.User",
			"methodName" => "sendMail",
		]));
		#src/model/auth/User.hx:313: characters 3-37
		$jwt = ($param->data["jwt"] ?? null);
		#src/model/auth/User.hx:314: characters 3-57
		$original_path = ($param->data["original_path"] ?? null);
		#src/model/auth/User.hx:315: characters 3-54
		$user_name = Boot::dynamicField(($param->data["user"] ?? null), 'user_name');
		#src/model/auth/User.hx:316: characters 3-60
		$host = $_SERVER['SERVER_NAME'];
		#src/model/auth/User.hx:317: lines 317-320
		if (($param->data["dev"] ?? null)) {
			#src/model/auth/User.hx:319: characters 4-32
			$host = "192.168.178.20:9000";
		}
		#src/model/auth/User.hx:321: lines 321-325
		$header = "\x0D\x0AContent-type: text/html; charset=utf-8\x0D\x0AFrom: SCHUTZENGELWERK crm-2.0 <admin@pitverwaltung.de>\x0D\x0AX-Mailer: HaxeMail\x0D\x0A";
		#src/model/auth/User.hx:326: lines 326-368
		$content = "\x0D\x0A<!DOCTYPE html>\x0D\x0A<html><head>\x0D\x0A<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\x0D\x0A<meta charset=\"utf-8\">\x0D\x0A<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\x0D\x0A<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\x0D\x0A\x0D\x0A<title>Neues Passwort</title>\x0D\x0A\x0D\x0A<style>\x0D\x0Ahtml,body{\x0D\x0A\x09height:100%;\x0D\x0A\x09width:100%;\x0D\x0A\x09display:flex;\x0D\x0A\x09margin:0px;\x0D\x0A\x09padding:0px;\x0D\x0A}\x0D\x0A\x09div{\x0D\x0A\x09\x09text-align:center;\x0D\x0A\x09\x09width:60%;\x0D\x0A\x09\x09height:40%;\x0D\x0A\x09\x09margin:auto;\x09\x09\x0D\x0A\x09}\x0D\x0A\x09.center{\x0D\x0A\x09        display: flex;\x0D\x0A        align-items: center;\x0D\x0A        justify-content: center;\x0D\x0A        flex-direction: column;\x0D\x0A        text-align: center;\x0D\x0A        min-height: 200px;\x0D\x0A        background-color: rgba(33, 33, 33, .3);\x0D\x0A        align-items: center;\x0D\x0A\x09}\x0D\x0A    </style>\x0D\x0A</head>\x0D\x0A<body>\x0D\x0A\x09<div class=\"center\">\x0D\x0A\x09\x09<a href=\"https://" . ($host??'null') . "/ChangePassword/" . ($jwt??'null') . "/" . ($user_name??'null') . ($original_path??'null') . "\">Passwort Ändern</span>\x0D\x0A\x09</div>\x0D\x0A</body>\x0D\x0A</html>\x0D\x0A";
		#src/model/auth/User.hx:370: lines 370-378
		if (mail($address,"Passwort Reset",$content,$header)) {
			#src/model/auth/User.hx:373: characters 4-9
			(Log::$trace)("Email sent to " . ($address??'null'), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 373,
				"className" => "model.auth.User",
				"methodName" => "sendMail",
			]));
		} else {
			#src/model/auth/User.hx:377: characters 4-9
			(Log::$trace)("Error sending Email to " . ($address??'null'), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 377,
				"className" => "model.auth.User",
				"methodName" => "sendMail",
			]));
		}
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return string
	 */
	public static function userEmail ($param) {
		#src/model/auth/User.hx:91: characters 3-36
		$dbData = new DbData();
		#src/model/auth/User.hx:92: characters 3-130
		$sql = "SELECT user_name FROM " . (\S::$dbSchema??'null') . ".users WHERE user_name=:user_name AND mandator=:mandator AND active=TRUE";
		#src/model/auth/User.hx:93: characters 3-65
		$stmt = \S::$dbh->prepare($sql, ((array)(null)));
		#src/model/auth/User.hx:95: characters 19-46
		$ob = Boot::dynamicField(($param->data["user"] ?? null), 'user_name');
		#src/model/auth/User.hx:94: lines 94-100
		if (!\Model::paramExecute($stmt, ((array)(new HxAnon([
			":user_name" => $ob,
			":mandator" => ($param->data["mandator"] ?? null),
		]))))) {
			#src/model/auth/User.hx:97: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 97,
				"className" => "model.auth.User",
				"methodName" => "userEmail",
			]));
			#src/model/auth/User.hx:98: characters 24-78
			$_g = new StringMap();
			$key = "" . (\Std::string(($param->data["action"] ?? null))??'null');
			$value = \Std::string($stmt->errorInfo());
			$_g->data[$key] = $value;
			#src/model/auth/User.hx:98: characters 4-79
			\S::sendErrors($dbData, $_g, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 98,
				"className" => "model.auth.User",
				"methodName" => "userEmail",
			]));
			#src/model/auth/User.hx:99: characters 4-13
			return "";
		}
		#src/model/auth/User.hx:101: lines 101-135
		if ($stmt->rowCount() > 0) {
			#src/model/auth/User.hx:104: characters 4-164
			$sql = "SELECT email, first_name, last_name, last_login, us.id FROM " . (\S::$dbSchema??'null') . ".users us INNER JOIN contacts cl ON us.contact=cl.id WHERE user_name=:user_name";
			#src/model/auth/User.hx:105: characters 4-48
			$stmt = \S::$dbh->prepare($sql, ((array)(null)));
			#src/model/auth/User.hx:106: lines 106-111
			if (!\Model::paramExecute($stmt, ((array)(new HxAnon([":user_name" => Boot::dynamicField(($param->data["user"] ?? null), 'user_name')]))))) {
				#src/model/auth/User.hx:110: characters 25-67
				$_g = new StringMap();
				$key = "" . (\Std::string(($param->data["action"] ?? null))??'null');
				$value = $stmt->errorInfo();
				$_g->data[$key] = $value;
				#src/model/auth/User.hx:110: characters 5-68
				\S::sendErrors($dbData, $_g, new HxAnon([
					"fileName" => "src/model/auth/User.hx",
					"lineNumber" => 110,
					"className" => "model.auth.User",
					"methodName" => "userEmail",
				]));
			}
			#src/model/auth/User.hx:112: lines 112-116
			if ($stmt->rowCount() === 0) {
				#src/model/auth/User.hx:114: characters 25-74
				$_g = new StringMap();
				$value = "user " . (\Std::string(($param->data["user_name"] ?? null))??'null') . " not found!";
				$_g->data["user"] = $value;
				#src/model/auth/User.hx:114: characters 5-75
				\S::sendErrors($dbData, $_g, new HxAnon([
					"fileName" => "src/model/auth/User.hx",
					"lineNumber" => 114,
					"className" => "model.auth.User",
					"methodName" => "userEmail",
				]));
				#src/model/auth/User.hx:115: characters 5-14
				return "";
			}
			#src/model/auth/User.hx:118: characters 4-52
			$assoc = $stmt->fetch(\PDO::FETCH_ASSOC);
			#src/model/auth/User.hx:119: characters 4-68
			$res = Lib::hashOfAssociativeArray($assoc);
			#src/model/auth/User.hx:122: characters 4-25
			$dbData->dataInfo = $res;
			#src/model/auth/User.hx:126: characters 4-9
			(Log::$trace)((\Std::string(($res->data["user_name"] ?? null))??'null') . ":" . (\Std::string(($res->data["email"] ?? null))??'null'), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 126,
				"className" => "model.auth.User",
				"methodName" => "userEmail",
			]));
			#src/model/auth/User.hx:128: characters 4-23
			return ($res->data["email"] ?? null);
		} else {
			#src/model/auth/User.hx:132: characters 4-9
			(Log::$trace)((\Std::string(Boot::getInstanceClosure($stmt, 'rowCount'))??'null') . (":" . ($sql??'null')), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 132,
				"className" => "model.auth.User",
				"methodName" => "userEmail",
			]));
			#src/model/auth/User.hx:133: characters 24-59
			$_g = new StringMap();
			$key = "" . (\Std::string(($param->data["action"] ?? null))??'null');
			$_g->data[$key] = "user_name";
			#src/model/auth/User.hx:133: characters 4-60
			\S::sendErrors($dbData, $_g, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 133,
				"className" => "model.auth.User",
				"methodName" => "userEmail",
			]));
			#src/model/auth/User.hx:134: characters 4-13
			return "";
		}
	}

	/**
	 *
	 * @user user
	 * @return UserAuth
	 * 
	 * @param DbUser $user
	 * @param bool $login
	 * 
	 * @return UserAuth
	 */
	public static function userIsAuthorized ($user, $login = null) {
		#src/model/auth/User.hx:165: characters 3-36
		$dbData = new DbData();
		#src/model/auth/User.hx:166: characters 3-107
		$sql = "SELECT user_name FROM " . (\S::$dbSchema??'null') . ".users WHERE user_name=:user_name AND active=TRUE";
		#src/model/auth/User.hx:167: characters 3-65
		$stmt = \S::$dbh->prepare($sql, ((array)(null)));
		#src/model/auth/User.hx:168: lines 168-172
		if (!\Model::paramExecute($stmt, ((array)(new HxAnon([":user_name" => "" . ($user->user_name??'null')]))))) {
			#src/model/auth/User.hx:170: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 170,
				"className" => "model.auth.User",
				"methodName" => "userIsAuthorized",
			]));
			#src/model/auth/User.hx:171: characters 24-81
			$_g = new StringMap();
			$value = \Std::string($stmt->errorInfo());
			$_g->data["User.userIsAuthorized"] = $value;
			#src/model/auth/User.hx:171: characters 4-82
			\S::sendErrors($dbData, $_g, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 171,
				"className" => "model.auth.User",
				"methodName" => "userIsAuthorized",
			]));
		}
		#src/model/auth/User.hx:173: lines 173-218
		if ($stmt->rowCount() > 0) {
			#src/model/auth/User.hx:176: characters 4-225
			$sql = "SELECT change_pass_required, first_name, last_name, last_login, us.id, us.mandator FROM " . (\S::$dbSchema??'null') . ".users us INNER JOIN contacts cl ON us.contact=cl.id WHERE user_name=:user_name AND phash=crypt(:password,phash)";
			#src/model/auth/User.hx:177: characters 4-9
			(Log::$trace)($sql, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 177,
				"className" => "model.auth.User",
				"methodName" => "userIsAuthorized",
			]));
			#src/model/auth/User.hx:178: characters 4-48
			$stmt = \S::$dbh->prepare($sql, ((array)(null)));
			#src/model/auth/User.hx:179: lines 179-182
			if (!\Model::paramExecute($stmt, ((array)(new HxAnon([
				":user_name" => "" . ($user->user_name??'null'),
				":password" => "" . ($user->password??'null'),
			]))))) {
				#src/model/auth/User.hx:181: characters 25-70
				$_g = new StringMap();
				$value = $stmt->errorInfo();
				$_g->data["User.userIsAuthorized"] = $value;
				#src/model/auth/User.hx:181: characters 5-71
				\S::sendErrors($dbData, $_g, new HxAnon([
					"fileName" => "src/model/auth/User.hx",
					"lineNumber" => 181,
					"className" => "model.auth.User",
					"methodName" => "userIsAuthorized",
				]));
			}
			#src/model/auth/User.hx:183: lines 183-187
			if ($stmt->rowCount() === 0) {
				#src/model/auth/User.hx:185: characters 25-76
				$_g = new StringMap();
				$_g->data["user"] = "user " . ($user->user_name??'null') . " forgot password?";
				#src/model/auth/User.hx:185: characters 5-77
				\S::sendErrors($dbData, $_g, new HxAnon([
					"fileName" => "src/model/auth/User.hx",
					"lineNumber" => 185,
					"className" => "model.auth.User",
					"methodName" => "userIsAuthorized",
				]));
				#src/model/auth/User.hx:186: characters 5-26
				return UserAuth::NotOK();
			}
			#src/model/auth/User.hx:189: characters 4-52
			$assoc = $stmt->fetch(\PDO::FETCH_ASSOC);
			#src/model/auth/User.hx:190: characters 4-68
			$res = Lib::hashOfAssociativeArray($assoc);
			#src/model/auth/User.hx:193: characters 4-25
			$dbData->dataInfo = $res;
			#src/model/auth/User.hx:196: characters 4-40
			$dbData->dataInfo->data["loggedIn"] = "true";
			#src/model/auth/User.hx:197: characters 4-9
			(Log::$trace)((\Std::string(($res->data["user_name"] ?? null))??'null') . ":" . (\Std::string(($res->data["change_pass_required"] ?? null))??'null'), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 197,
				"className" => "model.auth.User",
				"methodName" => "userIsAuthorized",
			]));
			#src/model/auth/User.hx:198: characters 4-9
			(Log::$trace)("change_pass_required" . ((((($res->data["change_pass_required"] ?? null) === true) || (($res->data["change_pass_required"] ?? null) === "true") ? "Y" : "N"))??'null'), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 198,
				"className" => "model.auth.User",
				"methodName" => "userIsAuthorized",
			]));
			#src/model/auth/User.hx:199: lines 199-208
			if ($login) {
				#src/model/auth/User.hx:201: characters 5-76
				$rTime = \DateTools::format(\Date::now(), "'%Y-%m-%d %H:%M:%S'");
				#src/model/auth/User.hx:202: characters 5-117
				$update = \S::$dbh->prepare("UPDATE users SET last_login=" . ($rTime??'null') . " WHERE id=:id", ((array)(null)));
				#src/model/auth/User.hx:203: characters 5-100
				$success = \Model::paramExecute($update, ((array)(new HxAnon([":id" => ($res->data["id"] ?? null)]))));
				#src/model/auth/User.hx:204: characters 5-10
				(Log::$trace)($update->errorCode(), new HxAnon([
					"fileName" => "src/model/auth/User.hx",
					"lineNumber" => 204,
					"className" => "model.auth.User",
					"methodName" => "userIsAuthorized",
				]));
				#src/model/auth/User.hx:206: characters 5-42
				$dbData->dataInfo->data["last_login"] = $rTime;
			}
			#src/model/auth/User.hx:209: lines 209-210
			if ((($res->data["change_pass_required"] ?? null) === true) || (($res->data["change_pass_required"] ?? null) === "true")) {
				#src/model/auth/User.hx:210: characters 5-47
				return UserAuth::PassChangeRequired($dbData);
			}
			#src/model/auth/User.hx:211: characters 4-34
			return UserAuth::AuthOK($dbData);
		} else {
			#src/model/auth/User.hx:215: characters 4-9
			(Log::$trace)((\Std::string(Boot::getInstanceClosure($stmt, 'rowCount'))??'null') . (":" . ($sql??'null')), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 215,
				"className" => "model.auth.User",
				"methodName" => "userIsAuthorized",
			]));
			#src/model/auth/User.hx:216: characters 24-86
			$_g = new StringMap();
			$_g->data["User.userIsAuthorized"] = "user " . ($user->user_name??'null') . " not found!";
			#src/model/auth/User.hx:216: characters 4-87
			\S::sendErrors($dbData, $_g, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 216,
				"className" => "model.auth.User",
				"methodName" => "userIsAuthorized",
			]));
			#src/model/auth/User.hx:217: characters 4-25
			return UserAuth::NotOK();
		}
	}

	/**
	 * @param DbQuery $dbQuery
	 * 
	 * @return bool
	 */
	public static function verify ($dbQuery) {
		#src/model/auth/User.hx:417: characters 3-39
		$jwt = $dbQuery->dbUser->jwt;
		#src/model/auth/User.hx:418: characters 3-34
		$id = $dbQuery->dbUser->id;
		#src/model/auth/User.hx:419: characters 3-40
		$now = \Date::now()->getTime();
		#src/model/auth/User.hx:420: characters 3-36
		$dbData = new DbData();
		#src/model/auth/User.hx:423: lines 423-501
		try {
			#src/model/auth/User.hx:424: characters 4-45
			$userInfo = JWT::extract($jwt);
			#src/model/auth/User.hx:426: lines 426-454
			if (($userInfo->id === null) && ($userInfo->id === $dbQuery->dbUser->id) && (($userInfo->validUntil - \Date::now()->getTime()) > 0)) {
				#src/model/auth/User.hx:428: characters 5-61
				$jRes = JWT::verify($jwt, \S::$secret);
				#src/model/auth/User.hx:429: characters 5-10
				(Log::$trace)($jRes, new HxAnon([
					"fileName" => "src/model/auth/User.hx",
					"lineNumber" => 429,
					"className" => "model.auth.User",
					"methodName" => "verify",
				]));
				#src/model/auth/User.hx:430: lines 430-452
				$__hx__switch = ($jRes->index);
				if ($__hx__switch === 0) {
					#src/model/auth/User.hx:439: characters 17-24
					$payload = $jRes->params[0];
					#src/model/auth/User.hx:441: lines 441-442
					if ($dbQuery->dbUser->mandator === null) {
						#src/model/auth/User.hx:442: characters 8-51
						$dbQuery->dbUser->mandator = $userInfo->mandator;
					}
					#src/model/auth/User.hx:445: lines 445-446
					if (\S::$action === "verify") {
						#src/model/auth/User.hx:446: characters 27-43
						$_g = new StringMap();
						$_g->data["verify"] = "OK";
						#src/model/auth/User.hx:446: characters 8-44
						\S::sendInfo($dbData, $_g);
					}
					#src/model/auth/User.hx:447: characters 7-11
					return true;
				} else if ($__hx__switch === 1) {
					#src/model/auth/User.hx:432: characters 19-26
					$payload = $jRes->params[0];
					#src/model/auth/User.hx:433: characters 7-12
					(Log::$trace)($payload, new HxAnon([
						"fileName" => "src/model/auth/User.hx",
						"lineNumber" => 433,
						"className" => "model.auth.User",
						"methodName" => "verify",
					]));
					#src/model/auth/User.hx:436: characters 27-50
					$_g = new StringMap();
					$_g->data["jwtError"] = "Invalid";
					#src/model/auth/User.hx:436: characters 7-50
					$dbData->dataErrors = $_g;
					#src/model/auth/User.hx:437: characters 26-46
					$_g = new StringMap();
					$_g->data["loginTask"] = "Login";
					#src/model/auth/User.hx:437: characters 7-47
					\S::sendInfo($dbData, $_g);
					#src/model/auth/User.hx:438: characters 7-12
					return false;
				} else {
					#src/model/auth/User.hx:449: characters 27-179
					$_g = new StringMap();
					$value = "" . (\DateTools::format(\Date::fromTime($userInfo->validUntil), "%d.%m.%y %H:%M:%S")??'null') . "<" . (\DateTools::format(\Date::fromTime($now), "%d.%m.%y %H:%M:%S")??'null');
					$_g->data["jwtError"] = $value;
					#src/model/auth/User.hx:449: characters 7-179
					$dbData->dataErrors = $_g;
					#src/model/auth/User.hx:450: characters 26-46
					$_g = new StringMap();
					$_g->data["loginTask"] = "Login";
					#src/model/auth/User.hx:450: characters 7-47
					\S::sendInfo($dbData, $_g);
					#src/model/auth/User.hx:451: characters 7-12
					return false;
				}
			}
			#src/model/auth/User.hx:460: lines 460-494
			if (($id === $userInfo->id) && ($userInfo->ip === $_SERVER["REMOTE_ADDR"]) && (($userInfo->validUntil - \Date::now()->getTime()) > 0)) {
				#src/model/auth/User.hx:462: characters 5-10
				(Log::$trace)("calling JWT.verify now...", new HxAnon([
					"fileName" => "src/model/auth/User.hx",
					"lineNumber" => 462,
					"className" => "model.auth.User",
					"methodName" => "verify",
				]));
				#src/model/auth/User.hx:464: characters 5-61
				$jRes = JWT::verify($jwt, \S::$secret);
				#src/model/auth/User.hx:466: lines 466-486
				$__hx__switch = ($jRes->index);
				if ($__hx__switch === 0) {
					#src/model/auth/User.hx:476: characters 17-24
					$payload = $jRes->params[0];
					#src/model/auth/User.hx:480: lines 480-481
					if (\S::$action === "verify") {
						#src/model/auth/User.hx:481: characters 27-131
						$_g = new StringMap();
						$_g->data["verify"] = "OK";
						$value = \DateTools::format(\Date::fromTime($userInfo->validUntil), "%d.%m.%y %H:%M:%S");
						$_g->data["validUntil"] = $value;
						#src/model/auth/User.hx:481: characters 8-132
						\S::sendInfo($dbData, $_g);
					}
					#src/model/auth/User.hx:482: characters 7-11
					return true;
				} else if ($__hx__switch === 1) {
					#src/model/auth/User.hx:468: characters 19-26
					$payload = $jRes->params[0];
					#src/model/auth/User.hx:469: characters 7-12
					(Log::$trace)($payload, new HxAnon([
						"fileName" => "src/model/auth/User.hx",
						"lineNumber" => 469,
						"className" => "model.auth.User",
						"methodName" => "verify",
					]));
					#src/model/auth/User.hx:472: characters 27-50
					$_g = new StringMap();
					$_g->data["jwtError"] = "Invalid";
					#src/model/auth/User.hx:472: characters 7-50
					$dbData->dataErrors = $_g;
					#src/model/auth/User.hx:473: characters 26-48
					$_g = new StringMap();
					$_g->data["loginTask"] = "Login";
					#src/model/auth/User.hx:473: characters 7-49
					\S::sendInfo($dbData, $_g);
					#src/model/auth/User.hx:475: characters 7-12
					return false;
				} else {
					#src/model/auth/User.hx:484: characters 20-32
					$tmp = new DbData();
					#src/model/auth/User.hx:484: characters 34-52
					$_g = new StringMap();
					$_g->data["jwtError"] = $jRes;
					#src/model/auth/User.hx:484: characters 7-53
					\S::sendErrors($tmp, $_g, new HxAnon([
						"fileName" => "src/model/auth/User.hx",
						"lineNumber" => 484,
						"className" => "model.auth.User",
						"methodName" => "verify",
					]));
					#src/model/auth/User.hx:485: characters 7-12
					return false;
				}
			} else {
				#src/model/auth/User.hx:490: characters 25-177
				$_g = new StringMap();
				$value = "" . (\DateTools::format(\Date::fromTime($userInfo->validUntil), "%d.%m.%y %H:%M:%S")??'null') . "<" . (\DateTools::format(\Date::fromTime($now), "%d.%m.%y %H:%M:%S")??'null');
				$_g->data["jwtError"] = $value;
				#src/model/auth/User.hx:490: characters 5-177
				$dbData->dataErrors = $_g;
				#src/model/auth/User.hx:491: characters 24-44
				$_g = new StringMap();
				$_g->data["loginTask"] = "Login";
				#src/model/auth/User.hx:491: characters 5-45
				\S::sendInfo($dbData, $_g);
				#src/model/auth/User.hx:493: characters 5-17
				return false;
			}
		} catch(\Throwable $_g) {
			$ex = Exception::caught($_g)->unwrap();
			#src/model/auth/User.hx:498: characters 4-9
			(Log::$trace)($ex, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 498,
				"className" => "model.auth.User",
				"methodName" => "verify",
			]));
			#src/model/auth/User.hx:499: characters 4-34
			\S::exit(new HxAnon(["error" => \Std::string($ex)]));
			#src/model/auth/User.hx:500: characters 4-16
			return false;
		}
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		#src/model/auth/User.hx:57: characters 3-8
		(Log::$trace)(User::$lc, new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 57,
			"className" => "model.auth.User",
			"methodName" => "new",
		]));
		#src/model/auth/User.hx:58: lines 58-66
		if (User::$lc === 1) {
			#src/model/auth/User.hx:60: characters 4-9
			(Log::$trace)(User::$_me->dbData, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 60,
				"className" => "model.auth.User",
				"methodName" => "new",
			]));
			#src/model/auth/User.hx:61: characters 4-40
			Out::dumpStack(CallStack_Impl_::callStack(), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 61,
				"className" => "model.auth.User",
				"methodName" => "new",
			]));
			#src/model/auth/User.hx:62: characters 4-26
			\S::sendInfo(User::$_me->dbData);
		} else {
			#src/model/auth/User.hx:65: characters 4-14
			User::$_me = $this;
		}
		#src/model/auth/User.hx:67: characters 3-15
		parent::__construct($param);
		#src/model/auth/User.hx:69: lines 69-74
		if (User::$lc++ > 1) {
			#src/model/auth/User.hx:71: characters 4-9
			(Log::$trace)("too much " . (User::$lc??'null'), new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 71,
				"className" => "model.auth.User",
				"methodName" => "new",
			]));
		} else {
			#src/model/auth/User.hx:74: characters 4-9
			$this->run();
		}
	}

	/**
	 * @return bool
	 */
	public function changePassword () {
		#src/model/auth/User.hx:273: lines 273-277
		if (Boot::equal(($this->param->data["new_pass"] ?? null), ($this->param->data["pass"] ?? null))) {
			#src/model/auth/User.hx:275: characters 4-78
			$this->dbData->dataErrors->data["changePassword"] = "Das Passwort wurde nicht geändert!";
			#src/model/auth/User.hx:276: characters 4-22
			\S::sendInfo($this->dbData);
		}
		#src/model/auth/User.hx:279: lines 279-281
		$sql = ((Boot::dynamicField(($this->param->data["user"] ?? null), 'id') !== "undefined") && (Boot::dynamicField(($this->param->data["user"] ?? null), 'id') !== null) ? "UPDATE " . (\S::$dbSchema??'null') . ".users SET phash=crypt(:new_password,gen_salt('bf',8)),change_pass_required=false WHERE id=:id" : "UPDATE " . (\S::$dbSchema??'null') . ".users SET phash=crypt(:new_password,gen_salt('bf',8)),change_pass_required=false WHERE user_name=:user_name AND mandator=:mandator");
		#src/model/auth/User.hx:282: characters 3-8
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 282,
			"className" => "model.auth.User",
			"methodName" => "changePassword",
		]));
		#src/model/auth/User.hx:283: characters 3-65
		$stmt = \S::$dbh->prepare($sql, ((array)(null)));
		#src/model/auth/User.hx:284: lines 284-289
		$ob = null;
		#src/model/auth/User.hx:286: lines 286-289
		if ((Boot::dynamicField(($this->param->data["user"] ?? null), 'id') !== "undefined") && (Boot::dynamicField(($this->param->data["user"] ?? null), 'id') !== null)) {
			#src/model/auth/User.hx:287: characters 13-33
			$ob1 = Boot::dynamicField(($this->param->data["user"] ?? null), 'id');
			#src/model/auth/User.hx:284: lines 284-289
			$ob = new HxAnon([
				":id" => $ob1,
				":new_password" => ($this->param->data["new_pass"] ?? null),
			]);
		} else {
			#src/model/auth/User.hx:288: characters 22-43
			$ob1 = ($this->param->data["new_pass"] ?? null);
			#src/model/auth/User.hx:288: characters 58-85
			$ob2 = Boot::dynamicField(($this->param->data["user"] ?? null), 'user_name');
			#src/model/auth/User.hx:284: lines 284-289
			$ob = new HxAnon([
				":new_password" => $ob1,
				":user_name" => $ob2,
				":mandator" => ($this->param->data["mandator"] ?? null),
			]);
		}
		#src/model/auth/User.hx:284: lines 284-292
		if (!\Model::paramExecute($stmt, ((array)($ob)))) {
			#src/model/auth/User.hx:291: characters 17-23
			$tmp = $this->dbData;
			#src/model/auth/User.hx:291: characters 24-62
			$_g = new StringMap();
			$value = $stmt->errorInfo();
			$_g->data["changePassword"] = $value;
			#src/model/auth/User.hx:291: characters 4-63
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 291,
				"className" => "model.auth.User",
				"methodName" => "changePassword",
			]));
		}
		#src/model/auth/User.hx:293: lines 293-296
		if ($stmt->rowCount() === 0) {
			#src/model/auth/User.hx:295: characters 17-23
			$tmp = $this->dbData;
			#src/model/auth/User.hx:295: characters 24-70
			$_g = new StringMap();
			$_g->data["changePassword"] = "Benutzer nicht gefunden!";
			#src/model/auth/User.hx:295: characters 4-71
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/auth/User.hx",
				"lineNumber" => 295,
				"className" => "model.auth.User",
				"methodName" => "changePassword",
			]));
		}
		#src/model/auth/User.hx:298: characters 3-57
		$userInfo = JWT::extract(($this->param->data["jwt"] ?? null));
		#src/model/auth/User.hx:299: characters 3-8
		(Log::$trace)($userInfo, new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 299,
			"className" => "model.auth.User",
			"methodName" => "changePassword",
		]));
		#src/model/auth/User.hx:301: characters 3-43
		$this->dbData->dataInfo->data["changePassword"] = "OK";
		#src/model/auth/User.hx:303: characters 3-32
		$dbQuery = \Model::binary();
		#src/model/auth/User.hx:305: characters 3-31
		return User::login($dbQuery->dbUser);
	}

	/**
	 * @return void
	 */
	public function edit () {
		#src/model/auth/User.hx:79: characters 3-8
		(Log::$trace)($this->joinSql, new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 79,
			"className" => "model.auth.User",
			"methodName" => "edit",
		]));
		#src/model/auth/User.hx:80: characters 3-8
		(Log::$trace)($this->filterSql, new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 80,
			"className" => "model.auth.User",
			"methodName" => "edit",
		]));
		#src/model/auth/User.hx:81: characters 3-41
		\S::sendbytes($this->serializeRows($this->doSelect()));
	}

	/**
	 * @return StringMap
	 */
	public function getExternalUserData () {
		#src/model/auth/User.hx:86: characters 3-14
		return null;
	}

	/**
	 * @return bool
	 */
	public function save () {
		#src/model/auth/User.hx:383: characters 3-22
		$res = $this->update();
		#src/model/auth/User.hx:384: characters 3-8
		(Log::$trace)($res, new HxAnon([
			"fileName" => "src/model/auth/User.hx",
			"lineNumber" => 384,
			"className" => "model.auth.User",
			"methodName" => "save",
		]));
		#src/model/auth/User.hx:385: characters 3-41
		\S::sendbytes($this->serializeRows($this->doSelect()));
		#src/model/auth/User.hx:387: characters 3-14
		return true;
	}
}

Boot::registerClass(User::class, 'model.auth.User');
