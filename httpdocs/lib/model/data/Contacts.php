<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: src/model/data/Contacts.hx
 */

namespace model\data;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Log;
use \php\_Boot\HxString;
use \haxe\ds\StringMap;

/**
 * ...
 * @author axel@cunity.me
 */
class Contacts extends \Model {
	/**
	 * @var \Array_hx
	 */
	static public $vicdial_list_fields;

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		#src/model/data/Contacts.hx:32: characters 3-15
		parent::__construct($param);
		#src/model/data/Contacts.hx:33: characters 3-7
		$this->go();
	}

	/**
	 * @param int $lead_id
	 * 
	 * @return mixed
	 */
	public function getRecordings ($lead_id) {
		#src/model/data/Contacts.hx:48: lines 48-50
		return $this->query("SELECT location, start_time, length_in_sec FROM recording_log WHERE lead_id = " . ($lead_id??'null') . " AND length_in_sec>60 ORDER BY start_time DESC");
	}

	/**
	 * @return void
	 */
	public function go () {
		#src/model/data/Contacts.hx:37: characters 3-8
		(Log::$trace)($this->action, new HxAnon([
			"fileName" => "src/model/data/Contacts.hx",
			"lineNumber" => 37,
			"className" => "model.data.Contacts",
			"methodName" => "go",
		]));
		#src/model/data/Contacts.hx:38: characters 10-16
		if ($this->action === "sync") {
			#src/model/data/Contacts.hx:40: characters 5-11
			$this->sync();
		} else {
			#src/model/data/Contacts.hx:42: characters 5-10
			$this->run();
		}
	}

	/**
	 * @return void
	 */
	public function sync () {
		#src/model/data/Contacts.hx:55: characters 3-8
		(Log::$trace)(($this->param === null ? "null" : $this->param->toString()), new HxAnon([
			"fileName" => "src/model/data/Contacts.hx",
			"lineNumber" => 55,
			"className" => "model.data.Contacts",
			"methodName" => "sync",
		]));
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$vicdial_list_fields = HxString::split("lead_id,entry_date,modify_date,status,user,vendor_lead_code,source_id,list_id,gmt_offset_now,called_since_last_reset,phone_code,phone_number,title,first_name,middle_initial,last_name,address1,address2,address3,city,state,province,postal_code,country_code,gender,date_of_birth,alt_phone,email,security_phrase,comments,called_count,last_local_call_time,rank,owner,entry_list_id", ",");
	}
}

Boot::registerClass(Contacts::class, 'model.data.Contacts');
Contacts::__hx__init();
