<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: src/shared/DbData.hx
 */

namespace shared;

use \hxbit\Serializable;
use \haxe\io\_BytesData\Container;
use \php\Boot;
use \haxe\Exception;
use \hxbit\Schema;
use \haxe\io\Error;
use \hxbit\PropTypeDesc;
use \haxe\ds\StringMap;
use \haxe\io\Bytes;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \hxbit\Serializer;

/**
 * ...
 * @author axel@cunity.me
 */
class DbData implements Serializable {
	/**
	 * @var int
	 */
	static public $__clid;

	/**
	 * @var int
	 */
	public $__uid;
	/**
	 * @var StringMap
	 */
	public $dataErrors;
	/**
	 * @var StringMap
	 */
	public $dataInfo;
	/**
	 * @var StringMap
	 */
	public $dataParams;
	/**
	 * @var \Array_hx
	 */
	public $dataRows;

	/**
	 * @return void
	 */
	public function __construct () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:658: characters 52-79
		$this->__uid = (Serializer::$SEQ << 24) | ++Serializer::$UID;
		#src/shared/DbData.hx:22: characters 3-18
		$this->dataErrors = new StringMap();
		#src/shared/DbData.hx:23: lines 23-25
		$_g = new StringMap();
		$value = \DateTools::format(\Date::now(), "%Y-%m-%d_%H:%M:%S");
		$_g->data["datetime"] = $value;
		$this->dataInfo = $_g;
		#src/shared/DbData.hx:26: characters 3-25
		$this->dataParams = new StringMap();
		#src/shared/DbData.hx:27: characters 3-25
		$this->dataRows = new \Array_hx();
	}

	/**
	 * @return int
	 */
	public function getCLID () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:674: characters 61-74
		return DbData::$__clid;
	}

	/**
	 * @return Schema
	 */
	public function getSerializeSchema () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:708: characters 7-101
		$schema = new Schema();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "dataErrors";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PMap(PropTypeDesc::PString(), PropTypeDesc::PString());
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "dataInfo";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PMap(PropTypeDesc::PString(), PropTypeDesc::PDynamic());
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "dataParams";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PMap(PropTypeDesc::PString(), PropTypeDesc::PMap(PropTypeDesc::PString(), PropTypeDesc::PString()));
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "dataRows";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PArray(PropTypeDesc::PMap(PropTypeDesc::PString(), PropTypeDesc::PString()));
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:710: characters 7-61
		$schema->isFinal = Serializer::isClassFinal(DbData::$__clid);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:711: characters 7-20
		return $schema;
	}

	/**
	 * @param Serializer $__ctx
	 * 
	 * @return void
	 */
	public function serialize ($__ctx) {
		#src/shared/DbData.hx:15: characters 6-47
		$a = $this->dataErrors;
		if ($a === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$_g = new \Array_hx();
			$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($a->data))));
			while ($k->hasNext()) {
				$k1 = $k->next();
				$_g->arr[$_g->length++] = $k1;
			}
			$keys = $_g;
			$v = $keys->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_g = 0;
			while ($_g < $keys->length) {
				$k = ($keys->arr[$_g] ?? null);
				++$_g;
				if ($k === null) {
					$_this = $__ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$b = strlen($k);
					$b1 = new Bytes($b, new Container($k));
					$v = $b1->length + 1;
					if (($v >= 0) && ($v < 128)) {
						$_this1 = $__ctx->out;
						$_this1->b = ($_this1->b . chr($v));
					} else {
						$_this2 = $__ctx->out;
						$_this2->b = ($_this2->b . chr(128));
						$__ctx->out->addInt32($v);
					}
					$_this3 = $__ctx->out;
					$_this3->b = ($_this3->b . $b1->b->s);
				}
				$v1 = ($a->data[$k] ?? null);
				if ($v1 === null) {
					$_this4 = $__ctx->out;
					$_this4->b = ($_this4->b . chr(0));
				} else {
					$b2 = strlen($v1);
					$b3 = new Bytes($b2, new Container($v1));
					$v2 = $b3->length + 1;
					if (($v2 >= 0) && ($v2 < 128)) {
						$_this5 = $__ctx->out;
						$_this5->b = ($_this5->b . chr($v2));
					} else {
						$_this6 = $__ctx->out;
						$_this6->b = ($_this6->b . chr(128));
						$__ctx->out->addInt32($v2);
					}
					$_this7 = $__ctx->out;
					$_this7->b = ($_this7->b . $b3->b->s);
				}
			}
		}
		#src/shared/DbData.hx:16: characters 6-46
		$a = $this->dataInfo;
		if ($a === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$_g = new \Array_hx();
			$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($a->data))));
			while ($k->hasNext()) {
				$k1 = $k->next();
				$_g->arr[$_g->length++] = $k1;
			}
			$keys = $_g;
			$v = $keys->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_g = 0;
			while ($_g < $keys->length) {
				$k = ($keys->arr[$_g] ?? null);
				++$_g;
				if ($k === null) {
					$_this = $__ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$b = strlen($k);
					$b1 = new Bytes($b, new Container($k));
					$v = $b1->length + 1;
					if (($v >= 0) && ($v < 128)) {
						$_this1 = $__ctx->out;
						$_this1->b = ($_this1->b . chr($v));
					} else {
						$_this2 = $__ctx->out;
						$_this2->b = ($_this2->b . chr(128));
						$__ctx->out->addInt32($v);
					}
					$_this3 = $__ctx->out;
					$_this3->b = ($_this3->b . $b1->b->s);
				}
				$__ctx->addDynamic(($a->data[$k] ?? null));
			}
		}
		#src/shared/DbData.hx:17: characters 6-59
		$a = $this->dataParams;
		if ($a === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$_g = new \Array_hx();
			$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($a->data))));
			while ($k->hasNext()) {
				$k1 = $k->next();
				$_g->arr[$_g->length++] = $k1;
			}
			$keys = $_g;
			$v = $keys->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_g = 0;
			while ($_g < $keys->length) {
				$k = ($keys->arr[$_g] ?? null);
				++$_g;
				if ($k === null) {
					$_this = $__ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$b = strlen($k);
					$b1 = new Bytes($b, new Container($k));
					$v = $b1->length + 1;
					if (($v >= 0) && ($v < 128)) {
						$_this1 = $__ctx->out;
						$_this1->b = ($_this1->b . chr($v));
					} else {
						$_this2 = $__ctx->out;
						$_this2->b = ($_this2->b . chr(128));
						$__ctx->out->addInt32($v);
					}
					$_this3 = $__ctx->out;
					$_this3->b = ($_this3->b . $b1->b->s);
				}
				$v1 = ($a->data[$k] ?? null);
				if ($v1 === null) {
					$_this4 = $__ctx->out;
					$_this4->b = ($_this4->b . chr(0));
				} else {
					$_g1 = new \Array_hx();
					$k1 = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($v1->data))));
					while ($k1->hasNext()) {
						$k2 = $k1->next();
						$_g1->arr[$_g1->length++] = $k2;
					}
					$keys1 = $_g1;
					$v2 = $keys1->length + 1;
					if (($v2 >= 0) && ($v2 < 128)) {
						$_this5 = $__ctx->out;
						$_this5->b = ($_this5->b . chr($v2));
					} else {
						$_this6 = $__ctx->out;
						$_this6->b = ($_this6->b . chr(128));
						$__ctx->out->addInt32($v2);
					}
					$_g2 = 0;
					while ($_g2 < $keys1->length) {
						$k3 = ($keys1->arr[$_g2] ?? null);
						++$_g2;
						if ($k3 === null) {
							$_this7 = $__ctx->out;
							$_this7->b = ($_this7->b . chr(0));
						} else {
							$b2 = strlen($k3);
							$b3 = new Bytes($b2, new Container($k3));
							$v3 = $b3->length + 1;
							if (($v3 >= 0) && ($v3 < 128)) {
								$_this8 = $__ctx->out;
								$_this8->b = ($_this8->b . chr($v3));
							} else {
								$_this9 = $__ctx->out;
								$_this9->b = ($_this9->b . chr(128));
								$__ctx->out->addInt32($v3);
							}
							$_this10 = $__ctx->out;
							$_this10->b = ($_this10->b . $b3->b->s);
						}
						$v4 = ($v1->data[$k3] ?? null);
						if ($v4 === null) {
							$_this11 = $__ctx->out;
							$_this11->b = ($_this11->b . chr(0));
						} else {
							$b4 = strlen($v4);
							$b5 = new Bytes($b4, new Container($v4));
							$v5 = $b5->length + 1;
							if (($v5 >= 0) && ($v5 < 128)) {
								$_this12 = $__ctx->out;
								$_this12->b = ($_this12->b . chr($v5));
							} else {
								$_this13 = $__ctx->out;
								$_this13->b = ($_this13->b . chr(128));
								$__ctx->out->addInt32($v5);
							}
							$_this14 = $__ctx->out;
							$_this14->b = ($_this14->b . $b5->b->s);
						}
					}
				}
			}
		}
		#src/shared/DbData.hx:18: characters 6-52
		$a = $this->dataRows;
		if ($a === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$v = $a->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_g = 0;
			while ($_g < $a->length) {
				$v = ($a->arr[$_g] ?? null);
				++$_g;
				if ($v === null) {
					$_this = $__ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$_g1 = new \Array_hx();
					$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($v->data))));
					while ($k->hasNext()) {
						$k1 = $k->next();
						$_g1->arr[$_g1->length++] = $k1;
					}
					$keys = $_g1;
					$v1 = $keys->length + 1;
					if (($v1 >= 0) && ($v1 < 128)) {
						$_this1 = $__ctx->out;
						$_this1->b = ($_this1->b . chr($v1));
					} else {
						$_this2 = $__ctx->out;
						$_this2->b = ($_this2->b . chr(128));
						$__ctx->out->addInt32($v1);
					}
					$_g2 = 0;
					while ($_g2 < $keys->length) {
						$k2 = ($keys->arr[$_g2] ?? null);
						++$_g2;
						if ($k2 === null) {
							$_this3 = $__ctx->out;
							$_this3->b = ($_this3->b . chr(0));
						} else {
							$b = strlen($k2);
							$b1 = new Bytes($b, new Container($k2));
							$v2 = $b1->length + 1;
							if (($v2 >= 0) && ($v2 < 128)) {
								$_this4 = $__ctx->out;
								$_this4->b = ($_this4->b . chr($v2));
							} else {
								$_this5 = $__ctx->out;
								$_this5->b = ($_this5->b . chr(128));
								$__ctx->out->addInt32($v2);
							}
							$_this6 = $__ctx->out;
							$_this6->b = ($_this6->b . $b1->b->s);
						}
						$v3 = ($v->data[$k2] ?? null);
						if ($v3 === null) {
							$_this7 = $__ctx->out;
							$_this7->b = ($_this7->b . chr(0));
						} else {
							$b2 = strlen($v3);
							$b3 = new Bytes($b2, new Container($v3));
							$v4 = $b3->length + 1;
							if (($v4 >= 0) && ($v4 < 128)) {
								$_this8 = $__ctx->out;
								$_this8->b = ($_this8->b . chr($v4));
							} else {
								$_this9 = $__ctx->out;
								$_this9->b = ($_this9->b . chr(128));
								$__ctx->out->addInt32($v4);
							}
							$_this10 = $__ctx->out;
							$_this10->b = ($_this10->b . $b3->b->s);
						}
					}
				}
			}
		}
	}

	/**
	 * @param Serializer $__ctx
	 * 
	 * @return void
	 */
	public function unserialize ($__ctx) {
		#src/shared/DbData.hx:15: characters 6-47
		$k0 = null;
		$v0 = null;
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			$m = new StringMap();
			while (--$len > 0) {
				$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
				if ($v === 128) {
					$_this = $__ctx->input;
					$pos = $__ctx->inPos;
					$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
					$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
					$__ctx->inPos += 4;
				}
				$len1 = $v;
				if ($len1 === 0) {
					$k0 = null;
				} else {
					--$len1;
					$_this1 = $__ctx->input;
					$pos1 = $__ctx->inPos;
					$s = null;
					if (($pos1 < 0) || ($len1 < 0) || (($pos1 + $len1) > $_this1->length)) {
						throw Exception::thrown(Error::OutsideBounds());
					} else {
						$s = substr($_this1->b->s, $pos1, $len1);
					}
					$__ctx->inPos += $len1;
					$k0 = $s;
				}
				$k = $k0;
				$v2 = ord($__ctx->input->b->s[$__ctx->inPos++]);
				if ($v2 === 128) {
					$_this2 = $__ctx->input;
					$pos2 = $__ctx->inPos;
					$v3 = ord($_this2->b->s[$pos2]) | (ord($_this2->b->s[$pos2 + 1]) << 8) | (ord($_this2->b->s[$pos2 + 2]) << 16) | (ord($_this2->b->s[$pos2 + 3]) << 24);
					$v2 = (($v3 & ((int)-2147483648)) !== 0 ? $v3 | ((int)-2147483648) : $v3);
					$__ctx->inPos += 4;
				}
				$len2 = $v2;
				if ($len2 === 0) {
					$v0 = null;
				} else {
					--$len2;
					$_this3 = $__ctx->input;
					$pos3 = $__ctx->inPos;
					$s1 = null;
					if (($pos3 < 0) || ($len2 < 0) || (($pos3 + $len2) > $_this3->length)) {
						throw Exception::thrown(Error::OutsideBounds());
					} else {
						$s1 = substr($_this3->b->s, $pos3, $len2);
					}
					$__ctx->inPos += $len2;
					$v0 = $s1;
				}
				$v4 = $v0;
				$m->data[$k] = $v4;
			}
			$tmp = $m;
		}
		$this->dataErrors = $tmp;
		#src/shared/DbData.hx:16: characters 6-46
		$k0 = null;
		$v0 = null;
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			$m = new StringMap();
			while (--$len > 0) {
				$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
				if ($v === 128) {
					$_this = $__ctx->input;
					$pos = $__ctx->inPos;
					$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
					$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
					$__ctx->inPos += 4;
				}
				$len1 = $v;
				if ($len1 === 0) {
					$k0 = null;
				} else {
					--$len1;
					$_this1 = $__ctx->input;
					$pos1 = $__ctx->inPos;
					$s = null;
					if (($pos1 < 0) || ($len1 < 0) || (($pos1 + $len1) > $_this1->length)) {
						throw Exception::thrown(Error::OutsideBounds());
					} else {
						$s = substr($_this1->b->s, $pos1, $len1);
					}
					$__ctx->inPos += $len1;
					$k0 = $s;
				}
				$k = $k0;
				$v0 = $__ctx->getDynamic();
				$v2 = $v0;
				$m->data[$k] = $v2;
			}
			$tmp = $m;
		}
		$this->dataInfo = $tmp;
		#src/shared/DbData.hx:17: characters 6-59
		$k0 = null;
		$v0 = null;
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			$m = new StringMap();
			while (--$len > 0) {
				$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
				if ($v === 128) {
					$_this = $__ctx->input;
					$pos = $__ctx->inPos;
					$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
					$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
					$__ctx->inPos += 4;
				}
				$len1 = $v;
				if ($len1 === 0) {
					$k0 = null;
				} else {
					--$len1;
					$_this1 = $__ctx->input;
					$pos1 = $__ctx->inPos;
					$s = null;
					if (($pos1 < 0) || ($len1 < 0) || (($pos1 + $len1) > $_this1->length)) {
						throw Exception::thrown(Error::OutsideBounds());
					} else {
						$s = substr($_this1->b->s, $pos1, $len1);
					}
					$__ctx->inPos += $len1;
					$k0 = $s;
				}
				$k = $k0;
				$k1 = null;
				$v11 = null;
				$v2 = ord($__ctx->input->b->s[$__ctx->inPos++]);
				if ($v2 === 128) {
					$_this2 = $__ctx->input;
					$pos2 = $__ctx->inPos;
					$v3 = ord($_this2->b->s[$pos2]) | (ord($_this2->b->s[$pos2 + 1]) << 8) | (ord($_this2->b->s[$pos2 + 2]) << 16) | (ord($_this2->b->s[$pos2 + 3]) << 24);
					$v2 = (($v3 & ((int)-2147483648)) !== 0 ? $v3 | ((int)-2147483648) : $v3);
					$__ctx->inPos += 4;
				}
				$len2 = $v2;
				if ($len2 === 0) {
					$v0 = null;
				} else {
					$m1 = new StringMap();
					while (--$len2 > 0) {
						$v4 = ord($__ctx->input->b->s[$__ctx->inPos++]);
						if ($v4 === 128) {
							$_this3 = $__ctx->input;
							$pos3 = $__ctx->inPos;
							$v5 = ord($_this3->b->s[$pos3]) | (ord($_this3->b->s[$pos3 + 1]) << 8) | (ord($_this3->b->s[$pos3 + 2]) << 16) | (ord($_this3->b->s[$pos3 + 3]) << 24);
							$v4 = (($v5 & ((int)-2147483648)) !== 0 ? $v5 | ((int)-2147483648) : $v5);
							$__ctx->inPos += 4;
						}
						$len3 = $v4;
						if ($len3 === 0) {
							$k1 = null;
						} else {
							--$len3;
							$_this4 = $__ctx->input;
							$pos4 = $__ctx->inPos;
							$s1 = null;
							if (($pos4 < 0) || ($len3 < 0) || (($pos4 + $len3) > $_this4->length)) {
								throw Exception::thrown(Error::OutsideBounds());
							} else {
								$s1 = substr($_this4->b->s, $pos4, $len3);
							}
							$__ctx->inPos += $len3;
							$k1 = $s1;
						}
						$k2 = $k1;
						$v6 = ord($__ctx->input->b->s[$__ctx->inPos++]);
						if ($v6 === 128) {
							$_this5 = $__ctx->input;
							$pos5 = $__ctx->inPos;
							$v7 = ord($_this5->b->s[$pos5]) | (ord($_this5->b->s[$pos5 + 1]) << 8) | (ord($_this5->b->s[$pos5 + 2]) << 16) | (ord($_this5->b->s[$pos5 + 3]) << 24);
							$v6 = (($v7 & ((int)-2147483648)) !== 0 ? $v7 | ((int)-2147483648) : $v7);
							$__ctx->inPos += 4;
						}
						$len4 = $v6;
						if ($len4 === 0) {
							$v11 = null;
						} else {
							--$len4;
							$_this6 = $__ctx->input;
							$pos6 = $__ctx->inPos;
							$s2 = null;
							if (($pos6 < 0) || ($len4 < 0) || (($pos6 + $len4) > $_this6->length)) {
								throw Exception::thrown(Error::OutsideBounds());
							} else {
								$s2 = substr($_this6->b->s, $pos6, $len4);
							}
							$__ctx->inPos += $len4;
							$v11 = $s2;
						}
						$v8 = $v11;
						$m1->data[$k2] = $v8;
					}
					$v0 = $m1;
				}
				$v9 = $v0;
				$m->data[$k] = $v9;
			}
			$tmp = $m;
		}
		$this->dataParams = $tmp;
		#src/shared/DbData.hx:18: characters 6-52
		$e0 = null;
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$a = new \Array_hx();
			$_g = 0;
			$_g1 = $len;
			while ($_g < $_g1) {
				$i = $_g++;
				$k1 = null;
				$v1 = null;
				$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
				if ($v === 128) {
					$_this = $__ctx->input;
					$pos = $__ctx->inPos;
					$v2 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
					$v = (($v2 & ((int)-2147483648)) !== 0 ? $v2 | ((int)-2147483648) : $v2);
					$__ctx->inPos += 4;
				}
				$len = $v;
				if ($len === 0) {
					$e0 = null;
				} else {
					$m = new StringMap();
					while (--$len > 0) {
						$v3 = ord($__ctx->input->b->s[$__ctx->inPos++]);
						if ($v3 === 128) {
							$_this1 = $__ctx->input;
							$pos1 = $__ctx->inPos;
							$v4 = ord($_this1->b->s[$pos1]) | (ord($_this1->b->s[$pos1 + 1]) << 8) | (ord($_this1->b->s[$pos1 + 2]) << 16) | (ord($_this1->b->s[$pos1 + 3]) << 24);
							$v3 = (($v4 & ((int)-2147483648)) !== 0 ? $v4 | ((int)-2147483648) : $v4);
							$__ctx->inPos += 4;
						}
						$len1 = $v3;
						if ($len1 === 0) {
							$k1 = null;
						} else {
							--$len1;
							$_this2 = $__ctx->input;
							$pos2 = $__ctx->inPos;
							$s = null;
							if (($pos2 < 0) || ($len1 < 0) || (($pos2 + $len1) > $_this2->length)) {
								throw Exception::thrown(Error::OutsideBounds());
							} else {
								$s = substr($_this2->b->s, $pos2, $len1);
							}
							$__ctx->inPos += $len1;
							$k1 = $s;
						}
						$k = $k1;
						$v5 = ord($__ctx->input->b->s[$__ctx->inPos++]);
						if ($v5 === 128) {
							$_this3 = $__ctx->input;
							$pos3 = $__ctx->inPos;
							$v6 = ord($_this3->b->s[$pos3]) | (ord($_this3->b->s[$pos3 + 1]) << 8) | (ord($_this3->b->s[$pos3 + 2]) << 16) | (ord($_this3->b->s[$pos3 + 3]) << 24);
							$v5 = (($v6 & ((int)-2147483648)) !== 0 ? $v6 | ((int)-2147483648) : $v6);
							$__ctx->inPos += 4;
						}
						$len2 = $v5;
						if ($len2 === 0) {
							$v1 = null;
						} else {
							--$len2;
							$_this4 = $__ctx->input;
							$pos4 = $__ctx->inPos;
							$s1 = null;
							if (($pos4 < 0) || ($len2 < 0) || (($pos4 + $len2) > $_this4->length)) {
								throw Exception::thrown(Error::OutsideBounds());
							} else {
								$s1 = substr($_this4->b->s, $pos4, $len2);
							}
							$__ctx->inPos += $len2;
							$v1 = $s1;
						}
						$v7 = $v1;
						$m->data[$k] = $v7;
					}
					$e0 = $m;
				}
				$a->offsetSet($i, $e0);
			}
			$tmp = $a;
		}
		$this->dataRows = $tmp;
	}

	/**
	 * @return void
	 */
	public function unserializeInit () {
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$__clid = Serializer::registerClass(Boot::getClass(DbData::class));
	}
}

Boot::registerClass(DbData::class, 'shared.DbData');
DbData::__hx__init();
