{
	expr: ECall({
		expr: EField({
			expr: EField({
				expr: EConst(CIdent(react))
				pos: #pos
			}, React)
			pos: #pos
		}, createElement)
		pos: #pos
	}, [{
		expr: EField({
			expr: EConst(CIdent(react))
			pos: #pos
		}, Fragment)
		pos: #pos
	}, {
		expr: EBlock([])
		pos: #pos
	}, {
		expr: EParenthesis({
			expr: ECheckType({
				expr: EObjectDecl([{
					expr: {
						expr: EUntyped({
							expr: ECall({
								expr: EConst(CIdent(__js__))
								pos: #pos
							}, [{
								expr: EConst(CString($$tre, DoubleQuotes))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}
					field: $$typeof
					quotes: Quoted
				}, {
					expr: {
						expr: EParenthesis({
							expr: ECheckType({
								expr: EConst(CString(div, DoubleQuotes))
								pos: #pos
							}, TPath({
								name: ReactType
								pack: [react]
								params: []
								sub: null
							}))
							pos: #pos
						})
						pos: #pos
					}
					field: type
					quotes: null
				}, {
					expr: {
						expr: EObjectDecl([{
							expr: {
								expr: EConst(CString(tabNav2, DoubleQuotes))
								pos: #pos
							}
							field: className
							quotes: null
						}, {
							expr: {
								expr: EParenthesis({
									expr: ECheckType({
										expr: EParenthesis({
											expr: ECheckType({
												expr: ECall({
													expr: EField({
														expr: EField({
															expr: EConst(CIdent(react))
															pos: #pos
														}, React)
														pos: #pos
													}, createElement)
													pos: #pos
												}, [{
													expr: EConst(CIdent(Tabs))
													pos: #pos
												}, {
													expr: EObjectDecl([{
														expr: {
															expr: EMeta({
																name: :storedTypedExpr
																params: []
																pos: #pos
															}, {
																expr: EConst(CInt(1146))
																pos: #pos
															})
															pos: #pos
														}
														field: className
														quotes: null
													}])
													pos: #pos
												}, {
													expr: EParenthesis({
														expr: ECheckType({
															expr: EObjectDecl([{
																expr: {
																	expr: EUntyped({
																		expr: ECall({
																			expr: EConst(CIdent(__js__))
																			pos: #pos
																		}, [{
																			expr: EConst(CString($$tre, DoubleQuotes))
																			pos: #pos
																		}])
																		pos: #pos
																	})
																	pos: #pos
																}
																field: $$typeof
																quotes: Quoted
															}, {
																expr: {
																	expr: EParenthesis({
																		expr: ECheckType({
																			expr: EConst(CIdent(TabLink))
																			pos: #pos
																		}, TPath({
																			name: ReactType
																			pack: [react]
																			params: []
																			sub: null
																		}))
																		pos: #pos
																	})
																	pos: #pos
																}
																field: type
																quotes: null
															}, {
																expr: {
																	expr: ECall({
																		expr: EField({
																			expr: EParenthesis({
																				expr: EUntyped({
																					expr: EConst(CIdent(Object))
																					pos: #pos
																				})
																				pos: #pos
																			})
																			pos: #pos
																		}, assign)
																		pos: #pos
																	}, [{
																		expr: EBlock([])
																		pos: #pos
																	}, {
																		expr: EConst(CIdent(props))
																		pos: #pos
																	}, {
																		expr: EObjectDecl([{
																			expr: {
																				expr: EMeta({
																					name: :storedTypedExpr
																					params: []
																					pos: #pos
																				}, {
																					expr: EConst(CInt(1150))
																					pos: #pos
																				})
																				pos: #pos
																			}
																			field: to
																			quotes: null
																		}, {
																			expr: {
																				expr: EParenthesis({
																					expr: ECheckType({
																						expr: EConst(CString(Benutzer, DoubleQuotes))
																						pos: #pos
																					}, null <- expected enum value)
																					pos: #pos
																				})
																				pos: #pos
																			}
																			field: children
																			quotes: null
																		}])
																		pos: #pos
																	}])
																	pos: #pos
																}
																field: props
																quotes: null
															}, {
																expr: {
																	expr: EConst(CIdent(null))
																	pos: #pos
																}
																field: key
																quotes: null
															}, {
																expr: {
																	expr: EConst(CIdent(null))
																	pos: #pos
																}
																field: ref
																quotes: null
															}])
															pos: #pos
														}, TPath({
															name: ReactComponent
															pack: [react]
															params: []
															sub: ReactElement
														}))
														pos: #pos
													})
													pos: #pos
												}, {
													expr: EParenthesis({
														expr: ECheckType({
															expr: EObjectDecl([{
																expr: {
																	expr: EUntyped({
																		expr: ECall({
																			expr: EConst(CIdent(__js__))
																			pos: #pos
																		}, [{
																			expr: EConst(CString($$tre, DoubleQuotes))
																			pos: #pos
																		}])
																		pos: #pos
																	})
																	pos: #pos
																}
																field: $$typeof
																quotes: Quoted
															}, {
																expr: {
																	expr: EParenthesis({
																		expr: ECheckType({
																			expr: EConst(CIdent(TabLink))
																			pos: #pos
																		}, TPath({
																			name: ReactType
																			pack: [react]
																			params: []
																			sub: null
																		}))
																		pos: #pos
																	})
																	pos: #pos
																}
																field: type
																quotes: null
															}, {
																expr: {
																	expr: ECall({
																		expr: EField({
																			expr: EParenthesis({
																				expr: EUntyped({
																					expr: EConst(CIdent(Object))
																					pos: #pos
																				})
																				pos: #pos
																			})
																			pos: #pos
																		}, assign)
																		pos: #pos
																	}, [{
																		expr: EBlock([])
																		pos: #pos
																	}, {
																		expr: EConst(CIdent(props))
																		pos: #pos
																	}, {
																		expr: EObjectDecl([{
																			expr: {
																				expr: EMeta({
																					name: :storedTypedExpr
																					params: []
																					pos: #pos
																				}, {
																					expr: EConst(CInt(1152))
																					pos: #pos
																				})
																				pos: #pos
																			}
																			field: to
																			quotes: null
																		}, {
																			expr: {
																				expr: EParenthesis({
																					expr: ECheckType({
																						expr: EConst(CString(Meine Einstellungen, DoubleQuotes))
																						pos: #pos
																					}, null <- expected enum value)
																					pos: #pos
																				})
																				pos: #pos
																			}
																			field: children
																			quotes: null
																		}])
																		pos: #pos
																	}])
																	pos: #pos
																}
																field: props
																quotes: null
															}, {
																expr: {
																	expr: EConst(CIdent(null))
																	pos: #pos
																}
																field: key
																quotes: null
															}, {
																expr: {
																	expr: EConst(CIdent(null))
																	pos: #pos
																}
																field: ref
																quotes: null
															}])
															pos: #pos
														}, TPath({
															name: ReactComponent
															pack: [react]
															params: []
															sub: ReactElement
														}))
														pos: #pos
													})
													pos: #pos
												}, {
													expr: EParenthesis({
														expr: ECheckType({
															expr: EObjectDecl([{
																expr: {
																	expr: EUntyped({
																		expr: ECall({
																			expr: EConst(CIdent(__js__))
																			pos: #pos
																		}, [{
																			expr: EConst(CString($$tre, DoubleQuotes))
																			pos: #pos
																		}])
																		pos: #pos
																	})
																	pos: #pos
																}
																field: $$typeof
																quotes: Quoted
															}, {
																expr: {
																	expr: EParenthesis({
																		expr: ECheckType({
																			expr: EConst(CIdent(TabLink))
																			pos: #pos
																		}, TPath({
																			name: ReactType
																			pack: [react]
																			params: []
																			sub: null
																		}))
																		pos: #pos
																	})
																	pos: #pos
																}
																field: type
																quotes: null
															}, {
																expr: {
																	expr: ECall({
																		expr: EField({
																			expr: EParenthesis({
																				expr: EUntyped({
																					expr: EConst(CIdent(Object))
																					pos: #pos
																				})
																				pos: #pos
																			})
																			pos: #pos
																		}, assign)
																		pos: #pos
																	}, [{
																		expr: EBlock([])
																		pos: #pos
																	}, {
																		expr: EConst(CIdent(props))
																		pos: #pos
																	}, {
																		expr: EObjectDecl([{
																			expr: {
																				expr: EMeta({
																					name: :storedTypedExpr
																					params: []
																					pos: #pos
																				}, {
																					expr: EConst(CInt(1154))
																					pos: #pos
																				})
																				pos: #pos
																			}
																			field: to
																			quotes: null
																		}, {
																			expr: {
																				expr: EParenthesis({
																					expr: ECheckType({
																						expr: EConst(CString(Setup, DoubleQuotes))
																						pos: #pos
																					}, null <- expected enum value)
																					pos: #pos
																				})
																				pos: #pos
																			}
																			field: children
																			quotes: null
																		}])
																		pos: #pos
																	}])
																	pos: #pos
																}
																field: props
																quotes: null
															}, {
																expr: {
																	expr: EConst(CIdent(null))
																	pos: #pos
																}
																field: key
																quotes: null
															}, {
																expr: {
																	expr: EConst(CIdent(null))
																	pos: #pos
																}
																field: ref
																quotes: null
															}])
															pos: #pos
														}, TPath({
															name: ReactComponent
															pack: [react]
															params: []
															sub: ReactElement
														}))
														pos: #pos
													})
													pos: #pos
												}])
												pos: #pos
											}, TPath({
												name: ReactComponent
												pack: [react]
												params: []
												sub: ReactFragment
											}))
											pos: #pos
										})
										pos: #pos
									}, TPath({
										name: ReactComponent
										pack: [react]
										params: []
										sub: ReactFragment
									}))
									pos: #pos
								})
								pos: #pos
							}
							field: children
							quotes: null
						}])
						pos: #pos
					}
					field: props
					quotes: null
				}, {
					expr: {
						expr: EConst(CIdent(null))
						pos: #pos
					}
					field: key
					quotes: null
				}, {
					expr: {
						expr: EConst(CIdent(null))
						pos: #pos
					}
					field: ref
					quotes: null
				}])
				pos: #pos
			}, TPath({
				name: ReactComponent
				pack: [react]
				params: []
				sub: ReactElement
			}))
			pos: #pos
		})
		pos: #pos
	}, {
		expr: EParenthesis({
			expr: ECheckType({
				expr: EObjectDecl([{
					expr: {
						expr: EUntyped({
							expr: ECall({
								expr: EConst(CIdent(__js__))
								pos: #pos
							}, [{
								expr: EConst(CString($$tre, DoubleQuotes))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}
					field: $$typeof
					quotes: Quoted
				}, {
					expr: {
						expr: EParenthesis({
							expr: ECheckType({
								expr: EConst(CString(div, DoubleQuotes))
								pos: #pos
							}, TPath({
								name: ReactType
								pack: [react]
								params: []
								sub: null
							}))
							pos: #pos
						})
						pos: #pos
					}
					field: type
					quotes: null
				}, {
					expr: {
						expr: EObjectDecl([{
							expr: {
								expr: EConst(CString(tabContent2, DoubleQuotes))
								pos: #pos
							}
							field: className
							quotes: null
						}, {
							expr: {
								expr: EArrayDecl([{
									expr: EParenthesis({
										expr: ECheckType({
											expr: ECall({
												expr: EField({
													expr: EField({
														expr: EConst(CIdent(react))
														pos: #pos
													}, React)
													pos: #pos
												}, createElement)
												pos: #pos
											}, [{
												expr: EConst(CIdent(Route))
												pos: #pos
											}, {
												expr: ECall({
													expr: EField({
														expr: EParenthesis({
															expr: EUntyped({
																expr: EConst(CIdent(Object))
																pos: #pos
															})
															pos: #pos
														})
														pos: #pos
													}, assign)
													pos: #pos
												}, [{
													expr: EBlock([])
													pos: #pos
												}, {
													expr: EConst(CIdent(props))
													pos: #pos
												}, {
													expr: EObjectDecl([{
														expr: {
															expr: EMeta({
																name: :storedTypedExpr
																params: []
																pos: #pos
															}, {
																expr: EConst(CInt(1156))
																pos: #pos
															})
															pos: #pos
														}
														field: path
														quotes: null
													}, {
														expr: {
															expr: EMeta({
																name: :storedTypedExpr
																params: []
																pos: #pos
															}, {
																expr: EConst(CInt(1157))
																pos: #pos
															})
															pos: #pos
														}
														field: component
														quotes: null
													}])
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										}, TPath({
											name: ReactComponent
											pack: [react]
											params: []
											sub: ReactFragment
										}))
										pos: #pos
									})
									pos: #pos
								}, {
									expr: EParenthesis({
										expr: ECheckType({
											expr: ECall({
												expr: EField({
													expr: EField({
														expr: EConst(CIdent(react))
														pos: #pos
													}, React)
													pos: #pos
												}, createElement)
												pos: #pos
											}, [{
												expr: EConst(CIdent(Route))
												pos: #pos
											}, {
												expr: ECall({
													expr: EField({
														expr: EParenthesis({
															expr: EUntyped({
																expr: EConst(CIdent(Object))
																pos: #pos
															})
															pos: #pos
														})
														pos: #pos
													}, assign)
													pos: #pos
												}, [{
													expr: EBlock([])
													pos: #pos
												}, {
													expr: EConst(CIdent(props))
													pos: #pos
												}, {
													expr: EObjectDecl([{
														expr: {
															expr: EMeta({
																name: :storedTypedExpr
																params: []
																pos: #pos
															}, {
																expr: EConst(CInt(1159))
																pos: #pos
															})
															pos: #pos
														}
														field: path
														quotes: null
													}, {
														expr: {
															expr: EMeta({
																name: :storedTypedExpr
																params: []
																pos: #pos
															}, {
																expr: EConst(CInt(1160))
																pos: #pos
															})
															pos: #pos
														}
														field: component
														quotes: null
													}])
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										}, TPath({
											name: ReactComponent
											pack: [react]
											params: []
											sub: ReactFragment
										}))
										pos: #pos
									})
									pos: #pos
								}, {
									expr: EParenthesis({
										expr: ECheckType({
											expr: ECall({
												expr: EField({
													expr: EField({
														expr: EConst(CIdent(react))
														pos: #pos
													}, React)
													pos: #pos
												}, createElement)
												pos: #pos
											}, [{
												expr: EConst(CIdent(Route))
												pos: #pos
											}, {
												expr: ECall({
													expr: EField({
														expr: EParenthesis({
															expr: EUntyped({
																expr: EConst(CIdent(Object))
																pos: #pos
															})
															pos: #pos
														})
														pos: #pos
													}, assign)
													pos: #pos
												}, [{
													expr: EBlock([])
													pos: #pos
												}, {
													expr: EConst(CIdent(props))
													pos: #pos
												}, {
													expr: EObjectDecl([{
														expr: {
															expr: EMeta({
																name: :storedTypedExpr
																params: []
																pos: #pos
															}, {
																expr: EConst(CInt(1162))
																pos: #pos
															})
															pos: #pos
														}
														field: path
														quotes: null
													}, {
														expr: {
															expr: EMeta({
																name: :storedTypedExpr
																params: []
																pos: #pos
															}, {
																expr: EConst(CInt(1163))
																pos: #pos
															})
															pos: #pos
														}
														field: component
														quotes: null
													}])
													pos: #pos
												}])
												pos: #pos
											}])
											pos: #pos
										}, TPath({
											name: ReactComponent
											pack: [react]
											params: []
											sub: ReactFragment
										}))
										pos: #pos
									})
									pos: #pos
								}])
								pos: #pos
							}
							field: children
							quotes: null
						}])
						pos: #pos
					}
					field: props
					quotes: null
				}, {
					expr: {
						expr: EConst(CIdent(null))
						pos: #pos
					}
					field: key
					quotes: null
				}, {
					expr: {
						expr: EConst(CIdent(null))
						pos: #pos
					}
					field: ref
					quotes: null
				}])
				pos: #pos
			}, TPath({
				name: ReactComponent
				pack: [react]
				params: []
				sub: ReactElement
			}))
			pos: #pos
		})
		pos: #pos
	}, {
		expr: EParenthesis({
			expr: ECheckType({
				expr: EObjectDecl([{
					expr: {
						expr: EUntyped({
							expr: ECall({
								expr: EConst(CIdent(__js__))
								pos: #pos
							}, [{
								expr: EConst(CString($$tre, DoubleQuotes))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}
					field: $$typeof
					quotes: Quoted
				}, {
					expr: {
						expr: EParenthesis({
							expr: ECheckType({
								expr: EField({
									expr: EConst(CIdent(StatusBar))
									pos: #pos
								}, _renderWrapper)
								pos: #pos
							}, TPath({
								name: ReactType
								pack: [react]
								params: []
								sub: null
							}))
							pos: #pos
						})
						pos: #pos
					}
					field: type
					quotes: null
				}, {
					expr: {
						expr: EConst(CIdent(props))
						pos: #pos
					}
					field: props
					quotes: null
				}, {
					expr: {
						expr: EConst(CIdent(null))
						pos: #pos
					}
					field: key
					quotes: null
				}, {
					expr: {
						expr: EConst(CIdent(null))
						pos: #pos
					}
					field: ref
					quotes: null
				}])
				pos: #pos
			}, TPath({
				name: ReactComponent
				pack: [react]
				params: []
				sub: ReactElement
			}))
			pos: #pos
		})
		pos: #pos
	}])
	pos: #pos
}
line 179: expected enum value
line 296: expected enum value
line 413: expected enum value