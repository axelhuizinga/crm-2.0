<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /usr/share/haxe/std/haxe/crypto/Hmac.hx
 */

namespace haxe\crypto;

use \haxe\io\_BytesData\Container;
use \php\Boot;
use \haxe\io\BytesBuffer;
use \haxe\io\Bytes;

/**
 * Calculates a Hmac of the given Bytes using a HashMethod.
 */
class Hmac {
	/**
	 * @var int
	 */
	public $blockSize;
	/**
	 * @var int
	 */
	public $length;
	/**
	 * @var HashMethod
	 */
	public $method;

	/**
	 * @param HashMethod $hashMethod
	 * 
	 * @return void
	 */
	public function __construct ($hashMethod) {
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:43: characters 3-22
		$this->method = $hashMethod;
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:44: lines 44-46
		$this->blockSize = 64;
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:47: lines 47-51
		$tmp = null;
		$__hx__switch = ($hashMethod->index);
		if ($__hx__switch === 0) {
			$tmp = 16;
		} else if ($__hx__switch === 1) {
			$tmp = 20;
		} else if ($__hx__switch === 2) {
			$tmp = 32;
		}
		$this->length = $tmp;
	}

	/**
	 * @param Bytes $key
	 * @param Bytes $msg
	 * 
	 * @return Bytes
	 */
	public function make ($key, $msg) {
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:74: lines 74-76
		if ($key->length > $this->blockSize) {
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:75: characters 10-21
			$__hx__switch = ($this->method->index);
			if ($__hx__switch === 0) {
				$b = new Container(md5($key->b->s, true));
				$key = new Bytes(strlen($b->s), $b);
			} else if ($__hx__switch === 1) {
				$b = new Container(sha1($key->b->s, true));
				$key = new Bytes(strlen($b->s), $b);
			} else if ($__hx__switch === 2) {
				$key = Sha256::make($key);
			}
		}
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:77: characters 3-32
		$key = $this->nullPad($key, $this->blockSize);
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:79: characters 3-38
		$Ki = new BytesBuffer();
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:80: characters 3-38
		$Ko = new BytesBuffer();
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:81: characters 13-17
		$_g = 0;
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:81: characters 17-27
		$_g1 = $key->length;
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:81: lines 81-84
		while ($_g < $_g1) {
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:81: characters 13-27
			$i = $_g++;
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:82: characters 4-33
			$byte = ord($key->b->s[$i]) ^ 92;
			$Ko->b = ($Ko->b . chr($byte));
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:83: characters 4-33
			$byte1 = ord($key->b->s[$i]) ^ 54;
			$Ki->b = ($Ki->b . chr($byte1));
		}
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:86: characters 3-14
		$Ki->b = ($Ki->b . $msg->b->s);
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:87: characters 10-31
		$b = $Ki->getBytes();
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:87: characters 3-32
		$src = null;
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:87: characters 10-31
		$__hx__switch = ($this->method->index);
		if ($__hx__switch === 0) {
			$b1 = new Container(md5($b->b->s, true));
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:87: characters 3-32
			$src = new Bytes(strlen($b1->s), $b1);
		} else if ($__hx__switch === 1) {
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:87: characters 10-31
			$b1 = new Container(sha1($b->b->s, true));
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:87: characters 3-32
			$src = new Bytes(strlen($b1->s), $b1);
		} else if ($__hx__switch === 2) {
			$src = Sha256::make($b);
		}
		$Ko->b = ($Ko->b . $src->b->s);
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:88: characters 10-31
		$b = $Ko->getBytes();
		$__hx__switch = ($this->method->index);
		if ($__hx__switch === 0) {
			$b1 = new Container(md5($b->b->s, true));
			return new Bytes(strlen($b1->s), $b1);
		} else if ($__hx__switch === 1) {
			$b1 = new Container(sha1($b->b->s, true));
			return new Bytes(strlen($b1->s), $b1);
		} else if ($__hx__switch === 2) {
			return Sha256::make($b);
		}
	}

	/**
	 * @param Bytes $s
	 * @param int $chunkLen
	 * 
	 * @return Bytes
	 */
	public function nullPad ($s, $chunkLen) {
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:63: characters 3-44
		$r = $chunkLen - ($s->length % $chunkLen);
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:64: lines 64-65
		if (($r === $chunkLen) && ($s->length !== 0)) {
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:65: characters 4-12
			return $s;
		}
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:66: characters 3-38
		$sb = new BytesBuffer();
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:67: characters 3-12
		$sb->b = ($sb->b . $s->b->s);
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:68: characters 13-17
		$_g = 0;
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:68: characters 17-18
		$_g1 = $r;
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:68: lines 68-69
		while ($_g < $_g1) {
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:68: characters 13-18
			$x = $_g++;
			#/usr/share/haxe/std/haxe/crypto/Hmac.hx:69: characters 4-17
			$sb->b = ($sb->b . chr(0));
		}
		#/usr/share/haxe/std/haxe/crypto/Hmac.hx:70: characters 3-23
		return $sb->getBytes();
	}
}

Boot::registerClass(Hmac::class, 'haxe.crypto.Hmac');
