<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx
 */

namespace haxe\io;

use \haxe\io\_BytesData\Container;
use \haxe\_Int64\___Int64;
use \php\Boot;

class BytesBuffer {
	/**
	 * @var mixed
	 */
	public $b;

	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:34: characters 3-9
		$this->b = "";
	}

	/**
	 * @param int $v
	 * 
	 * @return void
	 */
	public function addInt32 ($v) {
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:50: characters 3-20
		$this->b = ($this->b . chr($v & 255));
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:51: characters 3-27
		$this->b = ($this->b . chr(($v >> 8) & 255));
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:52: characters 3-28
		$this->b = ($this->b . chr(($v >> 16) & 255));
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:53: characters 3-20
		$this->b = ($this->b . chr(Boot::shiftRightUnsigned($v, 24)));
	}

	/**
	 * @param ___Int64 $v
	 * 
	 * @return void
	 */
	public function addInt64 ($v) {
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:57: characters 3-18
		$this->addInt32($v->low);
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:58: characters 3-19
		$this->addInt32($v->high);
	}

	/**
	 * @return Bytes
	 */
	public function getBytes () {
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:78: characters 41-47
		$bytes = strlen($this->b);
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:78: characters 3-52
		$bytes1 = new Bytes($bytes, new Container($this->b));
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:79: characters 3-11
		$this->b = null;
		#/usr/share/haxe/std/php/_std/haxe/io/BytesBuffer.hx:80: characters 3-15
		return $bytes1;
	}
}

Boot::registerClass(BytesBuffer::class, 'haxe.io.BytesBuffer');
