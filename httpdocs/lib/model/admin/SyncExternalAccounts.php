<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: src/model/admin/SyncExternalAccounts.hx
 */

namespace model\admin;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \haxe\Log;
use \php\Lib;
use \haxe\ds\StringMap;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;

/**
 * ...
 * @author axel@bi4.me
 */
class SyncExternalAccounts extends \Model {
	/**
	 * @var \Array_hx
	 */
	static public $keys;

	/**
	 * @var int
	 */
	public $synced;

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param) {
		#src/model/admin/SyncExternalAccounts.hx:37: characters 3-15
		parent::__construct($param);
		#src/model/admin/SyncExternalAccounts.hx:38: lines 38-42
		if (array_key_exists("synced", $param->data)) {
			#src/model/admin/SyncExternalAccounts.hx:40: characters 4-33
			$this->synced = ($param->data["synced"] ?? null);
		} else {
			#src/model/admin/SyncExternalAccounts.hx:42: characters 8-18
			$this->synced = 0;
		}
		#src/model/admin/SyncExternalAccounts.hx:45: characters 10-16
		if ($this->action === "syncAll") {
			#src/model/admin/SyncExternalAccounts.hx:48: characters 5-14
			$this->syncAll();
		} else {
			#src/model/admin/SyncExternalAccounts.hx:50: characters 5-10
			$this->run();
		}
	}

	/**
	 * @return StringMap
	 */
	public function getMissing () {
		#src/model/admin/SyncExternalAccounts.hx:56: lines 56-60
		$sql = "\x0D\x0ASELECT MIN(pay_source_id)sstart, MAX(pay_source_id)send FROM \x0D\x0A(SELECT pay_source_id FROM clients cl \x0D\x0AINNER JOIN pay_source ps \x0D\x0AON ps.client_id = cl.client_id LIMIT " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null') . " OFFSET " . (\Std::parseInt(($this->param->data["offset"] ?? null))??'null') . ")ss";
		#src/model/admin/SyncExternalAccounts.hx:61: characters 2-7
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 61,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "getMissing",
		]));
		#src/model/admin/SyncExternalAccounts.hx:62: characters 9-54
		$stmt = \S::$syncDbh->query($sql);
		#src/model/admin/SyncExternalAccounts.hx:63: lines 63-67
		if ($stmt === false) {
			#src/model/admin/SyncExternalAccounts.hx:65: characters 4-9
			(Log::$trace)(\S::$syncDbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 65,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing",
			]));
			#src/model/admin/SyncExternalAccounts.hx:66: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalAccounts.hx:66: characters 25-69
			$_g = new StringMap();
			$value = \S::$syncDbh->errorInfo();
			$_g->data["getMissing query:"] = $value;
			#src/model/admin/SyncExternalAccounts.hx:66: characters 4-70
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 66,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:68: lines 68-71
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalAccounts.hx:70: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 70,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:72: characters 3-75
		$res = ($stmt->execute() ? $stmt->fetch(\PDO::FETCH_ASSOC) : null);
		#src/model/admin/SyncExternalAccounts.hx:74: characters 3-8
		(Log::$trace)(print_r($res,1), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 74,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "getMissing",
		]));
		#src/model/admin/SyncExternalAccounts.hx:75: characters 3-41
		return Lib::hashOfAssociativeArray($res);
	}

	/**
	 * @return string
	 */
	public function getMissing1st () {
		#src/model/admin/SyncExternalAccounts.hx:80: lines 80-83
		$sql = "\x0D\x0ASELECT DISTINCT(cl.client_id) FROM clients cl \x0D\x0AINNER JOIN pay_source ps \x0D\x0AON ps.client_id = cl.client_id;";
		#src/model/admin/SyncExternalAccounts.hx:84: characters 9-54
		$stmt = \S::$syncDbh->query($sql);
		#src/model/admin/SyncExternalAccounts.hx:85: lines 85-89
		if ($stmt === false) {
			#src/model/admin/SyncExternalAccounts.hx:87: characters 4-9
			(Log::$trace)(\S::$syncDbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 87,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
			#src/model/admin/SyncExternalAccounts.hx:88: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalAccounts.hx:88: characters 25-69
			$_g = new StringMap();
			$value = \S::$syncDbh->errorInfo();
			$_g->data["getMissing query:"] = $value;
			#src/model/admin/SyncExternalAccounts.hx:88: characters 4-70
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 88,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:90: lines 90-93
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalAccounts.hx:92: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 92,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:94: characters 3-76
		$res = ($stmt->execute() ? $stmt->fetchAll(\PDO::FETCH_NUM) : null);
		#src/model/admin/SyncExternalAccounts.hx:96: characters 3-8
		(Log::$trace)(count($res), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 96,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "getMissing1st",
		]));
		#src/model/admin/SyncExternalAccounts.hx:98: characters 3-84
		$cleared = \S::$dbh->exec("CREATE TEMP TABLE account_contact_ids(id BIGINT)");
		#src/model/admin/SyncExternalAccounts.hx:99: lines 99-104
		if (\S::$dbh->errorCode() !== "00000") {
			#src/model/admin/SyncExternalAccounts.hx:101: characters 4-9
			(Log::$trace)(\S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 101,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
		} else {
			#src/model/admin/SyncExternalAccounts.hx:104: characters 4-9
			(Log::$trace)("created temp table account_contact_ids", new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 104,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:105: characters 3-89
		$cIDs = array_map(function($r){return $r[0];}, $res);
		#src/model/admin/SyncExternalAccounts.hx:106: characters 3-8
		(Log::$trace)(print_r($cIDs[0],1), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 106,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "getMissing1st",
		]));
		#src/model/admin/SyncExternalAccounts.hx:107: characters 3-70
		$ok = \S::$dbh->pgsqlCopyFromArray("account_contact_ids", $cIDs);
		#src/model/admin/SyncExternalAccounts.hx:108: lines 108-111
		if (!$ok) {
			#src/model/admin/SyncExternalAccounts.hx:110: characters 4-9
			(Log::$trace)(\S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 110,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:112: lines 112-115
		if (\S::$dbh->errorCode() !== "00000") {
			#src/model/admin/SyncExternalAccounts.hx:114: characters 4-9
			(Log::$trace)(\S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 114,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:117: characters 3-34
		$sql = "\x0D\x0A" . "SELECT ARRAY_TO_STRING(array_agg(acid.id),',') from account_contact_ids acid\x0D\x0A" . "left join \x0D\x0A" . "(SELECT 1 as gg,id FROM accounts) c\x0D\x0A" . "ON acid.id=c.id\x0D\x0A" . "where c.id IS NULL\x0D\x0A" . "GROUP BY gg;\x0D\x0A" . "";
		#src/model/admin/SyncExternalAccounts.hx:125: characters 3-26
		$stmt = \S::$dbh->query($sql);
		#src/model/admin/SyncExternalAccounts.hx:126: lines 126-130
		if ($stmt === false) {
			#src/model/admin/SyncExternalAccounts.hx:128: characters 4-9
			(Log::$trace)("" . ($sql??'null') . " " . (\Std::parseInt((\S::$dbQuery->dbParams->data["limit"] ?? null))??'null'), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 128,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
			#src/model/admin/SyncExternalAccounts.hx:129: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalAccounts.hx:129: characters 25-72
			$_g = new StringMap();
			$value = \S::$syncDbh->errorInfo();
			$_g->data["getMissingIDs query:"] = $value;
			#src/model/admin/SyncExternalAccounts.hx:129: characters 4-73
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 129,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:131: lines 131-134
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalAccounts.hx:133: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 133,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "getMissing1st",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:135: characters 3-73
		$ids = ($stmt->execute() ? $stmt->fetch(\PDO::FETCH_COLUMN, 0) : null);
		#src/model/admin/SyncExternalAccounts.hx:137: characters 3-13
		return $ids;
	}

	/**
	 * I kno	 * Import or Update accounts
	 * 
	 * @return void
	 */
	public function syncAll () {
		#src/model/admin/SyncExternalAccounts.hx:145: characters 3-8
		(Log::$trace)(($this->param === null ? "null" : $this->param->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 145,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:146: lines 146-147
		if (($this->param->data["offset"] ?? null) === null) {
			#src/model/admin/SyncExternalAccounts.hx:147: characters 4-25
			$this->param->data["offset"] = "0";
		}
		#src/model/admin/SyncExternalAccounts.hx:148: lines 148-149
		if (($this->param->data["limit"] ?? null) === null) {
			#src/model/admin/SyncExternalAccounts.hx:149: characters 4-27
			$this->param->data["limit"] = "1000";
		}
		#src/model/admin/SyncExternalAccounts.hx:150: lines 150-153
		if ((\Std::parseInt(($this->param->data["offset"] ?? null)) + \Std::parseInt(($this->param->data["limit"] ?? null))) > \Std::parseInt(($this->param->data["maxImport"] ?? null))) {
			#src/model/admin/SyncExternalAccounts.hx:152: characters 4-97
			$this1 = $this->param;
			$v = \Std::string(\Std::parseInt(($this->param->data["maxImport"] ?? null)) - \Std::parseInt(($this->param->data["offset"] ?? null)));
			$this1->data["limit"] = $v;
		}
		#src/model/admin/SyncExternalAccounts.hx:154: characters 3-8
		(Log::$trace)(($this->param === null ? "null" : $this->param->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 154,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:155: characters 3-42
		$ids = $this->getMissing();
		#src/model/admin/SyncExternalAccounts.hx:157: lines 157-163
		$sql = "\x0D\x0A" . "SELECT id, contact, account_holder,bank_name,account,blz bic,blz,iban,sign_date, status,IF(pcd LIKE '0000%', creation_date, pcd)creation_date, 100 edited_by FROM \x0D\x0A" . "(SELECT pay_source_id id, ps.client_id contact,debtor account_holder,bank_name,account,blz bic,blz,iban,sign_date,pay_source_state status,cl.creation_date, ps.creation_date pcd, 100 edited_by FROM pay_source ps\x0D\x0A" . "INNER JOIN clients cl ON cl.client_id=ps.client_id\x0D\x0A" . ("WHERE pay_source_id BETWEEN " . (($ids->data["sstart"] ?? null)??'null') . " AND " . (($ids->data["send"] ?? null)??'null') . "\x0D\x0A") . "ORDER BY cl.client_id ) sj\x0D\x0A" . "";
		#src/model/admin/SyncExternalAccounts.hx:164: characters 2-7
		(Log::$trace)("" . ($sql??'null') . " " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null') . " OFFSET " . (\Std::parseInt(($this->param->data["offset"] ?? null))??'null'), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 164,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:165: characters 3-48
		$stmt = \S::$syncDbh->query($sql);
		#src/model/admin/SyncExternalAccounts.hx:166: characters 3-8
		(Log::$trace)("loading  " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null') . " OFFSET " . (\Std::parseInt(($this->param->data["offset"] ?? null))??'null'), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 166,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:167: lines 167-171
		if ($stmt === false) {
			#src/model/admin/SyncExternalAccounts.hx:169: characters 4-9
			(Log::$trace)($sql, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 169,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "syncAll",
			]));
			#src/model/admin/SyncExternalAccounts.hx:170: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalAccounts.hx:170: characters 25-76
			$_g = new StringMap();
			$value = \S::$syncDbh->errorInfo();
			$_g->data["getMissingAccounts data:"] = $value;
			#src/model/admin/SyncExternalAccounts.hx:170: characters 4-77
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 170,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "syncAll",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:172: lines 172-175
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalAccounts.hx:174: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalAccounts.hx:174: characters 24-69
			$_g = new StringMap();
			$value = $stmt->errorInfo();
			$_g->data["getMissingAccounts data"] = $value;
			#src/model/admin/SyncExternalAccounts.hx:174: characters 4-70
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 174,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "syncAll",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:176: characters 3-78
		$res = ($stmt->execute() ? $stmt->fetchAll(\PDO::FETCH_ASSOC) : null);
		#src/model/admin/SyncExternalAccounts.hx:177: characters 3-47
		$got = count($res);
		#src/model/admin/SyncExternalAccounts.hx:178: characters 3-8
		(Log::$trace)((mb_substr($sql, 0, 180)??'null') . "::" . ($got??'null'), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 178,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:179: characters 3-83
		$cD = \Util::map2fields($res[0], \Array_hx::wrap(array_keys($res[0])));
		#src/model/admin/SyncExternalAccounts.hx:180: characters 3-8
		(Log::$trace)(($cD === null ? "null" : $cD->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 180,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:181: lines 181-182
		if (($cD->data["creation_date"] ?? null) === "null") {
			#src/model/admin/SyncExternalAccounts.hx:182: characters 4-30
			$cD->remove("creation_date");
		}
		#src/model/admin/SyncExternalAccounts.hx:185: characters 30-53
		$_g = new \Array_hx();
		#src/model/admin/SyncExternalAccounts.hx:185: characters 40-49
		$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($cD->data))));
		while ($k->hasNext()) {
			#src/model/admin/SyncExternalAccounts.hx:185: characters 31-52
			$k1 = $k->next();
			#src/model/admin/SyncExternalAccounts.hx:185: characters 51-52
			$_g->arr[$_g->length++] = $k1;
		}
		#src/model/admin/SyncExternalAccounts.hx:185: characters 3-54
		$cNames = $_g;
		#src/model/admin/SyncExternalAccounts.hx:186: characters 3-8
		(Log::$trace)($cNames, new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 186,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:187: characters 14-28
		$data = array_values($res);
		$_g1_current = 0;
		$_g1_length = count($data);
		$_g1_data = $data;
		#src/model/admin/SyncExternalAccounts.hx:187: lines 187-204
		while ($_g1_current < $_g1_length) {
			$row = $_g1_data[$_g1_current++];
			#src/model/admin/SyncExternalAccounts.hx:191: characters 4-59
			$stmt = $this->upsertAccount($row, $cD, $cNames);
			#src/model/admin/SyncExternalAccounts.hx:192: lines 192-203
			try {
				#src/model/admin/SyncExternalAccounts.hx:193: characters 5-58
				$res = $stmt->fetchAll(\PDO::FETCH_ASSOC);
			} catch(\Throwable $_g) {
				$e = Exception::caught($_g)->unwrap();
				#src/model/admin/SyncExternalAccounts.hx:198: characters 19-25
				$tmp = $this->dbData;
				#src/model/admin/SyncExternalAccounts.hx:198: lines 198-202
				$_g1 = new StringMap();
				$value = \S::$dbh->errorInfo();
				$_g1->data["dbError"] = $value;
				$value1 = \S::errorInfo($row, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalAccounts.hx",
					"lineNumber" => 200,
					"className" => "model.admin.SyncExternalAccounts",
					"methodName" => "syncAll",
				]));
				$_g1->data["upsertClient"] = $value1;
				$_g1->data["exception"] = $e;
				\S::sendErrors($tmp, $_g1, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalAccounts.hx",
					"lineNumber" => 198,
					"className" => "model.admin.SyncExternalAccounts",
					"methodName" => "syncAll",
				]));
			}
		}
		#src/model/admin/SyncExternalAccounts.hx:205: characters 3-8
		(Log::$trace)("synced: " . ($this->synced??'null'), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 205,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:206: characters 3-55
		$this1 = $this->dbData->dataInfo;
		$v = ($this->param->data["offset"] ?? null) + $this->synced;
		$this1->data["offset"] = $v;
		#src/model/admin/SyncExternalAccounts.hx:207: characters 3-8
		(Log::$trace)(($this->dbData->dataInfo === null ? "null" : $this->dbData->dataInfo->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 207,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:208: characters 3-27
		\S::sendData($this->dbData, null);
		#src/model/admin/SyncExternalAccounts.hx:212: characters 16-22
		$tmp = $this->dbData;
		#src/model/admin/SyncExternalAccounts.hx:212: characters 23-48
		$_g = new StringMap();
		$_g->data["syncAccounts"] = "NOTOK";
		#src/model/admin/SyncExternalAccounts.hx:212: characters 3-49
		\S::sendErrors($tmp, $_g, new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 212,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalAccounts.hx:213: characters 14-20
		$tmp = $this->dbData;
		#src/model/admin/SyncExternalAccounts.hx:213: characters 21-56
		$_g = new StringMap();
		$_g->data["syncUserDetail"] = "no results???";
		#src/model/admin/SyncExternalAccounts.hx:213: characters 3-57
		\S::sendInfo($tmp, $_g);
	}

	/**
	 * @return void
	 */
	public function syncBankTransferRequests () {
		#src/model/admin/SyncExternalAccounts.hx:218: characters 3-127
		$res = $this->fetchAll("SELECT * FROM `buchungs_anforderungen`", \S::$syncDbh, "syncBankTransferRequests", \PDO::FETCH_NUM, new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 218,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncBankTransferRequests",
		]));
		#src/model/admin/SyncExternalAccounts.hx:219: characters 3-8
		(Log::$trace)($res, new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 219,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncBankTransferRequests",
		]));
		#src/model/admin/SyncExternalAccounts.hx:220: lines 220-228
		if ($res !== null) {
			#src/model/admin/SyncExternalAccounts.hx:223: characters 4-24
			$updated = 0;
			#src/model/admin/SyncExternalAccounts.hx:224: characters 15-21
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalAccounts.hx:224: characters 22-57
			$_g = new StringMap();
			$_g->data["syncUserDetail"] = "DONE " . ($updated??'null');
			#src/model/admin/SyncExternalAccounts.hx:224: characters 4-58
			\S::sendInfo($tmp, $_g);
		} else {
			#src/model/admin/SyncExternalAccounts.hx:228: characters 15-21
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalAccounts.hx:228: characters 22-57
			$_g = new StringMap();
			$_g->data["syncUserDetail"] = "no results???";
			#src/model/admin/SyncExternalAccounts.hx:228: characters 4-58
			\S::sendInfo($tmp, $_g);
		}
		#src/model/admin/SyncExternalAccounts.hx:229: characters 3-8
		(Log::$trace)("done", new HxAnon([
			"fileName" => "src/model/admin/SyncExternalAccounts.hx",
			"lineNumber" => 229,
			"className" => "model.admin.SyncExternalAccounts",
			"methodName" => "syncBankTransferRequests",
		]));
	}

	/**
	 * @param mixed $rD
	 * @param StringMap $cD
	 * @param \Array_hx $cNames
	 * 
	 * @return \PDOStatement
	 */
	public function upsertAccount ($rD, $cD, $cNames) {
		#src/model/admin/SyncExternalAccounts.hx:269: characters 38-58
		$_g = new \Array_hx();
		#src/model/admin/SyncExternalAccounts.hx:269: characters 39-57
		$_g1 = 0;
		while ($_g1 < $cNames->length) {
			#src/model/admin/SyncExternalAccounts.hx:269: characters 43-44
			$k = ($cNames->arr[$_g1] ?? null);
			#src/model/admin/SyncExternalAccounts.hx:269: characters 39-57
			++$_g1;
			#src/model/admin/SyncExternalAccounts.hx:269: characters 56-57
			$_g->arr[$_g->length++] = $k;
		}
		#src/model/admin/SyncExternalAccounts.hx:269: characters 38-89
		$result = [];
		$data = $_g->arr;
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = (":" . ($item??'null'));
		}
		#src/model/admin/SyncExternalAccounts.hx:269: characters 3-90
		$cPlaceholders = \Array_hx::wrap($result);
		#src/model/admin/SyncExternalAccounts.hx:270: lines 270-272
		$_g = new \Array_hx();
		#src/model/admin/SyncExternalAccounts.hx:271: characters 4-22
		$_g1 = 0;
		while ($_g1 < $cNames->length) {
			#src/model/admin/SyncExternalAccounts.hx:271: characters 8-9
			$k = ($cNames->arr[$_g1] ?? null);
			#src/model/admin/SyncExternalAccounts.hx:271: characters 4-22
			++$_g1;
			#src/model/admin/SyncExternalAccounts.hx:271: characters 21-22
			$_g->arr[$_g->length++] = $k;
		}
		#src/model/admin/SyncExternalAccounts.hx:270: lines 270-275
		$result = [];
		$data = $_g->arr;
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = ($item === "merged" ? "\"" . ($item??'null') . "\"=:IF(array_length(\"merged\",1)>0 THEN \"merged\" ELSE " . ($item??'null') . ")" : " \"" . ($item??'null') . "\"=:" . ($item??'null'));
		}
		$cSet = \Array_hx::wrap($result)->join(",");
		#src/model/admin/SyncExternalAccounts.hx:277: lines 277-282
		$sql = "\x0D\x0A" . ("INSERT INTO accounts (" . ($cNames->join(",")??'null') . ")\x0D\x0A") . ("VALUES (" . ($cPlaceholders->join(",")??'null') . ")\x0D\x0A") . "ON CONFLICT (id) DO UPDATE\x0D\x0A" . ("SET " . ($cSet??'null') . " returning id;\x09\x0D\x0A") . "";
		#src/model/admin/SyncExternalAccounts.hx:286: characters 3-65
		$stmt = \S::$dbh->prepare($sql, ((array)(null)));
		#src/model/admin/SyncExternalAccounts.hx:287: characters 3-49
		\Util::bindClientData("accounts", $stmt, $rD, $this->dbData);
		#src/model/admin/SyncExternalAccounts.hx:288: lines 288-294
		if (!$stmt->execute()) {
			#src/model/admin/SyncExternalAccounts.hx:289: characters 4-9
			(Log::$trace)($rD, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 289,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "upsertAccount",
			]));
			#src/model/admin/SyncExternalAccounts.hx:290: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 290,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "upsertAccount",
			]));
			#src/model/admin/SyncExternalAccounts.hx:291: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalAccounts.hx:291: lines 291-293
			$_g = new StringMap();
			$value = Lib::hashOfAssociativeArray($stmt->errorInfo());
			$_g->data["execute"] = $value;
			$_g->data["sql"] = $sql;
			$value = \Std::string($rD['id']);
			$_g->data["id"] = $value;
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalAccounts.hx",
				"lineNumber" => 291,
				"className" => "model.admin.SyncExternalAccounts",
				"methodName" => "upsertAccount",
			]));
		}
		#src/model/admin/SyncExternalAccounts.hx:297: characters 3-11
		$this->synced++;
		#src/model/admin/SyncExternalAccounts.hx:298: characters 3-14
		return $stmt;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$keys = \S::tableFields("accounts");
	}
}

Boot::registerClass(SyncExternalAccounts::class, 'model.admin.SyncExternalAccounts');
SyncExternalAccounts::__hx__init();
