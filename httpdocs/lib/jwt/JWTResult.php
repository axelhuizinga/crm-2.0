<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /opt/src/crm-2.0/server/.haxelib/jwt/1,3,0/src/jwt/JWT.hx
 */

namespace jwt;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * The result of a call to JWT.verify.
 * If the token is valid and the signatures match, it contains the payload.
 */
class JWTResult extends HxEnum {
	/**
	 * The signature was invalid
	 * 
	 * @param mixed $payload
	 * 
	 * @return JWTResult
	 */
	static public function Invalid ($payload) {
		return new JWTResult('Invalid', 1, [$payload]);
	}

	/**
	 *  The token was malformed
	 * 
	 * @return JWTResult
	 */
	static public function Malformed () {
		static $inst = null;
		if (!$inst) $inst = new JWTResult('Malformed', 2, []);
		return $inst;
	}

	/**
	 * The token signature is valid, included is the payload
	 * 
	 * @param mixed $payload
	 * 
	 * @return JWTResult
	 */
	static public function Valid ($payload) {
		return new JWTResult('Valid', 0, [$payload]);
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			1 => 'Invalid',
			2 => 'Malformed',
			0 => 'Valid',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'Invalid' => 1,
			'Malformed' => 0,
			'Valid' => 1,
		];
	}
}

Boot::registerClass(JWTResult::class, 'jwt.JWTResult');
