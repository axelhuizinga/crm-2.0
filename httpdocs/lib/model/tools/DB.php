<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: src/model/tools/DB.hx
 */

namespace model\tools;

use \haxe\io\_BytesData\Container;
use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Log;
use \shared\DbData;
use \php\_Boot\HxString;
use \haxe\ds\StringMap;
use \haxe\io\Bytes;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \hxbit\Serializer;

/**
 * ...
 * @author axel@bi4.me
 */
class DB extends \Model {
	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public static function _create ($param) {
		#src/model/tools/DB.hx:23: characters 3-31
		$self = new DB($param);
		#src/model/tools/DB.hx:25: characters 3-13
		$self->run();
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		#src/model/tools/DB.hx:19: lines 19-135
		parent::__construct($param);
	}

	/**
	 * @return StringMap
	 */
	public function buildFieldList () {
		#src/model/tools/DB.hx:30: characters 3-45
		$tableNames = \S::tables();
		#src/model/tools/DB.hx:31: characters 3-50
		$tableFields = new StringMap();
		#src/model/tools/DB.hx:33: lines 33-38
		$_g = 0;
		while ($_g < $tableNames->length) {
			#src/model/tools/DB.hx:33: characters 8-13
			$table = ($tableNames->arr[$_g] ?? null);
			#src/model/tools/DB.hx:33: lines 33-38
			++$_g;
			#src/model/tools/DB.hx:35: characters 4-42
			$fieldNames = \S::tableFields($table);
			#src/model/tools/DB.hx:36: characters 4-9
			(Log::$trace)($fieldNames->join(","), new HxAnon([
				"fileName" => "src/model/tools/DB.hx",
				"lineNumber" => 36,
				"className" => "model.tools.DB",
				"methodName" => "buildFieldList",
			]));
			#src/model/tools/DB.hx:37: characters 4-45
			$v = $fieldNames->join(",");
			$tableFields->data[$table] = $v;
		}
		#src/model/tools/DB.hx:39: characters 3-21
		return $tableFields;
	}

	/**
	 * @return void
	 */
	public function createFieldList () {
		#src/model/tools/DB.hx:44: characters 3-57
		$tableFields = $this->buildFieldList();
		#src/model/tools/DB.hx:45: characters 3-8
		(Log::$trace)(($tableFields === null ? "null" : $tableFields->toString()), new HxAnon([
			"fileName" => "src/model/tools/DB.hx",
			"lineNumber" => 45,
			"className" => "model.tools.DB",
			"methodName" => "createFieldList",
		]));
		#src/model/tools/DB.hx:46: lines 46-49
		if (($this->param->data["update"] ?? null) === "1") {
			#src/model/tools/DB.hx:48: characters 4-34
			$this->updateFieldsTable($tableFields);
		}
		#src/model/tools/DB.hx:50: characters 3-68
		$filter = "";
		#src/model/tools/DB.hx:52: lines 52-56
		$sql = "\x0D\x0A" . "SELECT id,table_name,field_name,readonly,element,\"any\",required,use_as_index FROM table_fields \x0D\x0A" . ("" . ($filter??'null') . " \x0D\x0A") . "ORDER BY table_name,field_name\x0D\x0A" . "";
		#src/model/tools/DB.hx:57: characters 3-8
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "src/model/tools/DB.hx",
			"lineNumber" => 57,
			"className" => "model.tools.DB",
			"methodName" => "createFieldList",
		]));
		#src/model/tools/DB.hx:58: characters 3-61
		$stmt = \S::$dbh->query($sql, \PDO::FETCH_ASSOC);
		#src/model/tools/DB.hx:59: lines 59-63
		if ($stmt === false) {
			#src/model/tools/DB.hx:61: characters 4-9
			(Log::$trace)(\S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/tools/DB.hx",
				"lineNumber" => 61,
				"className" => "model.tools.DB",
				"methodName" => "createFieldList",
			]));
		}
		#src/model/tools/DB.hx:64: characters 3-64
		$tableFields = $stmt->fetchAll(\PDO::FETCH_ASSOC);
		#src/model/tools/DB.hx:65: characters 3-8
		(Log::$trace)("tableFields found: " . ($stmt->rowCount()??'null'), new HxAnon([
			"fileName" => "src/model/tools/DB.hx",
			"lineNumber" => 65,
			"className" => "model.tools.DB",
			"methodName" => "createFieldList",
		]));
		#src/model/tools/DB.hx:66: characters 2-7
		(Log::$trace)(($tableFields[0]["id"]??'null') . "<<<", new HxAnon([
			"fileName" => "src/model/tools/DB.hx",
			"lineNumber" => 66,
			"className" => "model.tools.DB",
			"methodName" => "createFieldList",
		]));
		#src/model/tools/DB.hx:67: characters 3-24
		$this->sendRows($tableFields);
	}

	/**
	 * @return void
	 */
	public function saveTableFields () {
		#src/model/tools/DB.hx:109: characters 22-57
		$s = ($this->param->data["dbData"] ?? null);
		$dBytes = strlen($s);
		#src/model/tools/DB.hx:109: characters 3-58
		$dBytes1 = new Bytes($dBytes, new Container($s));
		#src/model/tools/DB.hx:110: characters 3-39
		$s = new Serializer();
		#src/model/tools/DB.hx:111: characters 3-52
		$pData = $s->unserialize($dBytes1, Boot::getClass(DbData::class));
		#src/model/tools/DB.hx:112: characters 3-8
		(Log::$trace)(($pData->dataParams === null ? "null" : $pData->dataParams->toString()), new HxAnon([
			"fileName" => "src/model/tools/DB.hx",
			"lineNumber" => 112,
			"className" => "model.tools.DB",
			"methodName" => "saveTableFields",
		]));
		#src/model/tools/DB.hx:113: characters 3-23
		$updated = 0;
		#src/model/tools/DB.hx:114: characters 13-36
		$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($pData->dataParams->data))));
		while ($k->hasNext()) {
			#src/model/tools/DB.hx:114: lines 114-132
			$k1 = $k->next();
			#src/model/tools/DB.hx:117: characters 4-72
			$fields = \S::$dbh->quote(($this->param->data["fields"] ?? null), \PDO::PARAM_STR);
			#src/model/tools/DB.hx:119: lines 119-121
			$sql = "\x0D\x0A" . ("UPDATE crm.table_fields SET " . ($fields??'null') . " WHERE id=" . (\Std::parseInt($k1)??'null') . "\x0D\x0A") . "";
			#src/model/tools/DB.hx:123: characters 4-71
			$stmt = \S::$dbh->prepare($sql, \Util::initNativeArray());
			#src/model/tools/DB.hx:124: lines 124-127
			if (!\Model::paramExecute($stmt, ($pData->dataParams->data[$k1] ?? null)->data)) {
				#src/model/tools/DB.hx:126: characters 18-24
				$tmp = $this->dbData;
				#src/model/tools/DB.hx:126: characters 25-58
				$_g = new StringMap();
				$key = "" . ($this->action??'null');
				$value = $stmt->errorInfo();
				$_g->data[$key] = $value;
				#src/model/tools/DB.hx:126: characters 5-59
				\S::sendErrors($tmp, $_g, new HxAnon([
					"fileName" => "src/model/tools/DB.hx",
					"lineNumber" => 126,
					"className" => "model.tools.DB",
					"methodName" => "saveTableFields",
				]));
			}
			#src/model/tools/DB.hx:128: lines 128-131
			if ($stmt->rowCount() === 1) {
				#src/model/tools/DB.hx:130: characters 5-14
				++$updated;
			}
		}
		#src/model/tools/DB.hx:133: characters 14-20
		$tmp = $this->dbData;
		#src/model/tools/DB.hx:133: characters 22-75
		$_g = new StringMap();
		$_g->data["saveTableFields"] = "OK";
		$_g->data["updatedRows"] = $updated;
		#src/model/tools/DB.hx:133: characters 3-76
		\S::sendInfo($tmp, $_g);
	}

	/**
	 * @param StringMap $tableFields
	 * 
	 * @return void
	 */
	public function updateFieldsTable ($tableFields) {
		#src/model/tools/DB.hx:72: characters 3-56
		$tableNames = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($tableFields->data))));
		#src/model/tools/DB.hx:73: lines 73-104
		while ($tableNames->hasNext()) {
			#src/model/tools/DB.hx:75: characters 4-45
			$tableName = $tableNames->next();
			#src/model/tools/DB.hx:76: characters 4-51
			$fieldNames = ($tableFields->data[$tableName] ?? null);
			#src/model/tools/DB.hx:77: characters 4-53
			$fields = HxString::split($fieldNames, ",");
			#src/model/tools/DB.hx:78: lines 78-83
			$result = [];
			$data = $fields->arr;
			$_g_current = 0;
			$_g_length = count($data);
			$_g_data = $data;
			while ($_g_current < $_g_length) {
				$item = $_g_data[$_g_current++];
				#src/model/tools/DB.hx:79: lines 79-81
				$s = "\x0D\x0A" . ("'" . ($item??'null') . "','{}'::jsonb\x0D\x0A") . "";
				#src/model/tools/DB.hx:78: lines 78-83
				$result[] = $s;
			}
			$sqlFields = \Array_hx::wrap($result);
			#src/model/tools/DB.hx:84: characters 4-40
			$fieldsSql = $sqlFields->join(",");
			#src/model/tools/DB.hx:85: lines 85-88
			$sql = "\x0D\x0A" . ("INSERT INTO crm.table_fields VALUES (DEFAULT, '" . ($tableName??'null') . "','{" . ($fieldNames??'null') . "}', jsonb_build_object(" . ($fieldsSql??'null') . "), 1)\x0D\x0A") . ("ON CONFLICT (table_name) DO UPDATE SET field_names='{" . ($fieldNames??'null') . "}', field_hints=jsonb_build_object(" . ($fieldsSql??'null') . ")\x0D\x0A") . "";
			#src/model/tools/DB.hx:89: lines 89-103
			$_g = 0;
			while ($_g < $fields->length) {
				#src/model/tools/DB.hx:89: characters 9-14
				$field = ($fields->arr[$_g] ?? null);
				#src/model/tools/DB.hx:89: lines 89-103
				++$_g;
				#src/model/tools/DB.hx:91: characters 5-8
				$sql = "\x0D\x0A" . ("INSERT INTO crm.table_fields VALUES (DEFAULT, '" . ($tableName??'null') . "','" . ($field??'null') . "', jsonb_build_object(" . ($fieldsSql??'null') . "), 1)\x0D\x0A") . ("ON CONFLICT (table_name) DO UPDATE SET field_names='{" . ($fieldNames??'null') . "}', field_hints=jsonb_build_object(" . ($fieldsSql??'null') . ")\x0D\x0A") . "";
				#src/model/tools/DB.hx:95: characters 5-10
				(Log::$trace)($sql, new HxAnon([
					"fileName" => "src/model/tools/DB.hx",
					"lineNumber" => 95,
					"className" => "model.tools.DB",
					"methodName" => "updateFieldsTable",
				]));
				#src/model/tools/DB.hx:96: characters 5-45
				$res = \S::$dbh->query($sql);
				#src/model/tools/DB.hx:97: lines 97-101
				if ($res === false) {
					#src/model/tools/DB.hx:99: characters 6-11
					(Log::$trace)(\S::$dbh->errorInfo(), new HxAnon([
						"fileName" => "src/model/tools/DB.hx",
						"lineNumber" => 99,
						"className" => "model.tools.DB",
						"methodName" => "updateFieldsTable",
					]));
				}
				#src/model/tools/DB.hx:102: characters 5-10
				(Log::$trace)("Inserted " . ($tableName??'null') . ": " . ($res->rowCount()??'null'), new HxAnon([
					"fileName" => "src/model/tools/DB.hx",
					"lineNumber" => 102,
					"className" => "model.tools.DB",
					"methodName" => "updateFieldsTable",
				]));
			}
		}
	}
}

Boot::registerClass(DB::class, 'model.tools.DB');
