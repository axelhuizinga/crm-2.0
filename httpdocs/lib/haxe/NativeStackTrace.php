<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx
 */

namespace haxe;

use \php\Boot;
use \php\_Boot\HxString;

/**
 * Do not use manually.
 */
class NativeStackTrace {
	/**
	 * @var \Closure
	 * If defined this function will be used to transform call stack entries.
	 * @param String - generated php file name.
	 * @param Int - Line number in generated file.
	 */
	static public $mapPosition;

	/**
	 * @param mixed $native
	 * @param int $skip
	 * 
	 * @return \Array_hx
	 */
	public static function toHaxe ($native, $skip = 0) {
		#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:61: lines 61-103
		if ($skip === null) {
			$skip = 0;
		}
		#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:62: characters 3-19
		$result = new \Array_hx();
		#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:63: characters 3-36
		$count = count($native);
		#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:65: characters 13-17
		$_g = 0;
		#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:65: characters 17-22
		$_g1 = $count;
		#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:65: lines 65-100
		while ($_g < $_g1) {
			#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:65: characters 13-22
			$i = $_g++;
			#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:66: lines 66-68
			if ($skip > $i) {
				#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:67: characters 5-13
				continue;
			}
			#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:70: characters 4-26
			$entry = $native[$i];
			#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:71: characters 4-20
			$item = null;
			#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:73: lines 73-87
			if (($i + 1) < $count) {
				#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:74: characters 5-30
				$next = $native[$i + 1];
				#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:76: lines 76-77
				if (!isset($next["function"])) {
					#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:77: characters 6-27
					$next["function"] = "";
				}
				#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:78: lines 78-79
				if (!isset($next["class"])) {
					#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:79: characters 6-24
					$next["class"] = "";
				}
				#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:81: lines 81-86
				if (HxString::indexOf($next["function"], "{closure}") >= 0) {
					#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:82: characters 6-28
					$item = StackItem::LocalFunction();
				} else if ((strlen($next["class"]) > 0) && (strlen($next["function"]) > 0)) {
					#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:84: characters 6-49
					$cls = Boot::getClassName($next["class"]);
					#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:85: characters 6-42
					$item = StackItem::Method($cls, $next["function"]);
				}
			}
			#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:88: lines 88-99
			if (isset($entry["file"])) {
				#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:89: lines 89-95
				if (NativeStackTrace::$mapPosition !== null) {
					#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:90: characters 6-58
					$pos = (NativeStackTrace::$mapPosition)($entry["file"], $entry["line"]);
					#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:91: lines 91-94
					if (($pos !== null) && ($pos->source !== null) && ($pos->originalLine !== null)) {
						#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:92: characters 7-33
						$entry["file"] = $pos->source;
						#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:93: characters 7-39
						$entry["line"] = $pos->originalLine;
					}
				}
				#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:96: characters 5-61
				$x = StackItem::FilePos($item, $entry["file"], $entry["line"]);
				$result->arr[$result->length++] = $x;
			} else if ($item !== null) {
				#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:98: characters 5-22
				$result->arr[$result->length++] = $item;
			}
		}
		#/usr/share/haxe/std/php/_std/haxe/NativeStackTrace.hx:102: characters 3-16
		return $result;
	}
}

Boot::registerClass(NativeStackTrace::class, 'haxe.NativeStackTrace');
