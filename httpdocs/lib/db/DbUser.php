<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: ../lib/db/DbUser.hx
 */

namespace db;

use \hxbit\Serializable;
use \haxe\io\_BytesData\Container;
use \php\Boot;
use \haxe\Exception;
use \hxbit\Schema;
use \haxe\io\Error;
use \hxbit\PropTypeDesc;
use \haxe\io\Bytes;
use \hxbit\Serializer;

class DbUser implements Serializable {
	/**
	 * @var int
	 */
	static public $__clid;

	/**
	 * @var int
	 */
	public $__uid;
	/**
	 * @var bool
	 */
	public $active;
	/**
	 * @var bool
	 */
	public $change_pass_required;
	/**
	 * @var int
	 */
	public $contact;
	/**
	 * @var int
	 */
	public $edited_by;
	/**
	 * @var string
	 */
	public $editing;
	/**
	 * @var string
	 */
	public $email;
	/**
	 * @var string
	 */
	public $external;
	/**
	 * @var string
	 */
	public $first_name;
	/**
	 * @var int
	 */
	public $id;
	/**
	 * @var string
	 */
	public $jwt;
	/**
	 * @var string
	 */
	public $last_error;
	/**
	 * @var string
	 */
	public $last_locktime;
	/**
	 * @var string
	 */
	public $last_login;
	/**
	 * @var string
	 */
	public $last_name;
	/**
	 * @var string
	 */
	public $last_request_time;
	/**
	 * @var int
	 */
	public $mandator;
	/**
	 * @var string
	 */
	public $new_pass;
	/**
	 * @var bool
	 */
	public $online;
	/**
	 * @var string
	 */
	public $password;
	/**
	 * @var string
	 */
	public $settings;
	/**
	 * @var int
	 */
	public $user_group;
	/**
	 * @var string
	 */
	public $user_name;

	/**
	 * @param mixed $p
	 * 
	 * @return void
	 */
	public function __construct ($p) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:658: characters 52-79
		$this->__uid = (Serializer::$SEQ << 24) | ++Serializer::$UID;
		#../lib/db/DbUser.hx:30: lines 30-37
		$_g = 0;
		$_g1 = \Type::getInstanceFields(\Type::getClass($this));
		while ($_g < $_g1->length) {
			#../lib/db/DbUser.hx:30: characters 7-8
			$f = ($_g1->arr[$_g] ?? null);
			#../lib/db/DbUser.hx:30: lines 30-37
			++$_g;
			#../lib/db/DbUser.hx:31: lines 31-36
			if ($f === "__uid" || $f === "getCLID" || $f === "getSerializeSchema" || $f === "serialize" || $f === "unserialize" || $f === "unserializeInit") {
			} else {
				#../lib/db/DbUser.hx:35: characters 6-51
				\Reflect::setField($this, $f, \Reflect::field($p, $f));
			}
		}
	}

	/**
	 * @return int
	 */
	public function getCLID () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:674: characters 61-74
		return DbUser::$__clid;
	}

	/**
	 * @return Schema
	 */
	public function getSerializeSchema () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:708: characters 7-101
		$schema = new Schema();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "active";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PBool();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "change_pass_required";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PBool();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "contact";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PInt();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "edited_by";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PInt();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "editing";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "email";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "external";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "first_name";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "id";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PInt();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "jwt";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "last_locktime";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "last_login";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "last_name";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "last_request_time";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "mandator";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PInt();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "online";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PBool();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "password";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "last_error";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "settings";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "new_pass";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "user_group";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PInt();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "user_name";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:710: characters 7-61
		$schema->isFinal = Serializer::isClassFinal(DbUser::$__clid);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:711: characters 7-20
		return $schema;
	}

	/**
	 * @param Serializer $__ctx
	 * 
	 * @return void
	 */
	public function serialize ($__ctx) {
		#../lib/db/DbUser.hx:6: characters 6-29
		$_this = $__ctx->out;
		$_this->b = ($_this->b . chr(($this->active ? 1 : 0)));
		#../lib/db/DbUser.hx:7: characters 6-43
		$_this = $__ctx->out;
		$_this->b = ($_this->b . chr(($this->change_pass_required ? 1 : 0)));
		#../lib/db/DbUser.hx:8: characters 6-29
		$v = $this->contact;
		if (($v >= 0) && ($v < 128)) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr($v));
		} else {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(128));
			$__ctx->out->addInt32($v);
		}
		#../lib/db/DbUser.hx:9: characters 6-31
		$v = $this->edited_by;
		if (($v >= 0) && ($v < 128)) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr($v));
		} else {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(128));
			$__ctx->out->addInt32($v);
		}
		#../lib/db/DbUser.hx:10: characters 6-32
		$s = $this->editing;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:11: characters 6-30
		$s = $this->email;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:12: characters 6-33
		$s = $this->external;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:13: characters 6-35
		$s = $this->first_name;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:14: characters 6-24
		$v = $this->id;
		if (($v >= 0) && ($v < 128)) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr($v));
		} else {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(128));
			$__ctx->out->addInt32($v);
		}
		#../lib/db/DbUser.hx:15: characters 6-28
		$s = $this->jwt;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:16: characters 6-38
		$s = $this->last_locktime;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:17: characters 6-35
		$s = $this->last_login;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:18: characters 6-34
		$s = $this->last_name;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:19: characters 6-42
		$s = $this->last_request_time;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:20: characters 6-30
		$v = $this->mandator;
		if (($v >= 0) && ($v < 128)) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr($v));
		} else {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(128));
			$__ctx->out->addInt32($v);
		}
		#../lib/db/DbUser.hx:21: characters 6-29
		$_this = $__ctx->out;
		$_this->b = ($_this->b . chr(($this->online ? 1 : 0)));
		#../lib/db/DbUser.hx:22: characters 6-33
		$s = $this->password;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:23: characters 6-35
		$s = $this->last_error;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:24: characters 6-33
		$s = $this->settings;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:25: characters 6-33
		$s = $this->new_pass;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbUser.hx:26: characters 6-32
		$v = $this->user_group;
		if (($v >= 0) && ($v < 128)) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr($v));
		} else {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(128));
			$__ctx->out->addInt32($v);
		}
		#../lib/db/DbUser.hx:27: characters 6-34
		$s = $this->user_name;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
	}

	/**
	 * @param Serializer $__ctx
	 * 
	 * @return void
	 */
	public function unserialize ($__ctx) {
		#../lib/db/DbUser.hx:6: characters 6-29
		$this->active = ord($__ctx->input->b->s[$__ctx->inPos++]) !== 0;
		#../lib/db/DbUser.hx:7: characters 6-43
		$this->change_pass_required = ord($__ctx->input->b->s[$__ctx->inPos++]) !== 0;
		#../lib/db/DbUser.hx:8: characters 6-29
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$this->contact = $v;
		#../lib/db/DbUser.hx:9: characters 6-31
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$this->edited_by = $v;
		#../lib/db/DbUser.hx:10: characters 6-32
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->editing = $tmp;
		#../lib/db/DbUser.hx:11: characters 6-30
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->email = $tmp;
		#../lib/db/DbUser.hx:12: characters 6-33
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->external = $tmp;
		#../lib/db/DbUser.hx:13: characters 6-35
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->first_name = $tmp;
		#../lib/db/DbUser.hx:14: characters 6-24
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$this->id = $v;
		#../lib/db/DbUser.hx:15: characters 6-28
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->jwt = $tmp;
		#../lib/db/DbUser.hx:16: characters 6-38
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->last_locktime = $tmp;
		#../lib/db/DbUser.hx:17: characters 6-35
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->last_login = $tmp;
		#../lib/db/DbUser.hx:18: characters 6-34
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->last_name = $tmp;
		#../lib/db/DbUser.hx:19: characters 6-42
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->last_request_time = $tmp;
		#../lib/db/DbUser.hx:20: characters 6-30
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$this->mandator = $v;
		#../lib/db/DbUser.hx:21: characters 6-29
		$this->online = ord($__ctx->input->b->s[$__ctx->inPos++]) !== 0;
		#../lib/db/DbUser.hx:22: characters 6-33
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->password = $tmp;
		#../lib/db/DbUser.hx:23: characters 6-35
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->last_error = $tmp;
		#../lib/db/DbUser.hx:24: characters 6-33
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->settings = $tmp;
		#../lib/db/DbUser.hx:25: characters 6-33
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->new_pass = $tmp;
		#../lib/db/DbUser.hx:26: characters 6-32
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$this->user_group = $v;
		#../lib/db/DbUser.hx:27: characters 6-34
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->user_name = $tmp;
	}

	/**
	 * @return void
	 */
	public function unserializeInit () {
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$__clid = Serializer::registerClass(Boot::getClass(DbUser::class));
	}
}

Boot::registerClass(DbUser::class, 'db.DbUser');
DbUser::__hx__init();
