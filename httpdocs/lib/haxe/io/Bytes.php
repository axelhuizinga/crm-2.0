<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /usr/share/haxe/std/php/_std/haxe/io/Bytes.hx
 */

namespace haxe\io;

use \haxe\io\_BytesData\Container;
use \php\Boot;

class Bytes {
	/**
	 * @var Container
	 */
	public $b;
	/**
	 * @var int
	 */
	public $length;

	/**
	 * @param int $length
	 * 
	 * @return Bytes
	 */
	public static function alloc ($length) {
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-52
		return new Bytes($length, new Container(str_repeat(chr(0), $length)));
	}

	/**
	 * @param int $length
	 * @param Container $b
	 * 
	 * @return void
	 */
	public function __construct ($length, $b) {
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:33: characters 3-23
		$this->length = $length;
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:34: characters 3-13
		$this->b = $b;
	}

	/**
	 * @param int $pos
	 * 
	 * @return float
	 */
	public function getDouble ($pos) {
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:71: characters 31-44
		$v = ord($this->b->s[$pos]) | (ord($this->b->s[$pos + 1]) << 8) | (ord($this->b->s[$pos + 2]) << 16) | (ord($this->b->s[$pos + 3]) << 24);
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:71: characters 10-64
		$low = (($v & ((int)-2147483648)) !== 0 ? $v | ((int)-2147483648) : $v);
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:71: characters 46-63
		$pos1 = $pos + 4;
		$v = ord($this->b->s[$pos1]) | (ord($this->b->s[$pos1 + 1]) << 8) | (ord($this->b->s[$pos1 + 2]) << 16) | (ord($this->b->s[$pos1 + 3]) << 24);
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:71: characters 10-64
		$high = (($v & ((int)-2147483648)) !== 0 ? $v | ((int)-2147483648) : $v);
		return unpack("d", pack("ii", (FPHelper::$isLittleEndian ? $low : $high), (FPHelper::$isLittleEndian ? $high : $low)))[1];
	}

	/**
	 * @param int $pos
	 * 
	 * @return float
	 */
	public function getFloat ($pos) {
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:75: characters 3-48
		$b = new BytesInput($this, $pos, 4);
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:76: characters 3-23
		return $b->readFloat();
	}

	/**
	 * @return string
	 */
	public function toString () {
		#/usr/share/haxe/std/php/_std/haxe/io/Bytes.hx:135: characters 3-11
		return $this->b->s;
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(Bytes::class, 'haxe.io.Bytes');
