<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /opt/src/lib/me/cunity/debug/Out.hx
 */

namespace me\cunity\debug;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \haxe\StackItem;
use \haxe\Log;
use \sys\io\File;
use \sys\io\FileOutput;
use \haxe\_CallStack\CallStack_Impl_;
use \sys\Http;
use \php\_Boot\HxString;

class Out {
	/**
	 * @var \Closure
	 */
	static public $aStack;
	/**
	 * @var \Array_hx
	 */
	static public $dumpedObjects;
	/**
	 * @var FileOutput
	 */
	static public $log;
	/**
	 * @var Tracer
	 */
	static public $logg;
	/**
	 * @var bool
	 */
	static public $once = false;
	/**
	 * @var \Array_hx
	 */
	static public $skipFields;
	/**
	 * @var bool
	 */
	static public $skipFunctions = true;
	/**
	 * @var bool
	 */
	static public $suspended = false;
	/**
	 * @var DebugOutput
	 */
	static public $traceTarget;
	/**
	 * @var bool
	 */
	static public $traceToConsole = false;

	/**
	 * @param mixed $v
	 * @param object $i
	 * 
	 * @return void
	 */
	public static function _trace ($v, $i = null) {
		#/opt/src/lib/me/cunity/debug/Out.hx:112: lines 112-113
		if (Out::$suspended) {
			#/opt/src/lib/me/cunity/debug/Out.hx:113: characters 4-10
			return;
		}
		#/opt/src/lib/me/cunity/debug/Out.hx:114: characters 3-22
		$warned = false;
		#/opt/src/lib/me/cunity/debug/Out.hx:115: lines 115-117
		if (($i !== null) && \Reflect::hasField($i, "customParams")) {
			#/opt/src/lib/me/cunity/debug/Out.hx:116: characters 4-25
			$i = ($i->customParams->arr[0] ?? null);
		}
		#/opt/src/lib/me/cunity/debug/Out.hx:119: characters 3-87
		$msg = ($i !== null ? ($i->fileName??'null') . ":" . ($i->methodName??'null') . ":" . ($i->lineNumber??'null') . ":" : "");
		#/opt/src/lib/me/cunity/debug/Out.hx:120: characters 3-11
		$msg = ($msg??'null') . (\Std::string($v)??'null');
		#/opt/src/lib/me/cunity/debug/Out.hx:123: lines 123-137
		if (Out::$log !== null) {
			#/opt/src/lib/me/cunity/debug/Out.hx:124: characters 4-29
			Out::$log->writeString(($msg??'null') . "\x0A");
			#/opt/src/lib/me/cunity/debug/Out.hx:125: characters 4-15
			Out::$log->flush();
		} else {
			#/opt/src/lib/me/cunity/debug/Out.hx:128: characters 10-21
			$__hx__switch = (Out::$traceTarget->index);
			if ($__hx__switch === 0) {
				#/opt/src/lib/me/cunity/debug/Out.hx:133: characters 5-28
				echo(\Std::string(($msg??'null') . "\x0D\x0A"));
			} else if ($__hx__switch === 1) {
				#/opt/src/lib/me/cunity/debug/Out.hx:135: characters 5-57
				echo(\Std::string((htmlspecialchars($msg, (null ? ENT_QUOTES | ENT_HTML401 : ENT_NOQUOTES))??'null') . "<br/>"));
			} else if ($__hx__switch === 2) {
				#/opt/src/lib/me/cunity/debug/Out.hx:131: characters 17-33
				$tmp = "error_log({0})";
				#/opt/src/lib/me/cunity/debug/Out.hx:131: characters 5-39
				$tmp->{$msg}();
			}
		}
		#/opt/src/lib/me/cunity/debug/Out.hx:139: lines 139-144
		if (Out::$once) {
			#/opt/src/lib/me/cunity/debug/Out.hx:141: characters 4-16
			Out::$once = false;
			#/opt/src/lib/me/cunity/debug/Out.hx:142: characters 4-33
			Out::_trace("i:" . (\Std::string(\Type::typeof($i))??'null'), new HxAnon([
				"fileName" => "me/cunity/debug/Out.hx",
				"lineNumber" => 142,
				"className" => "me.cunity.debug.Out",
				"methodName" => "_trace",
			]));
			#/opt/src/lib/me/cunity/debug/Out.hx:143: characters 4-17
			Out::dumpObject($i, new HxAnon([
				"fileName" => "me/cunity/debug/Out.hx",
				"lineNumber" => 143,
				"className" => "me.cunity.debug.Out",
				"methodName" => "_trace",
			]));
		}
	}

	/**
	 * @param mixed $ob
	 * @param object $i
	 * 
	 * @return void
	 */
	public static function dumpObject ($ob, $i = null) {
		#/opt/src/lib/me/cunity/debug/Out.hx:364: characters 3-34
		$tClass = \Type::getClass($ob);
		#/opt/src/lib/me/cunity/debug/Out.hx:365: characters 3-79
		$m = "dumpObject:" . (\Std::string(($ob !== null ? \Type::getClass($ob) : $ob))??'null') . "\x0A";
		#/opt/src/lib/me/cunity/debug/Out.hx:366: characters 3-41
		$names = new \Array_hx();
		#/opt/src/lib/me/cunity/debug/Out.hx:369: characters 4-45
		$names = (\Type::getClass($ob) !== null ? \Type::getInstanceFields(\Type::getClass($ob)) : \Reflect::fields($ob));
		#/opt/src/lib/me/cunity/debug/Out.hx:371: lines 371-373
		if (\Type::getClass($ob) !== null) {
			#/opt/src/lib/me/cunity/debug/Out.hx:373: characters 4-51
			$m = (\Type::getClassName(\Type::getClass($ob))??'null') . ":\x0A";
		}
		#/opt/src/lib/me/cunity/debug/Out.hx:375: lines 375-390
		$_g = 0;
		while ($_g < $names->length) {
			#/opt/src/lib/me/cunity/debug/Out.hx:375: characters 9-13
			$name = ($names->arr[$_g] ?? null);
			#/opt/src/lib/me/cunity/debug/Out.hx:375: lines 375-390
			++$_g;
			#/opt/src/lib/me/cunity/debug/Out.hx:376: lines 376-380
			if (\Lambda::has(Out::$skipFields, $name)) {
				#/opt/src/lib/me/cunity/debug/Out.hx:378: characters 6-28
				$m = ($m??'null') . "" . ($name??'null') . ":skipped\x0A";
				#/opt/src/lib/me/cunity/debug/Out.hx:379: characters 6-14
				continue;
			}
			#/opt/src/lib/me/cunity/debug/Out.hx:381: lines 381-389
			try {
				#/opt/src/lib/me/cunity/debug/Out.hx:382: characters 6-63
				$t = \Std::string(\Type::typeof(\Reflect::field($ob, $name)));
				#/opt/src/lib/me/cunity/debug/Out.hx:383: characters 11-44
				$tmp = Out::$skipFunctions && ($t === "TFunction");
				#/opt/src/lib/me/cunity/debug/Out.hx:385: characters 6-62
				$m = ($m??'null') . ($name??'null') . ":" . (\Std::string(\Reflect::field($ob, $name))??'null') . ":" . ($t??'null') . "\x0A";
			} catch(\Throwable $_g1) {
				$ex = Exception::caught($_g1)->unwrap();
				#/opt/src/lib/me/cunity/debug/Out.hx:388: characters 6-26
				$m = ($m??'null') . ($name??'null') . ":" . (\Std::string($ex)??'null');
			}
		}
		#/opt/src/lib/me/cunity/debug/Out.hx:395: characters 3-15
		Out::_trace($m, $i);
	}

	/**
	 * @param \Array_hx $sA
	 * @param object $i
	 * 
	 * @return void
	 */
	public static function dumpStack ($sA, $i = null) {
		#/opt/src/lib/me/cunity/debug/Out.hx:400: characters 3-37
		$b = new \StringBuf();
		#/opt/src/lib/me/cunity/debug/Out.hx:402: characters 3-40
		$b->add("StackDump:" . ($sA->length??'null') . "\x0A");
		#/opt/src/lib/me/cunity/debug/Out.hx:403: lines 403-408
		$_g = 0;
		while ($_g < $sA->length) {
			#/opt/src/lib/me/cunity/debug/Out.hx:403: characters 8-12
			$item = ($sA->arr[$_g] ?? null);
			#/opt/src/lib/me/cunity/debug/Out.hx:403: lines 403-408
			++$_g;
			#/opt/src/lib/me/cunity/debug/Out.hx:405: characters 4-25
			Out::itemToString($item, $b);
			#/opt/src/lib/me/cunity/debug/Out.hx:407: characters 4-15
			$b->add("\x0A");
		}
		#/opt/src/lib/me/cunity/debug/Out.hx:411: characters 3-8
		(Log::$trace)($b->b, new HxAnon([
			"fileName" => "me/cunity/debug/Out.hx",
			"lineNumber" => 411,
			"className" => "me.cunity.debug.Out",
			"methodName" => "dumpStack",
			"customParams" => \Array_hx::wrap([$i]),
		]));
	}

	/**
	 * @param mixed $v
	 * @param object $i
	 * 
	 * @return void
	 */
	public static function dumpVar ($v, $i = null) {
		#/opt/src/lib/me/cunity/debug/Out.hx:352: lines 352-356
		
			ob_start();
			print_r($v);
			$ret =  ob_get_clean();
		;
		#/opt/src/lib/me/cunity/debug/Out.hx:357: characters 3-22
		Out::_trace(ret, new HxAnon([
			"fileName" => "me/cunity/debug/Out.hx",
			"lineNumber" => 357,
			"className" => "me.cunity.debug.Out",
			"methodName" => "dumpVar",
		]));
	}

	/**
	 * @param string $str
	 * @param \Array_hx $arr
	 * @param object $i
	 * 
	 * @return void
	 */
	public static function fTrace ($str, $arr, $i = null) {
		#/opt/src/lib/me/cunity/debug/Out.hx:462: characters 3-34
		$str_arr = HxString::split($str, " @");
		#/opt/src/lib/me/cunity/debug/Out.hx:463: characters 3-44
		$str_buf = new \StringBuf();
		#/opt/src/lib/me/cunity/debug/Out.hx:465: characters 13-17
		$_g = 0;
		#/opt/src/lib/me/cunity/debug/Out.hx:465: characters 17-31
		$_g1 = $str_arr->length;
		#/opt/src/lib/me/cunity/debug/Out.hx:465: lines 465-469
		while ($_g < $_g1) {
			#/opt/src/lib/me/cunity/debug/Out.hx:465: characters 13-31
			$i1 = $_g++;
			#/opt/src/lib/me/cunity/debug/Out.hx:466: characters 4-30
			$str_buf->add(($str_arr->arr[$i1] ?? null));
			#/opt/src/lib/me/cunity/debug/Out.hx:467: lines 467-468
			if (($arr->arr[$i1] ?? null) !== null) {
				#/opt/src/lib/me/cunity/debug/Out.hx:468: characters 4-26
				$str_buf->add(($arr->arr[$i1] ?? null));
			}
		}
		#/opt/src/lib/me/cunity/debug/Out.hx:470: characters 3-33
		Out::_trace($str_buf->b, $i);
	}

	/**
	 * @return void
	 */
	public static function init () {
		#/opt/src/lib/me/cunity/debug/Out.hx:77: characters 3-34
		File::saveContent("log.txt", "");
		#/opt/src/lib/me/cunity/debug/Out.hx:78: characters 3-36
		Out::$log = File::write("log.txt", true);
		#/opt/src/lib/me/cunity/debug/Out.hx:79: characters 3-14
		Out::$log->flush();
		#/opt/src/lib/me/cunity/debug/Out.hx:80: characters 3-25
		Log::$trace = Boot::getStaticClosure(Out::class, '_trace');
	}

	/**
	 * @param StackItem $s
	 * @param \StringBuf $b
	 * 
	 * @return void
	 */
	public static function itemToString ($s, $b) {
		#/opt/src/lib/me/cunity/debug/Out.hx:416: lines 416-443
		$__hx__switch = ($s->index);
		if ($__hx__switch === 0) {
			#/opt/src/lib/me/cunity/debug/Out.hx:418: characters 4-25
			$b->add("a C function");
		} else if ($__hx__switch === 1) {
			#/opt/src/lib/me/cunity/debug/Out.hx:421: characters 15-16
			$m = $s->params[0];
			#/opt/src/lib/me/cunity/debug/Out.hx:422: characters 4-20
			$b->add("module ");
			#/opt/src/lib/me/cunity/debug/Out.hx:423: characters 4-12
			$b->add($m);
		} else if ($__hx__switch === 2) {
			#/opt/src/lib/me/cunity/debug/Out.hx:424: characters 8-28
			$_g = $s->params[3];
			#/opt/src/lib/me/cunity/debug/Out.hx:424: characters 23-27
			$line = $s->params[2];
			#/opt/src/lib/me/cunity/debug/Out.hx:424: characters 18-22
			$file = $s->params[1];
			#/opt/src/lib/me/cunity/debug/Out.hx:424: characters 16-17
			$s1 = $s->params[0];
			#/opt/src/lib/me/cunity/debug/Out.hx:425: lines 425-428
			if ($s1 !== null) {
				#/opt/src/lib/me/cunity/debug/Out.hx:426: characters 5-23
				Out::itemToString($s1, $b);
				#/opt/src/lib/me/cunity/debug/Out.hx:427: characters 5-16
				$b->add(" (");
			}
			#/opt/src/lib/me/cunity/debug/Out.hx:429: characters 4-15
			$b->add($file);
			#/opt/src/lib/me/cunity/debug/Out.hx:430: characters 4-19
			$b->add(" line ");
			#/opt/src/lib/me/cunity/debug/Out.hx:431: characters 4-15
			$b->add($line);
			#/opt/src/lib/me/cunity/debug/Out.hx:433: characters 4-32
			if ($s1 !== null) {
				#/opt/src/lib/me/cunity/debug/Out.hx:433: characters 20-32
				$b->add(")\x0A");
			}
		} else if ($__hx__switch === 3) {
			#/opt/src/lib/me/cunity/debug/Out.hx:434: characters 21-25
			$meth = $s->params[1];
			#/opt/src/lib/me/cunity/debug/Out.hx:434: characters 15-20
			$cname = $s->params[0];
			#/opt/src/lib/me/cunity/debug/Out.hx:435: characters 4-16
			$b->add($cname);
			#/opt/src/lib/me/cunity/debug/Out.hx:436: characters 4-14
			$b->add(".");
			#/opt/src/lib/me/cunity/debug/Out.hx:437: characters 4-15
			$b->add($meth);
			#/opt/src/lib/me/cunity/debug/Out.hx:439: characters 4-15
			$b->add("\x0A");
		} else if ($__hx__switch === 4) {
			#/opt/src/lib/me/cunity/debug/Out.hx:419: characters 22-23
			$v = $s->params[0];
			#/opt/src/lib/me/cunity/debug/Out.hx:420: characters 4-31
			$b->add("LocalFunction:" . ($v??'null'));
		}
	}

	/**
	 * @param mixed $v
	 * @param object $i
	 * 
	 * @return void
	 */
	public static function log2 ($v, $i = null) {
		#/opt/src/lib/me/cunity/debug/Out.hx:204: characters 3-93
		$msg = ($i !== null ? ($i->fileName??'null') . ":" . ($i->lineNumber??'null') . ":" . ($i->methodName??'null') . ":" : "");
		#/opt/src/lib/me/cunity/debug/Out.hx:205: characters 3-23
		$msg = ($msg??'null') . (\Std::string($v)??'null');
		#/opt/src/lib/me/cunity/debug/Out.hx:206: characters 3-68
		$http = new Http("http://localhost/devel/php/jsLog.php");
		#/opt/src/lib/me/cunity/debug/Out.hx:207: characters 3-32
		$http->setParameter("log", $msg);
		#/opt/src/lib/me/cunity/debug/Out.hx:211: characters 3-66
		$http->onData = function ($data) {
			#/opt/src/lib/me/cunity/debug/Out.hx:211: characters 34-63
			if ($data !== "OK") {
				#/opt/src/lib/me/cunity/debug/Out.hx:211: characters 52-57
				(Log::$trace)($data, new HxAnon([
					"fileName" => "me/cunity/debug/Out.hx",
					"lineNumber" => 211,
					"className" => "me.cunity.debug.Out",
					"methodName" => "log2",
				]));
			}
		};
		#/opt/src/lib/me/cunity/debug/Out.hx:212: characters 3-21
		$http->request(true);
	}

	/**
	 * @param string $data
	 * @param object $i
	 * 
	 * @return void
	 */
	public static function printCDATA ($data, $i = null) {
		#/opt/src/lib/me/cunity/debug/Out.hx:347: characters 32-55
		$tmp = "htmlspecialchars({0})";
		#/opt/src/lib/me/cunity/debug/Out.hx:347: characters 3-77
		Out::_trace("<pre>" . (\Std::string($tmp->{$data}())??'null') . "</pre>", $i);
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$skipFields = new \Array_hx();
		self::$traceTarget = DebugOutput::NATIVE();
		self::$aStack = Boot::getStaticClosure(CallStack_Impl_::class, 'callStack');
	}
}

Boot::registerClass(Out::class, 'me.cunity.debug.Out');
Out::__hx__init();
