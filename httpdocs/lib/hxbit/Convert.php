<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx
 */

namespace hxbit;

use \haxe\_Int64\___Int64;
use \php\Boot;
use \haxe\ds\ObjectMap;
use \haxe\ds\IntMap;
use \haxe\ds\StringMap;
use \haxe\ds\_Vector\PhpVectorData;

class Convert {
	/**
	 * @var StringMap
	 */
	static public $convFuns;

	/**
	 * @var bool
	 */
	public $hadCID;
	/**
	 * @var bool
	 */
	public $hasCID;
	/**
	 * @var \Array_hx
	 */
	public $read;
	/**
	 * @var \Array_hx
	 */
	public $write;

	/**
	 * @param PropTypeDesc $t
	 * 
	 * @return mixed
	 */
	public static function getDefault ($t) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:125: lines 125-140
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:127: characters 25-26
			return 0;
		} else if ($__hx__switch === 1) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:128: characters 16-18
			return 0.;
		} else if ($__hx__switch === 2) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:137: characters 15-20
			return false;
		} else if ($__hx__switch === 5) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:139: characters 51-52
			$_g = $t->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:139: characters 101-105
			return null;
		} else if ($__hx__switch === 6) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:139: characters 14-15
			$_g = $t->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:139: characters 101-105
			return null;
		} else if ($__hx__switch === 7) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:130: characters 16-17
			$_g = $t->params[1];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:130: characters 13-14
			$k = $t->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:131: lines 131-135
			$__hx__switch = ($k->index);
			if ($__hx__switch === 0) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:132: characters 15-37
				return new IntMap();
			} else if ($__hx__switch === 3) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:133: characters 18-43
				return new StringMap();
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:134: characters 13-34
				return new ObjectMap();
			}
		} else if ($__hx__switch === 8) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:129: characters 15-16
			$_g = $t->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:129: characters 19-21
			return new \Array_hx();
		} else if ($__hx__switch === 9) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:139: characters 33-34
			$_g = $t->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:139: characters 101-105
			return null;
		} else if ($__hx__switch === 10) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:138: characters 15-16
			$t1 = $t->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:138: characters 19-32
			return Convert::getDefault($t1);
		} else if ($__hx__switch === 11) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:136: characters 16-17
			$_g = $t->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:136: characters 20-50
			$this1 = new PhpVectorData(0);
			return $this1;
		} else if ($__hx__switch === 12) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:139: characters 24-25
			$_g = $t->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:139: characters 101-105
			return null;
		} else if ($__hx__switch === 15) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:126: characters 16-37
			$this1 = new ___Int64(0, 0);
			return $this1;
		} else if ($__hx__switch === 16) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:127: characters 21-22
			$_g = $t->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:127: characters 25-26
			return 0;
		} else if ($__hx__switch === 3 || $__hx__switch === 4 || $__hx__switch === 13 || $__hx__switch === 14 || $__hx__switch === 17) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:139: characters 101-105
			return null;
		}
	}

	/**
	 * @param string $path
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	public static function registerConverter ($path, $f) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:145: characters 3-24
		Convert::$convFuns->data[$path] = $f;
	}

	/**
	 * @param PropTypeDesc $a
	 * @param PropTypeDesc $b
	 * 
	 * @return bool
	 */
	public static function sameType ($a, $b) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: lines 95-121
		$__hx__switch = ($a->index);
		if ($__hx__switch === 0) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: characters 15-16
			$__hx__switch = ($b->index);
			if ($__hx__switch === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:113: characters 19-20
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:114: characters 4-25
				return Convert::sameType($a, $b1);
			} else if ($__hx__switch === 16) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:115: characters 22-23
				$_g = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:116: characters 4-15
				return true;
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:120: characters 4-28
				return \Type::enumEq($a, $b);
			}
		} else if ($__hx__switch === 7) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:96: characters 18-20
			$_g = $a->params[1];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:96: characters 14-16
			$_g1 = $a->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: characters 15-16
			$__hx__switch = ($b->index);
			if ($__hx__switch === 7) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:96: characters 14-16
				$ak = $_g1;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:96: characters 18-20
				$av = $_g;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:96: characters 32-34
				$bv = $b->params[1];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:96: characters 28-30
				$bk = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:97: characters 11-47
				if (Convert::sameType($ak, $bk)) {
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:97: characters 31-47
					return Convert::sameType($av, $bv);
				} else {
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:97: characters 11-47
					return false;
				}
			} else if ($__hx__switch === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:113: characters 19-20
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:114: characters 4-25
				return Convert::sameType($a, $b1);
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:120: characters 4-28
				return \Type::enumEq($a, $b);
			}
		} else if ($__hx__switch === 8) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:98: characters 16-17
			$_g = $a->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: characters 15-16
			$__hx__switch = ($b->index);
			if ($__hx__switch === 8) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:98: characters 16-17
				$a1 = $_g;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:98: characters 27-28
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:99: characters 4-25
				return Convert::sameType($a1, $b1);
			} else if ($__hx__switch === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:113: characters 19-20
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:114: characters 4-25
				return Convert::sameType($a, $b1);
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:120: characters 4-28
				return \Type::enumEq($a, $b);
			}
		} else if ($__hx__switch === 9) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:100: characters 14-16
			$_g = $a->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: characters 15-16
			$__hx__switch = ($b->index);
			if ($__hx__switch === 9) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:100: characters 14-16
				$fa = $_g;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:100: characters 24-26
				$fb = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:101: characters 4-45
				if ($fa->length !== $fb->length) {
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:101: characters 33-45
					return false;
				}
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:102: characters 14-18
				$_g = 0;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:102: characters 18-27
				$_g1 = $fa->length;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:102: lines 102-107
				while ($_g < $_g1) {
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:102: characters 14-27
					$i = $_g++;
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:103: characters 5-19
					$a1 = ($fa->arr[$i] ?? null);
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:104: characters 5-19
					$b1 = ($fb->arr[$i] ?? null);
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:105: lines 105-106
					if (($a1->name !== $b1->name) || ($a1->opt !== $b1->opt) || !Convert::sameType($a1->type, $b1->type)) {
						#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:106: characters 6-18
						return false;
					}
				}
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:108: characters 4-15
				return true;
			} else if ($__hx__switch === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:113: characters 19-20
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:114: characters 4-25
				return Convert::sameType($a, $b1);
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:120: characters 4-28
				return \Type::enumEq($a, $b);
			}
		} else if ($__hx__switch === 10) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:111: characters 16-17
			$_g = $a->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: characters 15-16
			if ($b->index === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:109: characters 16-17
				$a1 = $_g;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:109: characters 27-28
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:110: characters 4-25
				return Convert::sameType($a1, $b1);
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:111: characters 16-17
				$a1 = $_g;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:112: characters 4-25
				return Convert::sameType($a1, $b);
			}
		} else if ($__hx__switch === 11) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:98: characters 40-41
			$_g = $a->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: characters 15-16
			$__hx__switch = ($b->index);
			if ($__hx__switch === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:113: characters 19-20
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:114: characters 4-25
				return Convert::sameType($a, $b1);
			} else if ($__hx__switch === 11) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:98: characters 40-41
				$a1 = $_g;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:98: characters 51-52
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:99: characters 4-25
				return Convert::sameType($a1, $b1);
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:120: characters 4-28
				return \Type::enumEq($a, $b);
			}
		} else if ($__hx__switch === 12) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:98: characters 62-63
			$_g = $a->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: characters 15-16
			$__hx__switch = ($b->index);
			if ($__hx__switch === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:113: characters 19-20
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:114: characters 4-25
				return Convert::sameType($a, $b1);
			} else if ($__hx__switch === 12) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:98: characters 62-63
				$a1 = $_g;
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:98: characters 71-72
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:99: characters 4-25
				return Convert::sameType($a1, $b1);
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:120: characters 4-28
				return \Type::enumEq($a, $b);
			}
		} else if ($__hx__switch === 16) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:117: characters 16-17
			$_g = $a->params[0];
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: characters 15-16
			$__hx__switch = ($b->index);
			if ($__hx__switch === 0) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:118: characters 4-15
				return true;
			} else if ($__hx__switch === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:113: characters 19-20
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:114: characters 4-25
				return Convert::sameType($a, $b1);
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:120: characters 4-28
				return \Type::enumEq($a, $b);
			}
		} else {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:95: characters 15-16
			if ($b->index === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:113: characters 19-20
				$b1 = $b->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:114: characters 4-25
				return Convert::sameType($a, $b1);
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:120: characters 4-28
				return \Type::enumEq($a, $b);
			}
		}
	}

	/**
	 * @param string $classPath
	 * @param Schema $ourSchema
	 * @param Schema $schema
	 * 
	 * @return void
	 */
	public function __construct ($classPath, $ourSchema, $schema) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:47: characters 16-25
		$this1 = [];
		$ourMap_data = $this1;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:48: characters 13-17
		$_g = 0;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:48: characters 17-45
		$_g1 = $ourSchema->fieldsNames->length;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:48: lines 48-49
		while ($_g < $_g1) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:48: characters 13-45
			$i = $_g++;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:49: characters 4-66
			$ourMap_data[$ourSchema->fieldsNames[$i]] = ($ourSchema->fieldsTypes->arr[$i] ?? null);
		}
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:50: characters 3-7
		$this->read = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:51: characters 3-9
		$this->hadCID = !$schema->isFinal;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:52: characters 3-9
		$this->hasCID = !$ourSchema->isFinal;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:54: characters 13-22
		$this1 = [];
		$map_data = $this1;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:55: characters 13-17
		$_g = 0;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:55: characters 17-42
		$_g1 = $schema->fieldsNames->length;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:55: lines 55-70
		while ($_g < $_g1) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:55: characters 13-42
			$i = $_g++;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:56: characters 4-37
			$oldT = ($schema->fieldsTypes->arr[$i] ?? null);
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:57: characters 4-49
			$newT = ($ourMap_data[($schema->fieldsNames->arr[$i] ?? null)] ?? null);
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:58: characters 4-77
			$c = new ConvertField(($classPath??'null') . "." . (($schema->fieldsNames->arr[$i] ?? null)??'null'), $oldT, $newT);
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:59: lines 59-66
			if ($newT !== null) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:60: lines 60-65
				if (Convert::sameType($oldT, $newT)) {
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:61: characters 6-12
					$c->same = true;
				} else {
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:63: characters 6-12
					$c->conv = (Convert::$convFuns->data[$c->path] ?? null);
					#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:64: characters 6-20
					$c->defaultValue = Convert::getDefault($newT);
				}
			}
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:67: characters 4-11
			$c->index = $this->read->length;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:68: characters 4-16
			$_this = $this->read;
			$_this->arr[$_this->length++] = $c;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:69: characters 4-37
			$map_data[$schema->fieldsNames[$i]] = $c;
		}
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:72: characters 3-8
		$this->write = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:73: characters 13-17
		$_g = 0;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:73: characters 17-45
		$_g1 = $ourSchema->fieldsNames->length;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:73: lines 73-82
		while ($_g < $_g1) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:73: characters 13-45
			$i = $_g++;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:74: characters 4-40
			$newT = ($ourSchema->fieldsTypes->arr[$i] ?? null);
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:75: characters 4-46
			$c = ($map_data[($ourSchema->fieldsNames->arr[$i] ?? null)] ?? null);
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:76: lines 76-80
			if ($c === null) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:77: characters 5-6
				$c = new ConvertField(null, null, $newT);
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:79: characters 5-19
				$c->defaultValue = Convert::getDefault($newT);
			}
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:81: characters 4-17
			$_this = $this->write;
			$_this->arr[$_this->length++] = $c;
		}
	}

	/**
	 * @return string
	 */
	public function toString () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:86: lines 86-91
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:86: characters 21-25
		$_g1 = 0;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:86: characters 25-37
		$_g2 = $this->write->length;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:86: lines 86-91
		while ($_g1 < $_g2) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:86: characters 21-37
			$i = $_g1++;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:87: characters 4-21
			$w = ($this->write->arr[$i] ?? null);
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:88: lines 88-90
			if ($w->from === null) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:88: characters 25-49
				$x = "insert:" . (\Std::string($w->defaultValue)??'null');
				$_g->arr[$_g->length++] = $x;
			} else if ($w->same) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:89: characters 17-51
				$_g->arr[$_g->length++] = ($i === $w->index ? "s" : "@" . ($w->index??'null'));
			} else {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:90: characters 4-30
				$x1 = "@" . ($w->index??'null') . ":" . (\Std::string($w->to)??'null');
				$_g->arr[$_g->length++] = $x1;
			}
		}
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Convert.hx:86: lines 86-91
		return $_g->toString();
	}

	public function __toString() {
		return $this->toString();
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$convFuns = new StringMap();
	}
}

Boot::registerClass(Convert::class, 'hxbit.Convert');
Convert::__hx__init();
