<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: ../lib/db/DbRelation.hx
 */

namespace db;

use \hxbit\Serializable;
use \haxe\io\_BytesData\Container;
use \php\Boot;
use \haxe\Exception;
use \hxbit\Schema;
use \haxe\io\Error;
use \hxbit\PropTypeDesc;
use \haxe\io\Bytes;
use \hxbit\Serializer;

class DbRelation implements Serializable {
	/**
	 * @var int
	 */
	static public $__clid;

	/**
	 * @var int
	 */
	public $__uid;
	/**
	 * @var string
	 */
	public $alias;
	/**
	 * @var \Array_hx
	 */
	public $fields;
	/**
	 * @var mixed
	 */
	public $filter;
	/**
	 * @var string
	 */
	public $jCond;

	/**
	 * @param mixed $p
	 * 
	 * @return void
	 */
	public function __construct ($p) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:658: characters 52-79
		$this->__uid = (Serializer::$SEQ << 24) | ++Serializer::$UID;
		#../lib/db/DbRelation.hx:14: lines 14-22
		$_g = 0;
		$_g1 = \Type::getInstanceFields(Boot::getClass(DbRelation::class));
		while ($_g < $_g1->length) {
			#../lib/db/DbRelation.hx:14: characters 7-8
			$f = ($_g1->arr[$_g] ?? null);
			#../lib/db/DbRelation.hx:14: lines 14-22
			++$_g;
			#../lib/db/DbRelation.hx:15: lines 15-21
			if ($f === "__uid" || $f === "getCLID" || $f === "getSerializeSchema" || $f === "serialize" || $f === "unserialize") {
			} else {
				#../lib/db/DbRelation.hx:19: lines 19-20
				if (\Reflect::hasField($p, $f)) {
					#../lib/db/DbRelation.hx:20: characters 7-52
					\Reflect::setField($this, $f, \Reflect::field($p, $f));
				}
			}
		}
	}

	/**
	 * @return int
	 */
	public function getCLID () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:674: characters 61-74
		return DbRelation::$__clid;
	}

	/**
	 * @return Schema
	 */
	public function getSerializeSchema () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:708: characters 7-101
		$schema = new Schema();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "alias";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "fields";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PArray(PropTypeDesc::PString());
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "filter";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PDynamic();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "jCond";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:710: characters 7-61
		$schema->isFinal = Serializer::isClassFinal(DbRelation::$__clid);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:711: characters 7-20
		return $schema;
	}

	/**
	 * @param Serializer $__ctx
	 * 
	 * @return void
	 */
	public function serialize ($__ctx) {
		#../lib/db/DbRelation.hx:7: characters 6-30
		$s = $this->alias;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
		#../lib/db/DbRelation.hx:8: characters 6-38
		$a = $this->fields;
		if ($a === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$v = $a->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_g = 0;
			while ($_g < $a->length) {
				$v = ($a->arr[$_g] ?? null);
				++$_g;
				if ($v === null) {
					$_this = $__ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$b = strlen($v);
					$b1 = new Bytes($b, new Container($v));
					$v1 = $b1->length + 1;
					if (($v1 >= 0) && ($v1 < 128)) {
						$_this1 = $__ctx->out;
						$_this1->b = ($_this1->b . chr($v1));
					} else {
						$_this2 = $__ctx->out;
						$_this2->b = ($_this2->b . chr(128));
						$__ctx->out->addInt32($v1);
					}
					$_this3 = $__ctx->out;
					$_this3->b = ($_this3->b . $b1->b->s);
				}
			}
		}
		#../lib/db/DbRelation.hx:9: characters 6-32
		$__ctx->addDynamic($this->filter);
		#../lib/db/DbRelation.hx:10: characters 6-30
		$s = $this->jCond;
		if ($s === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$b = strlen($s);
			$b1 = new Bytes($b, new Container($s));
			$v = $b1->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_this = $__ctx->out;
			$_this->b = ($_this->b . $b1->b->s);
		}
	}

	/**
	 * @param Serializer $__ctx
	 * 
	 * @return void
	 */
	public function unserialize ($__ctx) {
		#../lib/db/DbRelation.hx:7: characters 6-30
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->alias = $tmp;
		#../lib/db/DbRelation.hx:8: characters 6-38
		$e0 = null;
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$a = new \Array_hx();
			$_g = 0;
			$_g1 = $len;
			while ($_g < $_g1) {
				$i = $_g++;
				$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
				if ($v === 128) {
					$_this = $__ctx->input;
					$pos = $__ctx->inPos;
					$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
					$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
					$__ctx->inPos += 4;
				}
				$len = $v;
				if ($len === 0) {
					$e0 = null;
				} else {
					--$len;
					$_this1 = $__ctx->input;
					$pos1 = $__ctx->inPos;
					$s = null;
					if (($pos1 < 0) || ($len < 0) || (($pos1 + $len) > $_this1->length)) {
						throw Exception::thrown(Error::OutsideBounds());
					} else {
						$s = substr($_this1->b->s, $pos1, $len);
					}
					$__ctx->inPos += $len;
					$e0 = $s;
				}
				$a->offsetSet($i, $e0);
			}
			$tmp = $a;
		}
		$this->fields = $tmp;
		#../lib/db/DbRelation.hx:9: characters 6-32
		$this->filter = $__ctx->getDynamic();
		#../lib/db/DbRelation.hx:10: characters 6-30
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			--$len;
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$s = null;
			if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$s = substr($_this->b->s, $pos, $len);
			}
			$__ctx->inPos += $len;
			$tmp = $s;
		}
		$this->jCond = $tmp;
	}

	/**
	 * @return void
	 */
	public function unserializeInit () {
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$__clid = Serializer::registerClass(Boot::getClass(DbRelation::class));
	}
}

Boot::registerClass(DbRelation::class, 'db.DbRelation');
DbRelation::__hx__init();
