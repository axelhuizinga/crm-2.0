<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /usr/share/haxe/std/haxe/io/Input.hx
 */

namespace haxe\io;

use \php\Boot;
use \haxe\Exception;

/**
 * An Input is an abstract reader. See other classes in the `haxe.io` package
 * for several possible implementations.
 * All functions which read data throw `Eof` when the end of the stream
 * is reached.
 */
class Input {
	/**
	 * @var bool
	 * Endianness (word byte order) used when reading numbers.
	 * If `true`, big-endian is used, otherwise `little-endian` is used.
	 */
	public $bigEndian;

	/**
	 * Close the input source.
	 * Behaviour while reading after calling this method is unspecified.
	 * 
	 * @return void
	 */
	public function close () {
	}

	/**
	 * Read and return one byte.
	 * 
	 * @return int
	 */
	public function readByte () {
		#/usr/share/haxe/std/haxe/io/Input.hx:53: characters 10-15
		throw Exception::thrown("Not implemented");
	}

	/**
	 * Read `len` bytes and write them into `s` to the position specified by `pos`.
	 * Returns the actual length of read data that can be smaller than `len`.
	 * See `readFullBytes` that tries to read the exact amount of specified bytes.
	 * 
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return int
	 */
	public function readBytes ($s, $pos, $len) {
		#/usr/share/haxe/std/haxe/io/Input.hx:65: characters 3-15
		$k = $len;
		#/usr/share/haxe/std/haxe/io/Input.hx:66: characters 3-69
		$b = $s->b;
		#/usr/share/haxe/std/haxe/io/Input.hx:67: lines 67-68
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $s->length)) {
			#/usr/share/haxe/std/haxe/io/Input.hx:68: characters 4-9
			throw Exception::thrown(Error::OutsideBounds());
		}
		#/usr/share/haxe/std/haxe/io/Input.hx:69: lines 69-83
		try {
			#/usr/share/haxe/std/haxe/io/Input.hx:70: lines 70-82
			while ($k > 0) {
				#/usr/share/haxe/std/haxe/io/Input.hx:74: characters 5-27
				$val = $this->readByte();
				$b->s[$pos] = chr($val);
				#/usr/share/haxe/std/haxe/io/Input.hx:80: characters 5-10
				++$pos;
				#/usr/share/haxe/std/haxe/io/Input.hx:81: characters 5-8
				--$k;
			}
		} catch(\Throwable $_g) {
			#/usr/share/haxe/std/haxe/io/Input.hx:69: lines 69-83
			if (!(Exception::caught($_g)->unwrap() instanceof Eof)) {
				throw $_g;
			}
		}
		#/usr/share/haxe/std/haxe/io/Input.hx:84: characters 3-17
		return $len - $k;
	}

	/**
	 * Read a 32-bit floating point number.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return float
	 */
	public function readFloat () {
		#/usr/share/haxe/std/haxe/io/Input.hx:200: characters 10-42
		return unpack("f", pack("l", $this->readInt32()))[1];
	}

	/**
	 * Read a 32-bit signed integer.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return int
	 */
	public function readInt32 () {
		#/usr/share/haxe/std/haxe/io/Input.hx:282: characters 3-24
		$ch1 = $this->readByte();
		#/usr/share/haxe/std/haxe/io/Input.hx:283: characters 3-24
		$ch2 = $this->readByte();
		#/usr/share/haxe/std/haxe/io/Input.hx:284: characters 3-24
		$ch3 = $this->readByte();
		#/usr/share/haxe/std/haxe/io/Input.hx:285: characters 3-24
		$ch4 = $this->readByte();
		#/usr/share/haxe/std/haxe/io/Input.hx:288: characters 3-115
		$n = ($this->bigEndian ? $ch4 | ($ch3 << 8) | ($ch2 << 16) | ($ch1 << 24) : $ch1 | ($ch2 << 8) | ($ch3 << 16) | ($ch4 << 24));
		#/usr/share/haxe/std/haxe/io/Input.hx:289: lines 289-292
		if (($n & ((int)-2147483648)) !== 0) {
			#/usr/share/haxe/std/haxe/io/Input.hx:290: characters 4-27
			return $n | ((int)-2147483648);
		} else {
			#/usr/share/haxe/std/haxe/io/Input.hx:292: characters 4-12
			return $n;
		}
	}
}

Boot::registerClass(Input::class, 'haxe.io.Input');
