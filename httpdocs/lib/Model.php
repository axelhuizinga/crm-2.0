<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: src/Model.hx
 */

use \php\_Boot\HxDynamicStr;
use \haxe\io\_BytesData\Container;
use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Log;
use \db\DbQuery;
use \php\Lib;
use \shared\DbData;
use \php\Web;
use \sys\io\File;
use \haxe\iterators\MapKeyValueIterator;
use \php\_Boot\HxString;
use \haxe\ds\StringMap;
use \haxe\Unserializer;
use \haxe\io\Bytes;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \hxbit\Serializer;

class Model {
	/**
	 * @var string
	 */
	public $action;
	/**
	 * @var DbData
	 */
	public $dParam;
	/**
	 * @var object
	 */
	public $data;
	/**
	 * @var StringMap
	 */
	public $dataSource;
	/**
	 * @var string
	 */
	public $dataSourceSql;
	/**
	 * @var string
	 */
	public $db;
	/**
	 * @var object
	 */
	public $dbAccessProps;
	/**
	 * @var DbData
	 */
	public $dbData;
	/**
	 * @var \Array_hx
	 */
	public $fieldNames;
	/**
	 * @var string
	 */
	public $filterSql;
	/**
	 * @var \Array_hx
	 */
	public $filterValues;
	/**
	 * @var mixed
	 */
	public $globals;
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @var string
	 */
	public $joinSql;
	/**
	 * @var int
	 */
	public $num_rows;
	/**
	 * @var StringMap
	 */
	public $param;
	/**
	 * @var string
	 */
	public $queryFields;
	/**
	 * @var StringMap
	 */
	public $relations;
	/**
	 * @var string
	 */
	public $setSql;
	/**
	 * @var \Array_hx
	 */
	public $setValues;
	/**
	 * @var string
	 */
	public $table;
	/**
	 * @var \Array_hx
	 */
	public $tableNames;

	/**
	 * @return DbQuery
	 */
	public static function binary () {
		#src/Model.hx:842: characters 3-8
		$tmp = Log::$trace;
		#src/Model.hx:842: characters 9-45
		$data = $_POST;
		$_this_current = 0;
		$_this_length = count($data);
		$_this_keys = array_keys($data);
		$_this_values = array_values($data);
		#src/Model.hx:842: characters 3-8
		$tmp(($_this_current < $_this_length ? "Y" : "N"), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 842,
			"className" => "Model",
			"methodName" => "binary",
		]));
		#src/Model.hx:843: characters 3-8
		(Log::$trace)(\Std::string($_POST), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 843,
			"className" => "Model",
			"methodName" => "binary",
		]));
		#src/Model.hx:844: characters 15-48
		$s = Web::getPostData();
		$pData = strlen($s);
		#src/Model.hx:844: characters 3-49
		$pData1 = new Bytes($pData, new Container($s));
		#src/Model.hx:847: characters 3-8
		(Log::$trace)($pData1->length, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 847,
			"className" => "Model",
			"methodName" => "binary",
		]));
		#src/Model.hx:848: characters 3-39
		$s = new Serializer();
		#src/Model.hx:849: characters 3-39
		return $s->unserialize($pData1, Boot::getClass(DbQuery::class));
	}

	/**
	 * @param DbQuery $dbQuery
	 * 
	 * @return void
	 */
	public static function dispatch ($dbQuery) {
		#src/Model.hx:104: characters 3-52
		$param = $dbQuery->dbParams;
		#src/Model.hx:105: characters 3-8
		(Log::$trace)(($param === null ? "null" : $param->toString()), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 105,
			"className" => "Model",
			"methodName" => "dispatch",
		]));
		#src/Model.hx:106: characters 3-80
		$cl = \Type::resolveClass("model." . (\Std::string(($param->data["classPath"] ?? null))??'null'));
		#src/Model.hx:108: lines 108-112
		if ($cl === null) {
			#src/Model.hx:110: characters 4-9
			(Log::$trace)("model." . (\Std::string(($param->data["classPath"] ?? null))??'null') . " ???", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 110,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			#src/Model.hx:111: characters 22-98
			$_g = new StringMap();
			$value = " cannot find model." . (($param->data["classPath"] ?? null)??'null');
			$_g->data["invalid classPath"] = $value;
			#src/Model.hx:111: characters 4-99
			\S::sendErrors(null, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 111,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
		}
		#src/Model.hx:113: characters 3-61
		$staticMethods = \Type::getClassFields($cl);
		#src/Model.hx:114: lines 114-119
		if (\Lambda::has($staticMethods, ($param->data["action"] ?? null))) {
			#src/Model.hx:116: characters 4-9
			(Log::$trace)("calling static Method " . (\Std::string(($param->data["classPath"] ?? null))??'null') . "." . (\Std::string(($param->data["action"] ?? null))??'null'), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 116,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			#src/Model.hx:117: characters 4-72
			\Reflect::callMethod($cl, \Reflect::field($cl, ($param->data["action"] ?? null)), \Array_hx::wrap([$dbQuery]));
			#src/Model.hx:118: characters 4-10
			return;
		}
		#src/Model.hx:121: characters 3-58
		$iFields = \Type::getInstanceFields($cl);
		#src/Model.hx:123: lines 123-133
		if (\Lambda::has($iFields, ($param->data["action"] ?? null))) {
			#src/Model.hx:125: characters 4-9
			(Log::$trace)("creating instance of " . (\Std::string(($param->data["classPath"] ?? null))??'null'), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 125,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			#src/Model.hx:126: characters 4-54
			$cInst = \Type::createInstance($cl, \Array_hx::wrap([$param]));
			#src/Model.hx:127: characters 4-71
			\Reflect::callMethod($cInst, \Reflect::field($cInst, ($param->data["action"] ?? null)), new \Array_hx());
		} else {
			#src/Model.hx:131: characters 4-9
			(Log::$trace)("Method " . (\Std::string(($param->data["classPath"] ?? null))??'null') . "." . (\Std::string(($param->data["action"] ?? null))??'null') . " does not exist!", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 131,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
			#src/Model.hx:132: characters 22-113
			$_g = new StringMap();
			$value = "Method " . (\Std::string(($param->data["classPath"] ?? null))??'null') . "." . (\Std::string(($param->data["action"] ?? null))??'null') . " does not exist!";
			$_g->data["invalid method"] = $value;
			#src/Model.hx:132: characters 4-114
			\S::sendErrors(null, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 132,
				"className" => "Model",
				"methodName" => "dispatch",
			]));
		}
	}

	/**
	 * @param \PDOStatement $stmt
	 * @param mixed $values
	 * 
	 * @return bool
	 */
	public static function paramExecute ($stmt, $values = null) {
		#src/Model.hx:139: characters 3-8
		(Log::$trace)($values, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 139,
			"className" => "Model",
			"methodName" => "paramExecute",
		]));
		#src/Model.hx:141: lines 141-145
		if (!$stmt->execute($values)) {
			#src/Model.hx:143: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 143,
				"className" => "Model",
				"methodName" => "paramExecute",
			]));
			#src/Model.hx:144: characters 4-16
			return false;
		}
		#src/Model.hx:146: characters 3-14
		return true;
	}

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param = null) {
		#src/Model.hx:854: characters 3-21
		$this->param = $param;
		#src/Model.hx:855: characters 3-8
		(Log::$trace)(($param === null ? "null" : $param->toString()), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 855,
			"className" => "Model",
			"methodName" => "new",
		]));
		#src/Model.hx:856: characters 3-19
		$this->id = ($param->data["id"] ?? null);
		#src/Model.hx:857: characters 3-8
		(Log::$trace)($this->id, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 857,
			"className" => "Model",
			"methodName" => "new",
		]));
		#src/Model.hx:858: characters 3-31
		$this->action = ($param->data["action"] ?? null);
		#src/Model.hx:860: characters 3-12
		$this->data = new HxAnon();
		#src/Model.hx:861: characters 15-32
		$this1 = [];
		#src/Model.hx:861: characters 3-32
		$this->data->rows = $this1;
		#src/Model.hx:862: characters 3-24
		$this->dbData = new DbData();
		#src/Model.hx:863: characters 3-57
		$this->dbData->dataInfo = \Util::copyStringMap($this->dbData->dataInfo, $param);
		#src/Model.hx:864: characters 3-17
		$this->filterSql = "";
		#src/Model.hx:865: characters 3-29
		$this->filterValues = new \Array_hx();
		#src/Model.hx:866: characters 3-26
		$this->setValues = new \Array_hx();
		#src/Model.hx:867: characters 3-28
		$this->queryFields = $this->setSql = "";
		#src/Model.hx:868: characters 3-27
		$this->tableNames = new \Array_hx();
	}

	/**
	 * @param mixed $filters
	 * 
	 * @return string
	 */
	public function buildCond ($filters) {
		#src/Model.hx:664: lines 664-741
		$_gthis = $this;
		#src/Model.hx:666: lines 666-669
		if ($filters === null) {
			#src/Model.hx:668: characters 4-20
			return $this->filterSql;
		}
		#src/Model.hx:671: characters 3-102
		$filters1 = Lib::hashOfAssociativeArray(((array)($filters)));
		#src/Model.hx:672: characters 3-8
		(Log::$trace)(($filters1 === null ? "null" : $filters1->toString()), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 672,
			"className" => "Model",
			"methodName" => "buildCond",
		]));
		#src/Model.hx:673: characters 3-40
		$fBuf = new \StringBuf();
		#src/Model.hx:674: characters 3-25
		$first = true;
		#src/Model.hx:675: characters 3-15
		$this->filterValues = new \Array_hx();
		#src/Model.hx:676: characters 22-29
		$_g = new MapKeyValueIterator($filters1);
		#src/Model.hx:676: lines 676-738
		while ($_g->hasNext()) {
			#src/Model.hx:676: characters 22-29
			$_g1 = $_g->next();
			$key = $_g1->key;
			$val = $_g1->value;
			#src/Model.hx:678: characters 4-30
			$keys = HxString::split($key, ".");
			#src/Model.hx:679: lines 679-682
			if ($keys->length > 2) {
				#src/Model.hx:681: characters 18-24
				$tmp = $this->dbData;
				#src/Model.hx:681: characters 25-60
				$_g2 = new StringMap();
				$value = \S::errorInfo($key, new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 681,
					"className" => "Model",
					"methodName" => "buildCond",
				]));
				$_g2->data["invalidFilter"] = $value;
				#src/Model.hx:681: characters 5-61
				\S::sendErrors($tmp, $_g2, new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 681,
					"className" => "Model",
					"methodName" => "buildCond",
				]));
			}
			#src/Model.hx:684: characters 4-46
			$values = HxString::split($val, "|");
			#src/Model.hx:685: characters 21-35
			if ($values->length > 0) {
				$values->length--;
			}
			#src/Model.hx:685: characters 4-36
			$how = array_shift($values->arr);
			#src/Model.hx:686: characters 4-9
			(Log::$trace)($how, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 686,
				"className" => "Model",
				"methodName" => "buildCond",
			]));
			#src/Model.hx:687: lines 687-690
			if ($first) {
				#src/Model.hx:688: characters 5-25
				$fBuf->add(" WHERE ");
			} else {
				#src/Model.hx:690: characters 5-22
				$fBuf->add(" AND ");
			}
			#src/Model.hx:691: characters 4-9
			$first = false;
			#src/Model.hx:693: lines 693-698
			if ($keys->length === 2) {
				#src/Model.hx:695: characters 5-62
				$fBuf->add("" . ($this->quoteIdent(($keys->arr[0] ?? null))??'null') . "." . ($this->quoteIdent(($keys->arr[1] ?? null))??'null'));
			} else {
				#src/Model.hx:698: characters 5-30
				$fBuf->add($this->quoteIdent($key));
			}
			#src/Model.hx:699: characters 11-28
			$__hx__switch = (mb_strtoupper($how));
			if ($__hx__switch === "BETWEEN") {
				#src/Model.hx:702: lines 702-703
				if (($values->length !== 2) && \Lambda::foreach($values, function ($s) {
					#src/Model.hx:702: characters 76-88
					$v = $s;
					if (($v !== null) && !Boot::equal($v, 0)) {
						return $v !== "";
					} else {
						return false;
					}
				})) {
					#src/Model.hx:703: characters 7-79
					\S::exit(new HxAnon(["error" => "BETWEEN needs 2 values - got only:" . ($values->join(",")??'null')]));
				}
				#src/Model.hx:705: characters 6-34
				$fBuf->add(" BETWEEN ? AND ?");
				#src/Model.hx:706: characters 6-45
				$_this = $this->filterValues;
				#src/Model.hx:706: characters 25-32
				$keys1 = ($keys->arr[0] ?? null);
				#src/Model.hx:706: characters 34-43
				$values1 = ($values->arr[0] ?? null);
				#src/Model.hx:706: characters 6-45
				$_this->arr[$_this->length++] = \Array_hx::wrap([
					$keys1,
					$values1,
				]);
				#src/Model.hx:707: characters 6-45
				$_this1 = $this->filterValues;
				#src/Model.hx:707: characters 25-32
				$keys2 = ($keys->arr[0] ?? null);
				#src/Model.hx:707: characters 34-43
				$values2 = ($values->arr[1] ?? null);
				#src/Model.hx:707: characters 6-45
				$_this1->arr[$_this1->length++] = \Array_hx::wrap([
					$keys2,
					$values2,
				]);
			} else if ($__hx__switch === "IN") {
				#src/Model.hx:709: characters 6-22
				$fBuf->add(" IN(");
				#src/Model.hx:710: lines 710-713
				$result = [];
				$data = $values->arr;
				$_g_current = 0;
				$_g_length = count($data);
				$_g_data = $data;
				while ($_g_current < $_g_length) {
					$item = $_g_data[$_g_current++];
					#src/Model.hx:711: characters 7-51
					$_this2 = $_gthis->filterValues;
					#src/Model.hx:711: characters 26-33
					$keys3 = ($keys->arr[0] ?? null);
					#src/Model.hx:711: characters 35-49
					if ($values->length > 0) {
						$values->length--;
					}
					#src/Model.hx:711: characters 7-51
					$x = \Array_hx::wrap([
						$keys3,
						array_shift($values->arr),
					]);
					$_this2->arr[$_this2->length++] = $x;
					#src/Model.hx:710: lines 710-713
					$result[] = "?";
				}
				$fBuf->add(\Array_hx::wrap($result)->join(","));
				#src/Model.hx:714: characters 6-19
				$fBuf->add(")");
			} else if ($__hx__switch === "LIKE") {
				#src/Model.hx:716: characters 6-25
				$fBuf->add(" LIKE ?");
				#src/Model.hx:717: characters 6-45
				$_this3 = $this->filterValues;
				#src/Model.hx:717: characters 25-32
				$keys4 = ($keys->arr[0] ?? null);
				#src/Model.hx:717: characters 34-43
				$values3 = ($values->arr[0] ?? null);
				#src/Model.hx:717: characters 6-45
				$_this3->arr[$_this3->length++] = \Array_hx::wrap([
					$keys4,
					$values3,
				]);
			} else {
				#src/Model.hx:719: lines 719-727
				if ((new \EReg("^(<|>)", ""))->match(($values->arr[0] ?? null))) {
					#src/Model.hx:721: characters 7-31
					$eR = new \EReg("^(<|>)", "");
					#src/Model.hx:722: characters 7-26
					$eR->match(($values->arr[0] ?? null));
					#src/Model.hx:723: characters 7-51
					$val1 = \Std::parseFloat($eR->matchedRight());
					#src/Model.hx:724: characters 7-36
					$fBuf->add(($eR->matched(0)??'null') . "?");
					#src/Model.hx:725: characters 7-39
					$_this4 = $this->filterValues;
					#src/Model.hx:725: characters 26-33
					$keys5 = ($keys->arr[0] ?? null);
					#src/Model.hx:725: characters 7-39
					$_this4->arr[$_this4->length++] = \Array_hx::wrap([
						$keys5,
						$val1,
					]);
					#src/Model.hx:726: characters 7-15
					continue;
				}
				#src/Model.hx:729: lines 729-736
				if (($values->arr[0] ?? null) === "NULL") {
					#src/Model.hx:730: characters 7-27
					$fBuf->add(" IS NULL");
				} else {
					#src/Model.hx:732: characters 7-23
					$fBuf->add(" = ?");
					#src/Model.hx:733: characters 7-12
					(Log::$trace)(($how??'null') . (":" . ($val??'null') . ":") . (($values->arr[0] ?? null)??'null'), new HxAnon([
						"fileName" => "src/Model.hx",
						"lineNumber" => 733,
						"className" => "Model",
						"methodName" => "buildCond",
					]));
					#src/Model.hx:734: characters 7-39
					$_this5 = $this->filterValues;
					#src/Model.hx:734: characters 26-33
					$keys6 = ($keys->arr[0] ?? null);
					#src/Model.hx:734: characters 7-39
					$_this5->arr[$_this5->length++] = \Array_hx::wrap([
						$keys6,
						$val,
					]);
				}
			}
		}
		#src/Model.hx:739: characters 3-12
		$this->filterSql = $fBuf->b;
		#src/Model.hx:740: characters 3-19
		return $this->filterSql;
	}

	/**
	 * @param string $filter
	 * 
	 * @return string
	 */
	public function buildCond1 ($filter) {
		#src/Model.hx:587: lines 587-662
		$_gthis = $this;
		#src/Model.hx:589: lines 589-592
		if ($filter === null) {
			#src/Model.hx:591: characters 4-20
			return $this->filterSql;
		}
		#src/Model.hx:593: characters 3-50
		$filters = HxString::split($filter, ",");
		#src/Model.hx:594: characters 3-40
		$fBuf = new \StringBuf();
		#src/Model.hx:595: characters 3-25
		$first = true;
		#src/Model.hx:596: characters 3-15
		$this->filterValues = new \Array_hx();
		#src/Model.hx:597: lines 597-659
		$_g = 0;
		while ($_g < $filters->length) {
			#src/Model.hx:597: characters 8-9
			$w = ($filters->arr[$_g] ?? null);
			#src/Model.hx:597: lines 597-659
			++$_g;
			#src/Model.hx:601: characters 4-43
			$wData = HxDynamicStr::wrap($w)->split("|");
			#src/Model.hx:602: characters 4-35
			$dots = HxString::split(($wData->arr[0] ?? null), ".");
			#src/Model.hx:603: lines 603-606
			if ($dots->length > 2) {
				#src/Model.hx:605: characters 18-24
				$tmp = $this->dbData;
				#src/Model.hx:605: characters 25-65
				$_g1 = new StringMap();
				$value = \S::errorInfo(($wData->arr[0] ?? null), new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 605,
					"className" => "Model",
					"methodName" => "buildCond1",
				]));
				$_g1->data["invalidFilter"] = $value;
				#src/Model.hx:605: characters 5-66
				\S::sendErrors($tmp, $_g1, new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 605,
					"className" => "Model",
					"methodName" => "buildCond1",
				]));
			}
			#src/Model.hx:608: characters 4-46
			$values = $wData->slice(2);
			#src/Model.hx:610: lines 610-613
			if ($first) {
				#src/Model.hx:611: characters 5-25
				$fBuf->add(" WHERE ");
			} else {
				#src/Model.hx:613: characters 5-22
				$fBuf->add(" AND ");
			}
			#src/Model.hx:614: characters 4-9
			$first = false;
			#src/Model.hx:616: lines 616-621
			if ($dots->length === 2) {
				#src/Model.hx:618: characters 5-62
				$fBuf->add("" . ($this->quoteIdent(($dots->arr[0] ?? null))??'null') . "." . ($this->quoteIdent(($dots->arr[1] ?? null))??'null'));
			} else {
				#src/Model.hx:621: characters 5-35
				$fBuf->add($this->quoteIdent(($wData->arr[0] ?? null)));
			}
			#src/Model.hx:622: characters 11-33
			$__hx__switch = (mb_strtoupper(($wData->arr[1] ?? null)));
			if ($__hx__switch === "BETWEEN") {
				#src/Model.hx:625: lines 625-626
				if (($values->length !== 2) && \Lambda::foreach($values, function ($s) {
					#src/Model.hx:625: characters 76-88
					$v = $s;
					if (($v !== null) && !Boot::equal($v, 0)) {
						return $v !== "";
					} else {
						return false;
					}
				})) {
					#src/Model.hx:626: characters 7-79
					\S::exit(new HxAnon(["error" => "BETWEEN needs 2 values - got only:" . ($values->join(",")??'null')]));
				}
				#src/Model.hx:628: characters 6-34
				$fBuf->add(" BETWEEN ? AND ?");
				#src/Model.hx:629: characters 6-45
				$_this = $this->filterValues;
				#src/Model.hx:629: characters 25-32
				$dots1 = ($dots->arr[0] ?? null);
				#src/Model.hx:629: characters 34-43
				$values1 = ($values->arr[0] ?? null);
				#src/Model.hx:629: characters 6-45
				$_this->arr[$_this->length++] = \Array_hx::wrap([
					$dots1,
					$values1,
				]);
				#src/Model.hx:630: characters 6-45
				$_this1 = $this->filterValues;
				#src/Model.hx:630: characters 25-32
				$dots2 = ($dots->arr[0] ?? null);
				#src/Model.hx:630: characters 34-43
				$values2 = ($values->arr[1] ?? null);
				#src/Model.hx:630: characters 6-45
				$_this1->arr[$_this1->length++] = \Array_hx::wrap([
					$dots2,
					$values2,
				]);
			} else if ($__hx__switch === "IN") {
				#src/Model.hx:632: characters 6-22
				$fBuf->add(" IN(");
				#src/Model.hx:633: lines 633-636
				$result = [];
				$data = $values->arr;
				$_g_current = 0;
				$_g_length = count($data);
				$_g_data = $data;
				while ($_g_current < $_g_length) {
					$item = $_g_data[$_g_current++];
					#src/Model.hx:634: characters 7-51
					$_this2 = $_gthis->filterValues;
					#src/Model.hx:634: characters 26-33
					$dots3 = ($dots->arr[0] ?? null);
					#src/Model.hx:634: characters 35-49
					if ($values->length > 0) {
						$values->length--;
					}
					#src/Model.hx:634: characters 7-51
					$x = \Array_hx::wrap([
						$dots3,
						array_shift($values->arr),
					]);
					$_this2->arr[$_this2->length++] = $x;
					#src/Model.hx:633: lines 633-636
					$result[] = "?";
				}
				$fBuf->add(\Array_hx::wrap($result)->join(","));
				#src/Model.hx:637: characters 6-19
				$fBuf->add(")");
			} else if ($__hx__switch === "LIKE") {
				#src/Model.hx:639: characters 6-25
				$fBuf->add(" LIKE ?");
				#src/Model.hx:640: characters 6-44
				$_this3 = $this->filterValues;
				#src/Model.hx:640: characters 25-32
				$dots4 = ($dots->arr[0] ?? null);
				#src/Model.hx:640: characters 34-42
				$wData1 = ($wData->arr[2] ?? null);
				#src/Model.hx:640: characters 6-44
				$_this3->arr[$_this3->length++] = \Array_hx::wrap([
					$dots4,
					$wData1,
				]);
			} else {
				#src/Model.hx:642: lines 642-650
				if ((new \EReg("^(<|>)", ""))->match(($wData->arr[1] ?? null))) {
					#src/Model.hx:644: characters 7-31
					$eR = new \EReg("^(<|>)", "");
					#src/Model.hx:645: characters 7-25
					$eR->match(($wData->arr[1] ?? null));
					#src/Model.hx:646: characters 7-51
					$val = \Std::parseFloat($eR->matchedRight());
					#src/Model.hx:647: characters 7-36
					$fBuf->add(($eR->matched(0)??'null') . "?");
					#src/Model.hx:648: characters 7-39
					$_this4 = $this->filterValues;
					#src/Model.hx:648: characters 26-33
					$dots5 = ($dots->arr[0] ?? null);
					#src/Model.hx:648: characters 7-39
					$_this4->arr[$_this4->length++] = \Array_hx::wrap([
						$dots5,
						$val,
					]);
					#src/Model.hx:649: characters 7-15
					continue;
				}
				#src/Model.hx:652: lines 652-657
				if (($wData->arr[1] ?? null) === "NULL") {
					#src/Model.hx:653: characters 7-27
					$fBuf->add(" IS NULL");
				} else {
					#src/Model.hx:655: characters 7-23
					$fBuf->add(" = ?");
					#src/Model.hx:656: characters 7-44
					$_this5 = $this->filterValues;
					#src/Model.hx:656: characters 26-33
					$dots6 = ($dots->arr[0] ?? null);
					#src/Model.hx:656: characters 34-42
					$wData2 = ($wData->arr[1] ?? null);
					#src/Model.hx:656: characters 7-44
					$_this5->arr[$_this5->length++] = \Array_hx::wrap([
						$dots6,
						$wData2,
					]);
				}
			}
		}
		#src/Model.hx:660: characters 3-12
		$this->filterSql = $fBuf->b;
		#src/Model.hx:661: characters 3-19
		return $this->filterSql;
	}

	/**
	 * @param string $name
	 * @param StringMap $tParam
	 * 
	 * @return \Array_hx
	 */
	public function buildFieldsSql ($name, $tParam) {
		#src/Model.hx:969: lines 969-978
		$_gthis = $this;
		#src/Model.hx:971: characters 3-80
		$prefix = (array_key_exists("alias", $tParam->data) ? ($this->quoteIdent(($tParam->data["alias"] ?? null))??'null') . "." : "");
		#src/Model.hx:972: characters 3-8
		(Log::$trace)($prefix, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 972,
			"className" => "Model",
			"methodName" => "buildFieldsSql",
		]));
		#src/Model.hx:973: lines 973-976
		if (array_key_exists("fields", $tParam->data)) {
			#src/Model.hx:975: characters 4-102
			return HxDynamicStr::wrap(($tParam->data["fields"] ?? null))->split(",")->map(function ($field) use (&$prefix, &$_gthis) {
				#src/Model.hx:975: characters 63-101
				return "" . ($prefix??'null') . ($_gthis->quoteIdent($field)??'null');
			});
		}
		#src/Model.hx:977: characters 10-89
		$_this = \S::tableFields($name);
		$result = [];
		$data = $_this->arr;
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = ("" . ($prefix??'null') . ($_gthis->quoteIdent($item)??'null'));
		}
		return \Array_hx::wrap($result);
	}

	/**
	 * @param string $groupParam
	 * @param \StringBuf $sqlBf
	 * 
	 * @return bool
	 */
	public function buildGroup ($groupParam, $sqlBf) {
		#src/Model.hx:743: lines 743-752
		$_gthis = $this;
		#src/Model.hx:746: characters 3-52
		$fields = HxString::split($groupParam, ",");
		#src/Model.hx:747: lines 747-748
		if ($fields->length === 0) {
			#src/Model.hx:748: characters 4-16
			return false;
		}
		#src/Model.hx:749: characters 3-26
		$sqlBf->add(" GROUP BY ");
		#src/Model.hx:750: characters 13-65
		$result = [];
		$data = $fields->arr;
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = $_gthis->quoteIdent($item);
		}
		#src/Model.hx:750: characters 3-76
		$sqlBf->add(\Array_hx::wrap($result)->join(","));
		#src/Model.hx:751: characters 3-14
		return true;
	}

	/**
	 * @return string
	 */
	public function buildJoin () {
		#src/Model.hx:175: lines 175-176
		if ($this->joinSql !== null) {
			#src/Model.hx:176: characters 4-18
			return $this->joinSql;
		}
		#src/Model.hx:177: characters 3-41
		$sqlBf = new \StringBuf();
		#src/Model.hx:178: lines 178-229
		$_g = 0;
		$_g1 = $this->tableNames;
		while ($_g < $_g1->length) {
			#src/Model.hx:178: characters 8-13
			$table = ($_g1->arr[$_g] ?? null);
			#src/Model.hx:178: lines 178-229
			++$_g;
			#src/Model.hx:180: characters 4-57
			$tRel = ($this->dataSource->data[$table] ?? null);
			#src/Model.hx:181: characters 4-80
			$alias = (array_key_exists("alias", $tRel->data) ? $this->quoteIdent(($tRel->data["alias"] ?? null)) : "");
			#src/Model.hx:182: characters 4-69
			$jCond = (array_key_exists("jCond", $tRel->data) ? ($tRel->data["jCond"] ?? null) : null);
			#src/Model.hx:183: lines 183-228
			if ($jCond !== null) {
				#src/Model.hx:185: lines 185-213
				if ((new \EReg("\\.", ""))->match($jCond)) {
					#src/Model.hx:187: characters 6-36
					$jParts = HxString::split($jCond, "=");
					#src/Model.hx:188: characters 6-11
					(Log::$trace)($jParts->join("="), new HxAnon([
						"fileName" => "src/Model.hx",
						"lineNumber" => 188,
						"className" => "Model",
						"methodName" => "buildJoin",
					]));
					#src/Model.hx:189: characters 6-11
					(Log::$trace)(($jParts->arr[0] ?? null), new HxAnon([
						"fileName" => "src/Model.hx",
						"lineNumber" => 189,
						"className" => "Model",
						"methodName" => "buildJoin",
					]));
					#src/Model.hx:190: characters 6-11
					(Log::$trace)(($jParts->arr[1] ?? null), new HxAnon([
						"fileName" => "src/Model.hx",
						"lineNumber" => 190,
						"className" => "Model",
						"methodName" => "buildJoin",
					]));
					#src/Model.hx:191: lines 191-212
					if (HxString::indexOf(($jParts->arr[0] ?? null), ".") > -1) {
						#src/Model.hx:193: characters 7-39
						$keys = HxString::split(($jParts->arr[0] ?? null), ".");
						#src/Model.hx:194: lines 194-197
						if ($keys->length > 2) {
							#src/Model.hx:196: characters 21-27
							$tmp = $this->dbData;
							#src/Model.hx:196: characters 28-54
							$_g2 = new StringMap();
							$_g2->data["invalidJoinCond"] = $jCond;
							#src/Model.hx:196: characters 8-55
							\S::sendErrors($tmp, $_g2, new HxAnon([
								"fileName" => "src/Model.hx",
								"lineNumber" => 196,
								"className" => "Model",
								"methodName" => "buildJoin",
							]));
						}
						#src/Model.hx:198: lines 198-200
						if ($keys->length === 2) {
							#src/Model.hx:199: characters 8-64
							$jCond = "" . ($this->quoteIdent(($keys->arr[0] ?? null))??'null') . "." . (($keys->arr[1] ?? null)??'null') . "=" . (($jParts->arr[1] ?? null)??'null');
						}
					} else {
						#src/Model.hx:203: characters 7-39
						$keys1 = HxString::split(($jParts->arr[1] ?? null), ".");
						#src/Model.hx:205: lines 205-208
						if ($keys1->length > 2) {
							#src/Model.hx:207: characters 21-27
							$tmp1 = $this->dbData;
							#src/Model.hx:207: characters 28-54
							$_g3 = new StringMap();
							$_g3->data["invalidJoinCond"] = $jCond;
							#src/Model.hx:207: characters 8-55
							\S::sendErrors($tmp1, $_g3, new HxAnon([
								"fileName" => "src/Model.hx",
								"lineNumber" => 207,
								"className" => "Model",
								"methodName" => "buildJoin",
							]));
						}
						#src/Model.hx:209: lines 209-211
						if ($keys1->length === 2) {
							#src/Model.hx:210: characters 8-64
							$jCond = "" . (($jParts->arr[0] ?? null)??'null') . "=" . ($this->quoteIdent(($keys1->arr[0] ?? null))??'null') . "." . (($keys1->arr[1] ?? null)??'null');
						}
					}
				}
				#src/Model.hx:214: lines 214-222
				$jType = null;
				#src/Model.hx:214: characters 31-48
				$_g4 = ($tRel->data["jType"] ?? null);
				#src/Model.hx:214: lines 214-221
				if ($_g4 === null) {
					#src/Model.hx:214: lines 214-222
					$jType = "INNER";
				} else {
					#src/Model.hx:214: characters 31-48
					if ($_g4 === "LEFT") {
						#src/Model.hx:214: lines 214-222
						$jType = "LEFT";
					} else if ($_g4 === "RIGHT") {
						$jType = "RIGHT";
					} else {
						$jType = "INNER";
					}
				}
				#src/Model.hx:223: characters 5-68
				$sqlBf->add("" . ($jType??'null') . " JOIN " . ($this->quoteIdent($table)??'null') . " " . ($alias??'null') . " ON " . ($jCond??'null') . " ");
			} else {
				#src/Model.hx:227: characters 5-46
				$sqlBf->add("" . ($this->quoteIdent($table)??'null') . " " . ($alias??'null') . " ");
			}
		}
		#src/Model.hx:230: characters 3-29
		$this->joinSql = $sqlBf->b;
		#src/Model.hx:231: characters 3-17
		return $this->joinSql;
	}

	/**
	 * @param string $limitParam
	 * @param \StringBuf $sqlBf
	 * 
	 * @return void
	 */
	public function buildLimit ($limitParam, $sqlBf) {
		#src/Model.hx:798: lines 798-799
		$tmp = null;
		if (HxString::indexOf($limitParam, ",") > -1) {
			#src/Model.hx:798: characters 57-129
			$_this = HxString::split($limitParam, ",");
			$result = [];
			$data = $_this->arr;
			$_g_current = 0;
			$_g_length = count($data);
			$_g_data = $data;
			while ($_g_current < $_g_length) {
				$item = $_g_data[$_g_current++];
				$result[] = \Std::parseInt($item);
			}
			#src/Model.hx:798: lines 798-799
			$tmp = \Array_hx::wrap($result)->join(",");
		} else {
			$tmp = \Std::string(\Std::parseInt($limitParam));
		}
		$sqlBf->add(" LIMIT " . ($tmp??'null'));
	}

	/**
	 * @param string $offsetParam
	 * @param \StringBuf $sqlBf
	 * 
	 * @return void
	 */
	public function buildOffset ($offsetParam, $sqlBf) {
		#src/Model.hx:804: characters 3-36
		$sqlBf->add(" OFFSET " . ($offsetParam??'null'));
	}

	/**
	 * @param string $orderParam
	 * @param \StringBuf $sqlBf
	 * 
	 * @return bool
	 */
	public function buildOrder ($orderParam, $sqlBf) {
		#src/Model.hx:754: lines 754-766
		$_gthis = $this;
		#src/Model.hx:756: characters 3-52
		$fields = HxString::split($orderParam, ",");
		#src/Model.hx:757: lines 757-758
		if ($fields->length === 0) {
			#src/Model.hx:758: characters 4-16
			return false;
		}
		#src/Model.hx:759: characters 3-26
		$sqlBf->add(" ORDER BY ");
		#src/Model.hx:760: lines 760-764
		$result = [];
		$data = $fields->arr;
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			#src/Model.hx:762: characters 4-39
			$g = HxString::split($item, "|");
			#src/Model.hx:760: lines 760-764
			$result[] = (($_gthis->quoteIdent(($g->arr[0] ?? null))??'null') . (((($g->length === 2) && (($g->arr[1] ?? null) === "DESC") ? " DESC" : ""))??'null'));
		}
		$sqlBf->add(\Array_hx::wrap($result)->join(","));
		#src/Model.hx:765: characters 3-14
		return true;
	}

	/**
	 * @param string $tableName
	 * @param mixed $data
	 * @param string $alias
	 * 
	 * @return string
	 */
	public function buildSet ($tableName, $data, $alias = null) {
		#src/Model.hx:776: characters 24-45
		$alias = ($alias !== null ? "" . ($this->quoteIdent($alias)??'null') . "." : "");
		#src/Model.hx:777: characters 3-60
		$defaults = \S::columnDefaults($tableName);
		#src/Model.hx:778: characters 3-8
		(Log::$trace)(($defaults->arr[0] ?? null), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 778,
			"className" => "Model",
			"methodName" => "buildSet",
		]));
		#src/Model.hx:779: characters 3-39
		$set = new \Array_hx();
		#src/Model.hx:780: characters 3-8
		(Log::$trace)(\Reflect::fields($data)->join(","), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 780,
			"className" => "Model",
			"methodName" => "buildSet",
		]));
		#src/Model.hx:781: lines 781-791
		$_g = 0;
		while ($_g < $defaults->length) {
			#src/Model.hx:781: characters 7-10
			$col = ($defaults->arr[$_g] ?? null);
			#src/Model.hx:781: lines 781-791
			++$_g;
			#src/Model.hx:783: lines 783-784
			if ($col->column_name === "creation_date") {
				#src/Model.hx:784: characters 5-13
				continue;
			}
			#src/Model.hx:785: characters 4-57
			$val = \Reflect::field($data, $col->column_name);
			#src/Model.hx:786: lines 786-787
			if ($val === null) {
				#src/Model.hx:787: characters 5-13
				continue;
			}
			#src/Model.hx:788: characters 4-56
			$x = "" . ($alias??'null') . ($this->quoteIdent($col->column_name)??'null') . "=?";
			$set->arr[$set->length++] = $x;
			#src/Model.hx:789: characters 4-9
			(Log::$trace)("" . ($col->column_name??'null') . " " . ($val??'null') . " / default:" . ($col->column_default??'null'), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 789,
				"className" => "Model",
				"methodName" => "buildSet",
			]));
			#src/Model.hx:790: characters 4-52
			$_this = $this->setValues;
			$_this->arr[$_this->length++] = ($val === null ? $col->column_default : $val);
		}
		#src/Model.hx:792: characters 3-8
		(Log::$trace)("SET " . ($set->join(",")??'null') . " ", new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 792,
			"className" => "Model",
			"methodName" => "buildSet",
		]));
		#src/Model.hx:793: characters 3-33
		return "SET " . ($set->join(",")??'null') . " ";
	}

	/**
	 * @param mixed $data
	 * @param string $alias
	 * 
	 * @return string
	 */
	public function buildSetWithDefaults ($data, $alias) {
		#src/Model.hx:770: characters 3-8
		(Log::$trace)($alias, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 770,
			"className" => "Model",
			"methodName" => "buildSetWithDefaults",
		]));
		#src/Model.hx:771: characters 3-15
		return $alias;
	}

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function buildValues ($data) {
		#src/Model.hx:983: lines 983-987
		$_g = 0;
		$_g1 = $this->fieldNames;
		while ($_g < $_g1->length) {
			#src/Model.hx:983: characters 7-10
			$key = ($_g1->arr[$_g] ?? null);
			#src/Model.hx:983: lines 983-987
			++$_g;
			#src/Model.hx:985: characters 4-45
			$val = \Reflect::field($data, $key);
			#src/Model.hx:986: characters 4-42
			$_this = $this->setValues;
			$_this->arr[$_this->length++] = ($val === "" ? "DEFAULT" : $val);
		}
	}

	/**
	 * @return int
	 */
	public function count () {
		#src/Model.hx:151: characters 3-41
		$sqlBf = new \StringBuf();
		#src/Model.hx:152: characters 3-46
		$sqlBf->add("SELECT COUNT(*) AS count FROM ");
		#src/Model.hx:154: lines 154-163
		if ($this->tableNames->length > 1) {
			#src/Model.hx:156: characters 4-26
			$sqlBf->add($this->buildJoin());
		} else {
			#src/Model.hx:160: characters 4-9
			(Log::$trace)($this->tableNames, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 160,
				"className" => "Model",
				"methodName" => "count",
			]));
			#src/Model.hx:161: characters 4-9
			(Log::$trace)("" . (($this->tableNames->arr[0] ?? null)??'null') . " ", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 161,
				"className" => "Model",
				"methodName" => "count",
			]));
			#src/Model.hx:162: characters 4-34
			$sqlBf->add("" . (($this->tableNames->arr[0] ?? null)??'null') . " ");
		}
		#src/Model.hx:164: lines 164-167
		if ($this->filterSql !== null) {
			#src/Model.hx:166: characters 4-24
			$sqlBf->add($this->filterSql);
		}
		#src/Model.hx:168: characters 3-51
		$res = $this->execute($sqlBf->b);
		#src/Model.hx:169: characters 10-57
		return (Lib::hashOfAssociativeArray($res[0])->data["count"] ?? null);
	}

	/**
	 * @return mixed
	 */
	public function create () {
		#src/Model.hx:565: characters 3-41
		$sqlBf = new \StringBuf();
		#src/Model.hx:566: characters 3-8
		(Log::$trace)($this->queryFields, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 566,
			"className" => "Model",
			"methodName" => "create",
		]));
		#src/Model.hx:567: characters 3-28
		$sqlBf->add("INSERT INTO ");
		#src/Model.hx:568: lines 568-576
		if ($this->tableNames->length > 1) {
			#src/Model.hx:570: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:570: characters 25-83
			$_g = new StringMap();
			$value = \S::errorInfo("Create with join not supported!", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 570,
				"className" => "Model",
				"methodName" => "create",
			]));
			$_g->data["error"] = $value;
			#src/Model.hx:570: characters 4-84
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 570,
				"className" => "Model",
				"methodName" => "create",
			]));
			#src/Model.hx:571: characters 4-15
			return null;
		} else {
			#src/Model.hx:575: characters 4-46
			$sqlBf->add("" . ($this->quoteIdent(($this->tableNames->arr[0] ?? null))??'null') . " ");
		}
		#src/Model.hx:577: characters 3-59
		$sqlBf->add("(" . ($this->queryFields??'null') . ") VALUES" . ($this->setSql??'null') . " RETURNING id");
		#src/Model.hx:578: lines 578-581
		if ($this->filterSql !== null) {
			#src/Model.hx:580: characters 4-24
			$sqlBf->add($this->filterSql);
		}
		#src/Model.hx:582: characters 3-8
		(Log::$trace)($sqlBf->b, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 582,
			"className" => "Model",
			"methodName" => "create",
		]));
		#src/Model.hx:583: characters 3-35
		return $this->execute($sqlBf->b);
	}

	/**
	 * @return mixed
	 */
	public function delete () {
		#src/Model.hx:538: characters 3-41
		$sqlBf = new \StringBuf();
		#src/Model.hx:539: characters 3-8
		(Log::$trace)($this->queryFields, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 539,
			"className" => "Model",
			"methodName" => "delete",
		]));
		#src/Model.hx:540: characters 3-28
		$sqlBf->add("DELETE FROM ");
		#src/Model.hx:541: lines 541-549
		if ($this->tableNames->length > 1) {
			#src/Model.hx:543: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:543: characters 25-83
			$_g = new StringMap();
			$value = \S::errorInfo("Delete with join not supported!", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 543,
				"className" => "Model",
				"methodName" => "delete",
			]));
			$_g->data["error"] = $value;
			#src/Model.hx:543: characters 4-84
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 543,
				"className" => "Model",
				"methodName" => "delete",
			]));
			#src/Model.hx:544: characters 4-15
			return null;
		} else {
			#src/Model.hx:548: characters 4-46
			$sqlBf->add("" . ($this->quoteIdent(($this->tableNames->arr[0] ?? null))??'null') . " ");
		}
		#src/Model.hx:550: lines 550-558
		if ($this->filterSql !== null) {
			#src/Model.hx:552: characters 4-24
			$sqlBf->add($this->filterSql);
		} else {
			#src/Model.hx:556: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:556: characters 25-88
			$_g = new StringMap();
			$value = \S::errorInfo("Delete without Filter not supported!", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 556,
				"className" => "Model",
				"methodName" => "delete",
			]));
			$_g->data["error"] = $value;
			#src/Model.hx:556: characters 4-89
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 556,
				"className" => "Model",
				"methodName" => "delete",
			]));
			#src/Model.hx:557: characters 4-15
			return null;
		}
		#src/Model.hx:559: characters 3-8
		(Log::$trace)($sqlBf->b, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 559,
			"className" => "Model",
			"methodName" => "delete",
		]));
		#src/Model.hx:560: characters 3-35
		return $this->execute($sqlBf->b);
	}

	/**
	 * @return mixed
	 */
	public function doSelect () {
		#src/Model.hx:237: characters 3-41
		$sqlBf = new \StringBuf();
		#src/Model.hx:239: characters 3-41
		$sqlBf->add("SELECT " . ($this->queryFields??'null') . " FROM ");
		#src/Model.hx:240: lines 240-247
		if ($this->tableNames->length > 1) {
			#src/Model.hx:242: characters 4-22
			$sqlBf->add($this->joinSql);
		} else {
			#src/Model.hx:246: characters 4-34
			$sqlBf->add("" . (($this->tableNames->arr[0] ?? null)??'null') . " ");
		}
		#src/Model.hx:248: lines 248-251
		if ($this->filterSql !== null) {
			#src/Model.hx:250: characters 4-24
			$sqlBf->add($this->filterSql);
		}
		#src/Model.hx:252: characters 3-46
		$groupParam = ($this->param->data["group"] ?? null);
		#src/Model.hx:253: lines 253-254
		if ($groupParam !== null) {
			#src/Model.hx:254: characters 4-33
			$this->buildGroup($groupParam, $sqlBf);
		}
		#src/Model.hx:256: characters 3-41
		$order = ($this->param->data["order"] ?? null);
		#src/Model.hx:257: lines 257-260
		if ($order === null) {
			#src/Model.hx:259: characters 4-16
			$order = "id";
		}
		#src/Model.hx:261: lines 261-262
		if ($order !== null) {
			#src/Model.hx:262: characters 4-28
			$this->buildOrder($order, $sqlBf);
		}
		#src/Model.hx:263: characters 3-41
		$limit = ($this->param->data["limit"] ?? null);
		#src/Model.hx:264: characters 3-49
		$this->buildLimit(($limit === null ? "150" : $limit), $sqlBf);
		#src/Model.hx:265: lines 265-266
		if (($this->param->data["offset"] ?? null) !== null) {
			#src/Model.hx:266: characters 3-41
			$this->buildOffset(($this->param->data["offset"] ?? null), $sqlBf);
		}
		#src/Model.hx:268: characters 3-35
		return $this->execute($sqlBf->b);
	}

	/**
	 * @param string $sql
	 * 
	 * @return mixed
	 */
	public function execute ($sql) {
		#src/Model.hx:316: characters 3-8
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 316,
			"className" => "Model",
			"methodName" => "execute",
		]));
		#src/Model.hx:317: lines 317-318
		if ($this->setValues->length > 0) {
			#src/Model.hx:318: characters 3-8
			(Log::$trace)($this->setValues->join(","), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 318,
				"className" => "Model",
				"methodName" => "execute",
			]));
		}
		#src/Model.hx:319: lines 319-320
		if ($this->filterValues->length > 0) {
			#src/Model.hx:320: characters 3-8
			(Log::$trace)(($this->filterValues->arr[0] ?? null)->toString(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 320,
				"className" => "Model",
				"methodName" => "execute",
			]));
		}
		#src/Model.hx:321: characters 3-66
		$stmt = \S::$dbh->prepare($sql, ((array)(null)));
		#src/Model.hx:322: lines 322-327
		if (\S::$dbh->errorCode() !== "00000") {
			#src/Model.hx:324: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 324,
				"className" => "Model",
				"methodName" => "execute",
			]));
			#src/Model.hx:325: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:325: characters 25-49
			$_g = new StringMap();
			$_g->data["DB"] = Boot::getInstanceClosure($stmt, 'errorInfo');
			#src/Model.hx:325: characters 4-50
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 325,
				"className" => "Model",
				"methodName" => "execute",
			]));
			#src/Model.hx:326: characters 4-15
			return null;
		}
		#src/Model.hx:328: characters 3-29
		$bindTypes = "";
		#src/Model.hx:329: characters 3-38
		$values2bind = null;
		#src/Model.hx:332: characters 3-31
		$data = null;
		#src/Model.hx:333: characters 3-21
		$success = null;
		#src/Model.hx:334: characters 3-17
		$i = 0;
		#src/Model.hx:335: lines 335-348
		if ($this->setValues->length > 0) {
			#src/Model.hx:337: lines 337-347
			$_g = 0;
			$_g1 = $this->setValues;
			while ($_g < $_g1->length) {
				#src/Model.hx:337: characters 9-11
				$fV = ($_g1->arr[$_g] ?? null);
				#src/Model.hx:337: lines 337-347
				++$_g;
				#src/Model.hx:339: characters 5-34
				$type = \PDO::PARAM_STR;
				#src/Model.hx:340: characters 5-26
				$values2bind[$i++] = $fV;
				#src/Model.hx:342: lines 342-346
				if (!$stmt->bindValue($i, $fV, $type)) {
					#src/Model.hx:344: characters 6-11
					(Log::$trace)("ooops:" . (\Std::string($stmt->errorInfo())??'null'), new HxAnon([
						"fileName" => "src/Model.hx",
						"lineNumber" => 344,
						"className" => "Model",
						"methodName" => "execute",
					]));
					#src/Model.hx:345: characters 6-17
					exit(0);
				}
			}
		}
		#src/Model.hx:349: lines 349-362
		if ($this->filterValues->length > 0) {
			#src/Model.hx:351: lines 351-361
			$_g = 0;
			$_g1 = $this->filterValues;
			while ($_g < $_g1->length) {
				#src/Model.hx:351: characters 9-11
				$fV = ($_g1->arr[$_g] ?? null);
				#src/Model.hx:351: lines 351-361
				++$_g;
				#src/Model.hx:353: characters 5-34
				$type = \PDO::PARAM_STR;
				#src/Model.hx:354: characters 5-29
				$values2bind[$i++] = ($fV->arr[1] ?? null);
				#src/Model.hx:356: lines 356-360
				if (!$stmt->bindValue($i, ($fV->arr[1] ?? null), $type)) {
					#src/Model.hx:358: characters 6-11
					(Log::$trace)("ooops:" . (\Std::string($stmt->errorInfo())??'null'), new HxAnon([
						"fileName" => "src/Model.hx",
						"lineNumber" => 358,
						"className" => "Model",
						"methodName" => "execute",
					]));
					#src/Model.hx:359: characters 6-17
					exit(0);
				}
			}
		}
		#src/Model.hx:363: characters 3-8
		(Log::$trace)($values2bind, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 363,
			"className" => "Model",
			"methodName" => "execute",
		]));
		#src/Model.hx:364: lines 364-410
		if ($i > 0) {
			#src/Model.hx:366: characters 4-39
			$success = $stmt->execute($values2bind);
			#src/Model.hx:367: lines 367-371
			if (!$success) {
				#src/Model.hx:369: characters 5-10
				(Log::$trace)($stmt->errorInfo(), new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 369,
					"className" => "Model",
					"methodName" => "execute",
				]));
				#src/Model.hx:370: characters 18-24
				$tmp = $this->dbData;
				#src/Model.hx:370: characters 25-68
				$_g = new StringMap();
				$value = \S::errorInfo($stmt->errorInfo(), new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 370,
					"className" => "Model",
					"methodName" => "execute",
				]));
				$_g->data["execute"] = $value;
				#src/Model.hx:370: characters 5-69
				\S::sendErrors($tmp, $_g, new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 370,
					"className" => "Model",
					"methodName" => "execute",
				]));
			}
			#src/Model.hx:372: characters 4-58
			$this1 = $this->dbData->dataInfo;
			$v = \Std::string($stmt->rowCount());
			$this1->data["count"] = $v;
			#src/Model.hx:373: characters 4-9
			(Log::$trace)(">>" . ($this->action??'null') . "<<", new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 373,
				"className" => "Model",
				"methodName" => "execute",
			]));
			#src/Model.hx:374: lines 374-379
			if (($this->action === "update") || ($this->action === "delete")) {
				#src/Model.hx:377: characters 5-10
				(Log::$trace)("done", new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 377,
					"className" => "Model",
					"methodName" => "execute",
				]));
				#src/Model.hx:378: characters 5-23
				\S::sendInfo($this->dbData);
			}
			#src/Model.hx:380: lines 380-383
			if (\Std::parseInt(($this->dbData->dataInfo->data["count"] ?? null)) > 0) {
				#src/Model.hx:382: characters 5-42
				$data = $stmt->fetchAll(\PDO::FETCH_ASSOC);
			}
			#src/Model.hx:388: characters 4-16
			return $data;
		} else {
			#src/Model.hx:391: characters 27-44
			$this1 = [];
			#src/Model.hx:391: characters 4-45
			$success = $stmt->execute($this1);
			#src/Model.hx:392: lines 392-401
			if (!$success) {
				#src/Model.hx:394: characters 5-10
				(Log::$trace)($stmt->errorInfo(), new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 394,
					"className" => "Model",
					"methodName" => "execute",
				]));
				#src/Model.hx:395: lines 395-398
				$_g = new StringMap();
				$value = \S::errorInfo($stmt->errorInfo(), new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 396,
					"className" => "Model",
					"methodName" => "execute",
				]));
				$_g->data["error"] = $value;
				$_g->data["sql"] = $sql;
				$this->dbData->dataErrors = $_g;
				#src/Model.hx:399: characters 5-25
				\S::sendErrors($this->dbData, null, new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 399,
					"className" => "Model",
					"methodName" => "execute",
				]));
			}
			#src/Model.hx:403: characters 4-30
			$this->num_rows = $stmt->rowCount();
			#src/Model.hx:404: lines 404-407
			if ($this->num_rows > 0) {
				#src/Model.hx:406: characters 5-42
				$data = $stmt->fetchAll(\PDO::FETCH_ASSOC);
			}
			#src/Model.hx:408: characters 4-9
			(Log::$trace)(mb_substr(\Std::string($data), 0, 150), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 408,
				"className" => "Model",
				"methodName" => "execute",
			]));
			#src/Model.hx:409: characters 4-16
			return $data;
		}
	}

	/**
	 * creates PDOStatement and return all results from a query
	 * @param sql
	 * @param dbh
	 * @param req
	 * @param pos
	 * 
	 * @param string $sql
	 * @param \PDO $dbh
	 * @param string $req
	 * @param int $mode
	 * @param object $pos
	 * 
	 * @return mixed
	 */
	public function fetchAll ($sql, $dbh, $req = "", $mode = 2, $pos = null) {
		#src/Model.hx:451: lines 451-464
		if ($req === null) {
			$req = "";
		}
		if ($mode === null) {
			$mode = 2;
		}
		#src/Model.hx:452: characters 9-48
		$stmt = $dbh->query($sql);
		#src/Model.hx:453: lines 453-457
		if ($stmt === false) {
			#src/Model.hx:455: characters 4-9
			(Log::$trace)($sql, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 455,
				"className" => "Model",
				"methodName" => "fetchAll",
			]));
			#src/Model.hx:456: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:456: characters 25-57
			$_g = new StringMap();
			$value = $dbh->errorInfo();
			$_g->data["" . ($req??'null') . " query:"] = $value;
			#src/Model.hx:456: characters 4-58
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 456,
				"className" => "Model",
				"methodName" => "fetchAll",
			]));
		}
		#src/Model.hx:458: lines 458-462
		if ($stmt->errorCode() !== "00000") {
			#src/Model.hx:460: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 460,
				"className" => "Model",
				"methodName" => "fetchAll",
			]));
			#src/Model.hx:461: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:461: characters 25-58
			$_g = new StringMap();
			$value = $stmt->errorInfo();
			$_g->data["" . ($req??'null') . " query:"] = $value;
			#src/Model.hx:461: characters 4-59
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 461,
				"className" => "Model",
				"methodName" => "fetchAll",
			]));
		}
		#src/Model.hx:463: characters 10-51
		if ($stmt->execute()) {
			#src/Model.hx:463: characters 26-45
			return $stmt->fetchAll($mode);
		} else {
			#src/Model.hx:463: characters 46-50
			return null;
		}
	}

	/**
	 * @param string $sql
	 * @param \PDO $dbh
	 * @param string $req
	 * @param int $mode
	 * @param object $pos
	 * 
	 * @return mixed
	 */
	public function fetchRow ($sql, $dbh, $req = "", $mode = 2, $pos = null) {
		#src/Model.hx:468: lines 468-481
		if ($req === null) {
			$req = "";
		}
		if ($mode === null) {
			$mode = 2;
		}
		#src/Model.hx:469: characters 9-54
		$stmt = \S::$syncDbh->query($sql);
		#src/Model.hx:470: lines 470-474
		if ($stmt === false) {
			#src/Model.hx:472: characters 4-9
			(Log::$trace)($sql, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 472,
				"className" => "Model",
				"methodName" => "fetchRow",
			]));
			#src/Model.hx:473: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:473: characters 25-57
			$_g = new StringMap();
			$value = $dbh->errorInfo();
			$_g->data["" . ($req??'null') . " query:"] = $value;
			#src/Model.hx:473: characters 4-58
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 473,
				"className" => "Model",
				"methodName" => "fetchRow",
			]));
		}
		#src/Model.hx:475: lines 475-479
		if ($stmt->errorCode() !== "00000") {
			#src/Model.hx:477: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 477,
				"className" => "Model",
				"methodName" => "fetchRow",
			]));
			#src/Model.hx:478: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:478: characters 25-58
			$_g = new StringMap();
			$value = $stmt->errorInfo();
			$_g->data["" . ($req??'null') . " query:"] = $value;
			#src/Model.hx:478: characters 4-59
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 478,
				"className" => "Model",
				"methodName" => "fetchRow",
			]));
		}
		#src/Model.hx:480: characters 10-48
		if ($stmt->execute()) {
			#src/Model.hx:480: characters 26-42
			return $stmt->fetch($mode);
		} else {
			#src/Model.hx:480: characters 43-47
			return null;
		}
	}

	/**
	 * @param string $fields
	 * 
	 * @return string
	 */
	public function fieldFormat ($fields) {
		#src/Model.hx:274: characters 3-52
		$fieldsWithFormat = new \Array_hx();
		#src/Model.hx:275: characters 3-44
		$sF = HxString::split($fields, ",");
		#src/Model.hx:276: characters 3-139
		$dbQueryFormats = Lib::hashOfAssociativeArray(((array)((\S::$conf->data["dbQueryFormats"] ?? null))));
		#src/Model.hx:277: characters 3-8
		(Log::$trace)(($dbQueryFormats === null ? "null" : $dbQueryFormats->toString()), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 277,
			"className" => "Model",
			"methodName" => "fieldFormat",
		]));
		#src/Model.hx:279: characters 3-41
		$qKeys = new \Array_hx();
		#src/Model.hx:280: characters 3-51
		$it = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($dbQueryFormats->data))));
		#src/Model.hx:281: lines 281-284
		while ($it->hasNext()) {
			#src/Model.hx:283: characters 4-25
			$x = $it->next();
			$qKeys->arr[$qKeys->length++] = $x;
		}
		#src/Model.hx:286: lines 286-299
		$_g = 0;
		while ($_g < $sF->length) {
			#src/Model.hx:286: characters 8-9
			$f = ($sF->arr[$_g] ?? null);
			#src/Model.hx:286: lines 286-299
			++$_g;
			#src/Model.hx:288: lines 288-298
			if (\Lambda::has($qKeys, $f)) {
				#src/Model.hx:290: characters 5-54
				$format = ($dbQueryFormats->data[$f] ?? null);
				#src/Model.hx:292: lines 292-295
				if (($format->arr[0] ?? null) === "ALIAS") {
					#src/Model.hx:293: characters 5-65
					$x = (\S::$dbh->quote($f)??'null') . " AS " . (($format->arr[1] ?? null)??'null');
					$fieldsWithFormat->arr[$fieldsWithFormat->length++] = $x;
				} else {
					#src/Model.hx:295: characters 5-102
					$x1 = (($format->arr[0] ?? null)??'null') . "(" . (\S::$dbh->quote($f)??'null') . ", \"" . (($format->arr[1] ?? null)??'null') . "\") AS `" . ($f??'null') . "`";
					$fieldsWithFormat->arr[$fieldsWithFormat->length++] = $x1;
				}
			} else {
				#src/Model.hx:298: characters 5-44
				$x2 = \S::$dbh->quote($f);
				$fieldsWithFormat->arr[$fieldsWithFormat->length++] = $x2;
			}
		}
		#src/Model.hx:301: characters 3-36
		return $fieldsWithFormat->join(",");
	}

	/**
	 * @return void
	 */
	public function get () {
		#src/Model.hx:307: characters 9-96
		$_g = new StringMap();
		$value = \Std::string($this->count());
		$_g->data["count"] = $value;
		$value = (array_key_exists("page", $this->param->data) ? ($this->param->data["page"] ?? null) : "1");
		$_g->data["page"] = $value;
		#src/Model.hx:306: lines 306-309
		$rData = new HxAnon([
			"info" => $_g,
			"rows" => $this->doSelect(),
		]);
		#src/Model.hx:311: characters 3-27
		\S::sendData($this->dbData, $rData);
	}

	/**
	 * @param string $table_name
	 * 
	 * @return StringMap
	 */
	public function getEditorFields ($table_name = null) {
		#src/Model.hx:1006: characters 3-41
		$sqlBf = new \StringBuf();
		#src/Model.hx:1007: characters 3-56
		$filterValues = new \Array_hx();
		#src/Model.hx:1008: characters 34-43
		$this1 = [];
		$param_data = $this1;
		#src/Model.hx:1009: characters 3-46
		$param_data["table"] = "fly_crm.editor_fields";
		#src/Model.hx:1011: lines 1011-1012
		$param_data["filter"] = "field_cost|>-2" . ((($table_name !== null ? ",table_name|" . ($this->quoteIdent($table_name)??'null') : ""))??'null');
		#src/Model.hx:1013: characters 3-84
		$param_data["fields"] = "field_name,field_label,field_type,field_options,table_name";
		#src/Model.hx:1014: characters 3-58
		$param_data["order"] = "table_name,field_rank,field_order";
		#src/Model.hx:1015: characters 3-28
		$param_data["limit"] = "100";
		#src/Model.hx:1017: characters 3-61
		$eFields = \Array_hx::wrap($this->doSelect());
		#src/Model.hx:1022: characters 3-61
		$ret = new StringMap();
		#src/Model.hx:1024: lines 1024-1037
		$_g = 0;
		while ($_g < $eFields->length) {
			#src/Model.hx:1024: characters 8-10
			$ef = ($eFields->arr[$_g] ?? null);
			#src/Model.hx:1024: lines 1024-1037
			++$_g;
			#src/Model.hx:1026: characters 4-48
			$table = $ef["table_name"];
			#src/Model.hx:1027: lines 1027-1030
			if (!array_key_exists($table, $ret->data)) {
				#src/Model.hx:1029: characters 5-23
				$ret->data[$table] = new \Array_hx();
			}
			#src/Model.hx:1033: characters 4-53
			$a = ($ret->data[$table] ?? null);
			#src/Model.hx:1034: characters 4-42
			$x = Lib::hashOfAssociativeArray($ef);
			$a->arr[$a->length++] = $x;
			#src/Model.hx:1035: characters 4-21
			$ret->data[$table] = $a;
		}
		#src/Model.hx:1039: characters 3-13
		return $ret;
	}

	/**
	 * @return void
	 */
	public function json_encode () {
		#src/Model.hx:994: characters 3-27
		$this->data->user_id = \S::$user_id;
		#src/Model.hx:995: characters 3-25
		$this->data->globals = $this->globals;
		#src/Model.hx:996: characters 3-30
		\S::add2Response(new HxAnon(["data" => $this->data]));
	}

	/**
	 * @param string $res
	 * 
	 * @return string
	 */
	public function json_response ($res) {
		#src/Model.hx:1001: characters 3-64
		return json_encode(new HxAnon(["content" => $res]),64);
	}

	/**
	 * @param string $sql
	 * @param \PDO $dbh
	 * @param StringMap $kv
	 * @param string $req
	 * @param object $pos
	 * 
	 * @return int
	 */
	public function prepareUpdateRows ($sql, $dbh, $kv, $req = "", $pos = null) {
		#src/Model.hx:490: lines 490-509
		if ($req === null) {
			$req = "";
		}
		#src/Model.hx:491: characters 9-56
		$stmt = \S::$syncDbh->prepare($sql);
		#src/Model.hx:492: lines 492-496
		if ($stmt === false) {
			#src/Model.hx:494: characters 4-9
			(Log::$trace)($sql, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 494,
				"className" => "Model",
				"methodName" => "prepareUpdateRows",
			]));
			#src/Model.hx:495: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:495: characters 25-59
			$_g = new StringMap();
			$value = $dbh->errorInfo();
			$_g->data["" . ($req??'null') . " prepare:"] = $value;
			#src/Model.hx:495: characters 4-60
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 495,
				"className" => "Model",
				"methodName" => "prepareUpdateRows",
			]));
		}
		#src/Model.hx:498: characters 15-36
		$_g = new MapKeyValueIterator($kv);
		#src/Model.hx:498: lines 498-501
		while ($_g->hasNext()) {
			#src/Model.hx:498: characters 15-36
			$_g1 = $_g->next();
			$k = $_g1->key;
			$v = $_g1->value;
			#src/Model.hx:500: characters 4-9
			(Log::$trace)("" . ($k??'null') . ":" . (\Std::string($v)??'null'), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 500,
				"className" => "Model",
				"methodName" => "prepareUpdateRows",
			]));
		}
		#src/Model.hx:503: lines 503-507
		if ($stmt->errorCode() !== "00000") {
			#src/Model.hx:505: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 505,
				"className" => "Model",
				"methodName" => "prepareUpdateRows",
			]));
			#src/Model.hx:506: characters 17-23
			$tmp = $this->dbData;
			#src/Model.hx:506: characters 25-58
			$_g = new StringMap();
			$value = $stmt->errorInfo();
			$_g->data["" . ($req??'null') . " query:"] = $value;
			#src/Model.hx:506: characters 4-59
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 506,
				"className" => "Model",
				"methodName" => "prepareUpdateRows",
			]));
		}
		#src/Model.hx:508: characters 10-47
		if ($stmt->execute()) {
			#src/Model.hx:508: characters 26-41
			return $stmt->rowCount();
		} else {
			#src/Model.hx:508: characters 42-46
			return null;
		}
	}

	/**
	 * @param string $sql
	 * @param int $resultType
	 * 
	 * @return mixed
	 */
	public function query ($sql, $resultType = null) {
		#src/Model.hx:417: lines 417-418
		if ($resultType === null) {
			#src/Model.hx:418: characters 4-32
			$resultType = \PDO::FETCH_ASSOC;
		}
		#src/Model.hx:419: characters 3-43
		$stm = \S::$dbh->query($sql);
		#src/Model.hx:420: lines 420-424
		if (!$stm) {
			#src/Model.hx:422: characters 4-9
			(Log::$trace)(\S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 422,
				"className" => "Model",
				"methodName" => "query",
			]));
			#src/Model.hx:423: characters 4-15
			exit(0);
		}
		#src/Model.hx:425: characters 15-32
		$this1 = [];
		#src/Model.hx:425: characters 3-33
		$stm->execute($this1);
		#src/Model.hx:426: lines 426-431
		if ($stm->errorCode() !== "00000") {
			#src/Model.hx:428: characters 4-9
			(Log::$trace)($stm->errorCode(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 428,
				"className" => "Model",
				"methodName" => "query",
			]));
			#src/Model.hx:429: characters 4-9
			(Log::$trace)($stm->errorInfo(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 429,
				"className" => "Model",
				"methodName" => "query",
			]));
			#src/Model.hx:430: characters 4-15
			exit(0);
		}
		#src/Model.hx:432: characters 3-8
		(Log::$trace)($stm, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 432,
			"className" => "Model",
			"methodName" => "query",
		]));
		#src/Model.hx:433: characters 3-50
		$res = $stm->fetchAll($resultType);
		#src/Model.hx:434: lines 434-437
		foreach ($res as $key => $value) {
			$value1 = $value;
			#src/Model.hx:435: characters 4-9
			(Log::$trace)("" . ($key??'null') . " => " . (\Std::string($value1)??'null'), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 435,
				"className" => "Model",
				"methodName" => "query",
			]));
			#src/Model.hx:436: characters 4-20
			$res[$key] = $value1;
		}
		#src/Model.hx:438: characters 3-13
		return $res;
	}

	/**
	 * @param string $f
	 * 
	 * @return string
	 */
	public function quoteIdent ($f) {
		#src/Model.hx:809: lines 809-812
		if ((new \EReg("^([a-zA-Z_])[a-zA-Z0-9_]+\$", ""))->match($f)) {
			#src/Model.hx:811: characters 4-12
			return $f;
		}
		#src/Model.hx:814: characters 3-16
		return "\"" . ($f??'null') . "\"";
	}

	/**
	 * @param mixed $row
	 * 
	 * @return string
	 */
	public function row2jsonb ($row) {
		#src/Model.hx:819: characters 3-53
		$_jsonb_array_text = new \StringBuf();
		#src/Model.hx:820: lines 820-836
		$_g = 0;
		$_g1 = \Reflect::fields($row);
		while ($_g < $_g1->length) {
			#src/Model.hx:820: characters 8-9
			$f = ($_g1->arr[$_g] ?? null);
			#src/Model.hx:820: lines 820-836
			++$_g;
			#src/Model.hx:823: characters 4-44
			$val = \Reflect::field($row, $f);
			#src/Model.hx:824: lines 824-833
			if ($val === null) {
				#src/Model.hx:827: characters 5-15
				$val = "\"\"";
			} else if ($val === "") {
				#src/Model.hx:832: characters 5-15
				$val = "\"\"";
			}
			#src/Model.hx:834: characters 4-60
			$_comma = (mb_strlen($_jsonb_array_text->b) > 2 ? "," : "");
			#src/Model.hx:835: characters 4-43
			$_jsonb_array_text->add("" . ($_comma??'null') . ($f??'null') . "," . (\Std::string($val)??'null'));
		}
		#src/Model.hx:837: characters 3-38
		return $_jsonb_array_text->b;
	}

	/**
	 * @return void
	 */
	public function run () {
		#src/Model.hx:872: lines 872-967
		$_gthis = $this;
		#src/Model.hx:884: lines 884-885
		if (array_key_exists("table", $this->param->data)) {
			#src/Model.hx:885: characters 5-10
			$this->table = ($this->param->data["table"] ?? null);
		}
		#src/Model.hx:886: lines 886-896
		if ($this->table !== null) {
			#src/Model.hx:888: lines 888-890
			$tmp = null;
			if (array_key_exists("fields", $this->param->data)) {
				$tmp = HxDynamicStr::wrap(($this->param->data["fields"] ?? null))->split(",")->map(function ($f) use (&$_gthis) {
					#src/Model.hx:889: characters 53-73
					return $_gthis->quoteIdent($f);
				});
			} else {
				#src/Model.hx:890: characters 6-64
				$_this = \S::tableFields($this->table);
				$result = [];
				$data = $_this->arr;
				$_g_current = 0;
				$_g_length = count($data);
				$_g_data = $data;
				while ($_g_current < $_g_length) {
					$item = $_g_data[$_g_current++];
					$result[] = $_gthis->quoteIdent($item);
				}
				#src/Model.hx:888: lines 888-890
				$tmp = \Array_hx::wrap($result);
			}
			#src/Model.hx:888: characters 5-15
			$this->fieldNames = $tmp;
			#src/Model.hx:891: characters 5-15
			$this->tableNames = \Array_hx::wrap([$this->table]);
			#src/Model.hx:892: characters 5-16
			$this->queryFields = $this->fieldNames->join(",");
			#src/Model.hx:893: characters 5-10
			(Log::$trace)($this->tableNames, new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 893,
				"className" => "Model",
				"methodName" => "run",
			]));
		} else {
			#src/Model.hx:896: characters 5-15
			$this->tableNames = new \Array_hx();
		}
		#src/Model.hx:898: lines 898-902
		if (($this->param->data["dataSource"] ?? null) !== null) {
			#src/Model.hx:900: characters 5-15
			$this->dataSource = Unserializer::run(($this->param->data["dataSource"] ?? null));
		}
		#src/Model.hx:904: characters 3-33
		$fields = new \Array_hx();
		#src/Model.hx:905: lines 905-953
		if ($this->dataSource !== null) {
			#src/Model.hx:907: characters 4-9
			(Log::$trace)($this->dataSource->toString(), new HxAnon([
				"fileName" => "src/Model.hx",
				"lineNumber" => 907,
				"className" => "Model",
				"methodName" => "run",
			]));
			#src/Model.hx:908: characters 4-51
			$tKeys = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($this->dataSource->data))));
			#src/Model.hx:909: lines 909-931
			while ($tKeys->hasNext()) {
				#src/Model.hx:911: characters 5-34
				$tableName = $tKeys->next();
				#src/Model.hx:912: characters 5-31
				$_this = $this->tableNames;
				$_this->arr[$_this->length++] = $tableName;
				#src/Model.hx:913: characters 5-48
				$tableProps = ($this->dataSource->data[$tableName] ?? null);
				#src/Model.hx:914: characters 5-10
				(Log::$trace)(HxDynamicStr::wrap($tableProps)->toString(), new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 914,
					"className" => "Model",
					"methodName" => "run",
				]));
				#src/Model.hx:915: lines 915-918
				if ($this->action === "update") {
					#src/Model.hx:917: characters 6-12
					$tmp = $this;
					#src/Model.hx:917: characters 6-84
					$tmp->setSql = ($tmp->setSql??'null') . ($this->buildSet($tableName, $tableProps->get("data"), $tableProps->get("alias"))??'null');
				}
				#src/Model.hx:919: characters 5-11
				$fields = $fields->concat($this->buildFieldsSql($tableName, $tableProps));
				#src/Model.hx:920: lines 920-927
				if ($this->action === "create") {
					#src/Model.hx:922: characters 6-25
					$fields->remove("id");
					#src/Model.hx:923: characters 6-16
					$this->fieldNames = $fields;
					#src/Model.hx:924: characters 6-41
					$this->buildValues($tableProps->get("data"));
					#src/Model.hx:925: characters 15-49
					$result = [];
					$data = $fields->arr;
					$_g_current = 0;
					$_g_length = count($data);
					$_g_data = $data;
					while ($_g_current < $_g_length) {
						$item = $_g_data[$_g_current++];
						$result[] = "?";
					}
					#src/Model.hx:925: characters 6-12
					$this->setSql = \Array_hx::wrap($result)->join(",");
					#src/Model.hx:926: characters 6-12
					$this->setSql = "(" . ($this->setSql??'null') . ")";
				}
				#src/Model.hx:928: lines 928-929
				if ($tableProps->exists("filter")) {
					#src/Model.hx:929: characters 6-15
					$tmp1 = $this;
					#src/Model.hx:929: characters 6-54
					$tmp1->filterSql = ($tmp1->filterSql??'null') . ($this->buildCond($tableProps->get("filter"))??'null');
				}
				#src/Model.hx:930: characters 5-10
				(Log::$trace)("filterSql:" . ($this->filterSql??'null') . "::", new HxAnon([
					"fileName" => "src/Model.hx",
					"lineNumber" => 930,
					"className" => "Model",
					"methodName" => "run",
				]));
			}
			#src/Model.hx:932: characters 4-15
			$tmp = $this;
			#src/Model.hx:932: characters 4-58
			$tmp->queryFields = ($tmp->queryFields??'null') . ((($fields->length > 0 ? $fields->join(",") : ""))??'null');
		} else {
			#src/Model.hx:938: lines 938-941
			if ($this->action === "update") {
				#src/Model.hx:940: characters 5-11
				$tmp = $this;
				#src/Model.hx:940: characters 5-62
				$tmp->setSql = ($tmp->setSql??'null') . ($this->buildSet(($this->param->data["table"] ?? null), ($this->param->data["data"] ?? null))??'null');
			}
			#src/Model.hx:942: lines 942-951
			if ($this->action === "create") {
				#src/Model.hx:944: characters 5-56
				$dataFields = \Reflect::fields(($this->param->data["data"] ?? null));
				#src/Model.hx:945: characters 14-111
				$_this = \S::tableFields(($this->param->data["table"] ?? null), \S::$db);
				$result = [];
				$data = $_this->arr;
				$_g_current = 0;
				$_g_length = count($data);
				$_g_data = $data;
				while ($_g_current < $_g_length) {
					$item = $_g_data[$_g_current++];
					if ($dataFields->indexOf($item) !== -1) {
						$result[] = $item;
					}
				}
				#src/Model.hx:945: characters 14-162
				$_this = \Array_hx::wrap($result);
				$result = [];
				$data = $_this->arr;
				$_g_current = 0;
				$_g_length = count($data);
				$_g_data = $data;
				while ($_g_current < $_g_length) {
					$item = $_g_data[$_g_current++];
					$result[] = ("" . ($_gthis->quoteIdent($item)??'null'));
				}
				$fields = \Array_hx::wrap($result);
				#src/Model.hx:948: characters 5-35
				$this->buildValues(($this->param->data["data"] ?? null));
				#src/Model.hx:949: characters 14-48
				$result = [];
				$data = $fields->arr;
				$_g_current = 0;
				$_g_length = count($data);
				$_g_data = $data;
				while ($_g_current < $_g_length) {
					$item = $_g_data[$_g_current++];
					$result[] = "?";
				}
				#src/Model.hx:949: characters 5-11
				$this->setSql = \Array_hx::wrap($result)->join(",");
				#src/Model.hx:950: characters 5-11
				$this->setSql = "(" . ($this->setSql??'null') . ")";
			}
			#src/Model.hx:952: characters 4-15
			$tmp = $this;
			#src/Model.hx:952: characters 4-58
			$tmp->queryFields = ($tmp->queryFields??'null') . ((($fields->length > 0 ? $fields->join(",") : ""))??'null');
		}
		#src/Model.hx:954: characters 3-8
		(Log::$trace)("" . ($this->action??'null') . ":" . ($this->tableNames->toString()??'null'), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 954,
			"className" => "Model",
			"methodName" => "run",
		]));
		#src/Model.hx:955: characters 3-8
		(Log::$trace)($this->queryFields, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 955,
			"className" => "Model",
			"methodName" => "run",
		]));
		#src/Model.hx:956: characters 3-8
		(Log::$trace)($this->setSql, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 956,
			"className" => "Model",
			"methodName" => "run",
		]));
		#src/Model.hx:957: lines 957-960
		if ($this->tableNames->length > 1) {
			#src/Model.hx:959: characters 4-11
			$this->joinSql = $this->buildJoin();
		}
		#src/Model.hx:961: characters 3-8
		(Log::$trace)("filter:" . (\Std::string(($this->param->data["filter"] ?? null))??'null') . "<", new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 961,
			"className" => "Model",
			"methodName" => "run",
		]));
		#src/Model.hx:962: lines 962-965
		if (array_key_exists("filter", $this->param->data) && (($this->param->data["filter"] ?? null) !== "")) {
			#src/Model.hx:963: characters 4-13
			$tmp = $this;
			#src/Model.hx:963: characters 4-47
			$tmp->filterSql = ($tmp->filterSql??'null') . ($this->buildCond(($this->param->data["filter"] ?? null))??'null');
		}
		#src/Model.hx:966: characters 3-64
		\Reflect::callMethod($this, \Reflect::field($this, $this->action), \Array_hx::wrap([$this->param]));
	}

	/**
	 * @param mixed $rows
	 * 
	 * @return bool
	 */
	public function sendRows ($rows) {
		#src/Model.hx:1053: lines 1053-1070
		$_gthis = $this;
		#src/Model.hx:1055: characters 3-39
		$s = new Serializer();
		#src/Model.hx:1057: lines 1057-1060
		foreach ($rows as $key => $value) {
			#src/Model.hx:1059: characters 4-55
			$_this = $_gthis->dbData->dataRows;
			$x = Lib::hashOfAssociativeArray($value);
			$_this->arr[$_this->length++] = $x;
		}
		#src/Model.hx:1061: characters 3-59
		header("Content-Type" . ": " . "text/html charset=utf-8");
		#src/Model.hx:1062: characters 3-139
		header("Access-Control-Allow-Headers" . ": " . "access-control-allow-headers, access-control-allow-methods, access-control-allow-origin");
		#src/Model.hx:1063: characters 3-60
		header("Access-Control-Allow-Credentials" . ": " . "true");
		#src/Model.hx:1064: characters 3-74
		header("Access-Control-Allow-Origin" . ": " . ("https://" . (\S::$devIP??'null') . ":9000"));
		#src/Model.hx:1065: characters 3-46
		$out = File::write("php://output", true);
		#src/Model.hx:1066: characters 3-23
		$out->set_bigEndian(true);
		#src/Model.hx:1067: characters 3-33
		$out->write($s->serialize($this->dbData));
		#src/Model.hx:1068: characters 3-14
		exit(0);
		#src/Model.hx:1069: characters 3-14
		return true;
	}

	/**
	 * @param mixed $rows
	 * 
	 * @return Bytes
	 */
	public function serializeRows ($rows) {
		#src/Model.hx:1042: lines 1042-1051
		$_gthis = $this;
		#src/Model.hx:1044: characters 3-39
		$s = new Serializer();
		#src/Model.hx:1045: lines 1045-1048
		foreach ($rows as $key => $value) {
			#src/Model.hx:1047: characters 4-55
			$_this = $_gthis->dbData->dataRows;
			$x = Lib::hashOfAssociativeArray($value);
			$_this->arr[$_this->length++] = $x;
		}
		#src/Model.hx:1049: characters 3-8
		(Log::$trace)($this->dbData, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 1049,
			"className" => "Model",
			"methodName" => "serializeRows",
		]));
		#src/Model.hx:1050: characters 3-29
		return $s->serialize($this->dbData);
	}

	/**
	 * @return mixed
	 */
	public function update () {
		#src/Model.hx:513: characters 3-41
		$sqlBf = new \StringBuf();
		#src/Model.hx:514: characters 3-8
		(Log::$trace)($this->queryFields, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 514,
			"className" => "Model",
			"methodName" => "update",
		]));
		#src/Model.hx:515: characters 3-23
		$sqlBf->add("UPDATE ");
		#src/Model.hx:516: characters 3-8
		(Log::$trace)("" . ($this->tableNames->length??'null') . " " . ($this->joinSql??'null'), new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 516,
			"className" => "Model",
			"methodName" => "update",
		]));
		#src/Model.hx:517: lines 517-524
		if ($this->tableNames->length > 1) {
			#src/Model.hx:519: characters 4-22
			$sqlBf->add($this->joinSql);
		} else {
			#src/Model.hx:523: characters 4-46
			$sqlBf->add("" . ($this->quoteIdent(($this->tableNames->arr[0] ?? null))??'null') . " ");
		}
		#src/Model.hx:525: characters 3-20
		$sqlBf->add($this->setSql);
		#src/Model.hx:526: lines 526-529
		if ($this->filterSql !== null) {
			#src/Model.hx:528: characters 4-24
			$sqlBf->add($this->filterSql);
		}
		#src/Model.hx:531: characters 3-8
		(Log::$trace)($sqlBf->b, new HxAnon([
			"fileName" => "src/Model.hx",
			"lineNumber" => 531,
			"className" => "Model",
			"methodName" => "update",
		]));
		#src/Model.hx:533: characters 3-35
		return $this->execute($sqlBf->b);
	}

	/**
	 * @param string $sql
	 * @param \PDO $dbh
	 * @param string $req
	 * @param object $pos
	 * 
	 * @return int
	 */
	public function updateRows ($sql, $dbh, $req = "", $pos = null) {
		#src/Model.hx:484: lines 484-487
		if ($req === null) {
			$req = "";
		}
		#src/Model.hx:485: characters 3-32
		$rows = $dbh->exec($sql);
		#src/Model.hx:486: characters 3-14
		return $rows;
	}
}

Boot::registerClass(Model::class, 'Model');
