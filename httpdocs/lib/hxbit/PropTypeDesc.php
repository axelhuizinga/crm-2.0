<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx
 */

namespace hxbit;

use \php\Boot;
use \php\_Boot\HxEnum;

class PropTypeDesc extends HxEnum {
	/**
	 * @param mixed $k
	 * 
	 * @return PropTypeDesc
	 */
	static public function PAlias ($k) {
		return new PropTypeDesc('PAlias', 10, [$k]);
	}

	/**
	 * @param mixed $k
	 * 
	 * @return PropTypeDesc
	 */
	static public function PArray ($k) {
		return new PropTypeDesc('PArray', 8, [$k]);
	}

	/**
	 * @return PropTypeDesc
	 */
	static public function PBool () {
		static $inst = null;
		if (!$inst) $inst = new PropTypeDesc('PBool', 2, []);
		return $inst;
	}

	/**
	 * @return PropTypeDesc
	 */
	static public function PBytes () {
		static $inst = null;
		if (!$inst) $inst = new PropTypeDesc('PBytes', 4, []);
		return $inst;
	}

	/**
	 * @return PropTypeDesc
	 */
	static public function PDynamic () {
		static $inst = null;
		if (!$inst) $inst = new PropTypeDesc('PDynamic', 14, []);
		return $inst;
	}

	/**
	 * @param string $name
	 * 
	 * @return PropTypeDesc
	 */
	static public function PEnum ($name) {
		return new PropTypeDesc('PEnum', 6, [$name]);
	}

	/**
	 * @param mixed $t
	 * 
	 * @return PropTypeDesc
	 */
	static public function PFlags ($t) {
		return new PropTypeDesc('PFlags', 16, [$t]);
	}

	/**
	 * @return PropTypeDesc
	 */
	static public function PFloat () {
		static $inst = null;
		if (!$inst) $inst = new PropTypeDesc('PFloat', 1, []);
		return $inst;
	}

	/**
	 * @return PropTypeDesc
	 */
	static public function PInt () {
		static $inst = null;
		if (!$inst) $inst = new PropTypeDesc('PInt', 0, []);
		return $inst;
	}

	/**
	 * @return PropTypeDesc
	 */
	static public function PInt64 () {
		static $inst = null;
		if (!$inst) $inst = new PropTypeDesc('PInt64', 15, []);
		return $inst;
	}

	/**
	 * @param mixed $k
	 * @param mixed $v
	 * 
	 * @return PropTypeDesc
	 */
	static public function PMap ($k, $v) {
		return new PropTypeDesc('PMap', 7, [$k, $v]);
	}

	/**
	 * @param mixed $t
	 * 
	 * @return PropTypeDesc
	 */
	static public function PNull ($t) {
		return new PropTypeDesc('PNull', 12, [$t]);
	}

	/**
	 * @param \Array_hx $fields
	 * 
	 * @return PropTypeDesc
	 */
	static public function PObj ($fields) {
		return new PropTypeDesc('PObj', 9, [$fields]);
	}

	/**
	 * @param string $name
	 * 
	 * @return PropTypeDesc
	 */
	static public function PSerializable ($name) {
		return new PropTypeDesc('PSerializable', 5, [$name]);
	}

	/**
	 * @return PropTypeDesc
	 */
	static public function PString () {
		static $inst = null;
		if (!$inst) $inst = new PropTypeDesc('PString', 3, []);
		return $inst;
	}

	/**
	 * @return PropTypeDesc
	 */
	static public function PStruct () {
		static $inst = null;
		if (!$inst) $inst = new PropTypeDesc('PStruct', 17, []);
		return $inst;
	}

	/**
	 * @return PropTypeDesc
	 */
	static public function PUnknown () {
		static $inst = null;
		if (!$inst) $inst = new PropTypeDesc('PUnknown', 13, []);
		return $inst;
	}

	/**
	 * @param mixed $k
	 * 
	 * @return PropTypeDesc
	 */
	static public function PVector ($k) {
		return new PropTypeDesc('PVector', 11, [$k]);
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			10 => 'PAlias',
			8 => 'PArray',
			2 => 'PBool',
			4 => 'PBytes',
			14 => 'PDynamic',
			6 => 'PEnum',
			16 => 'PFlags',
			1 => 'PFloat',
			0 => 'PInt',
			15 => 'PInt64',
			7 => 'PMap',
			12 => 'PNull',
			9 => 'PObj',
			5 => 'PSerializable',
			3 => 'PString',
			17 => 'PStruct',
			13 => 'PUnknown',
			11 => 'PVector',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'PAlias' => 1,
			'PArray' => 1,
			'PBool' => 0,
			'PBytes' => 0,
			'PDynamic' => 0,
			'PEnum' => 1,
			'PFlags' => 1,
			'PFloat' => 0,
			'PInt' => 0,
			'PInt64' => 0,
			'PMap' => 2,
			'PNull' => 1,
			'PObj' => 1,
			'PSerializable' => 1,
			'PString' => 0,
			'PStruct' => 0,
			'PUnknown' => 0,
			'PVector' => 1,
		];
	}
}

Boot::registerClass(PropTypeDesc::class, 'hxbit.PropTypeDesc');
