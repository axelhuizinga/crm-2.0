<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /usr/share/haxe/std/haxe/rtti/Meta.hx
 */

namespace haxe\rtti;

use \php\_Boot\HxAnon;
use \php\Boot;

/**
 * An API to access classes and enums metadata at runtime.
 * @see <https://haxe.org/manual/cr-rtti.html>
 */
class Meta {
	/**
	 * @param mixed $t
	 * 
	 * @return object
	 */
	public static function getMeta ($t) {
		#/usr/share/haxe/std/haxe/rtti/Meta.hx:58: characters 3-42
		return Boot::getMeta(Boot::dynamicField($t, 'phpClassName'));
	}

	/**
	 * Returns the metadata that were declared for the given type (class or enum)
	 * 
	 * @param mixed $t
	 * 
	 * @return mixed
	 */
	public static function getType ($t) {
		#/usr/share/haxe/std/haxe/rtti/Meta.hx:41: characters 3-25
		$meta = Meta::getMeta($t);
		#/usr/share/haxe/std/haxe/rtti/Meta.hx:42: characters 10-60
		if (($meta === null) || ($meta->obj === null)) {
			#/usr/share/haxe/std/haxe/rtti/Meta.hx:42: characters 47-49
			return new HxAnon();
		} else {
			#/usr/share/haxe/std/haxe/rtti/Meta.hx:42: characters 52-60
			return $meta->obj;
		}
	}
}

Boot::registerClass(Meta::class, 'haxe.rtti.Meta');
