<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /usr/share/haxe/std/haxe/crypto/Crc32.hx
 */

namespace haxe\crypto;

use \php\Boot;
use \haxe\io\Bytes;

/**
 * Calculates the Crc32 of the given Bytes.
 */
class Crc32 {
	/**
	 * Calculates the CRC32 of the given data bytes
	 * 
	 * @param Bytes $data
	 * 
	 * @return int
	 */
	public static function make ($data) {
		#/usr/share/haxe/std/haxe/crypto/Crc32.hx:60: characters 11-22
		$c_crc = -1;
		#/usr/share/haxe/std/haxe/crypto/Crc32.hx:61: characters 3-33
		$b = $data->b;
		$_g = 0;
		$_g1 = $data->length;
		while ($_g < $_g1) {
			$i = $_g++;
			$tmp = ($c_crc ^ ord($b->s[$i])) & 255;
			#/usr/share/haxe/std/haxe/crypto/Crc32.hx:47: characters 5-8
			$tmp = Boot::shiftRightUnsigned($tmp, 1) ^ (-($tmp & 1) & -306674912);
			$tmp = Boot::shiftRightUnsigned($tmp, 1) ^ (-($tmp & 1) & -306674912);
			$tmp = Boot::shiftRightUnsigned($tmp, 1) ^ (-($tmp & 1) & -306674912);
			$tmp = Boot::shiftRightUnsigned($tmp, 1) ^ (-($tmp & 1) & -306674912);
			$tmp = Boot::shiftRightUnsigned($tmp, 1) ^ (-($tmp & 1) & -306674912);
			$tmp = Boot::shiftRightUnsigned($tmp, 1) ^ (-($tmp & 1) & -306674912);
			$tmp = Boot::shiftRightUnsigned($tmp, 1) ^ (-($tmp & 1) & -306674912);
			$tmp = Boot::shiftRightUnsigned($tmp, 1) ^ (-($tmp & 1) & -306674912);
			#/usr/share/haxe/std/haxe/crypto/Crc32.hx:61: characters 3-33
			$c_crc = Boot::shiftRightUnsigned($c_crc, 8) ^ $tmp;
		}
		#/usr/share/haxe/std/haxe/crypto/Crc32.hx:62: characters 3-17
		return $c_crc ^ -1;
	}
}

Boot::registerClass(Crc32::class, 'haxe.crypto.Crc32');
