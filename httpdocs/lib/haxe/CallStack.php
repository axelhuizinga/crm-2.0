<?php
/**
 * Generated by Haxe 4.0.0-rc.5+4a745347f
 * Haxe source file: /usr/share/haxe/std/php/_std/haxe/CallStack.hx
 */

namespace haxe;

use \php\Boot;
use \php\_Boot\HxString;

class CallStack {
	/**
	 * @var \Closure
	 * If defined this function will be used to transform call stack entries.
	 * @param String - generated php file name.
	 * @param Int - Line number in generated file.
	 */
	static public $mapPosition;

	/**
	 * @return \Array_hx
	 */
	static public function callStack () {
		#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:49: characters 3-78
		return CallStack::makeStack(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS));
	}

	/**
	 * @param mixed $native
	 * 
	 * @return \Array_hx
	 */
	static public function makeStack ($native) {
		#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:127: characters 3-19
		$result = new \Array_hx();
		#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:128: characters 3-36
		$count = count($native);
		#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:130: lines 130-161
		$_g = 0;
		$_g1 = $count;
		while ($_g < $_g1) {
			$i = $_g++;
			#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:131: characters 4-26
			$entry = $native[$i];
			#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:132: characters 4-20
			$item = null;
			#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:134: lines 134-148
			if (($i + 1) < $count) {
				#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:135: characters 5-30
				$next = $native[$i + 1];
				#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:137: lines 137-138
				if (!isset($next["function"])) {
					#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:138: characters 6-27
					$next["function"] = "";
				}
				#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:139: lines 139-140
				if (!isset($next["class"])) {
					#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:140: characters 6-24
					$next["class"] = "";
				}
				#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:142: lines 142-147
				if (HxString::indexOf($next["function"], "{closure}") >= 0) {
					#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:143: characters 6-28
					$item = StackItem::LocalFunction();
				} else if ((strlen($next["class"]) > 0) && (strlen($next["function"]) > 0)) {
					#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:145: characters 6-49
					$cls = Boot::getClassName($next["class"]);
					#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:146: characters 6-42
					$item = StackItem::Method($cls, $next["function"]);
				}
			}
			#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:149: lines 149-160
			if (isset($entry["file"])) {
				#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:150: lines 150-156
				if (CallStack::$mapPosition !== null) {
					#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:151: characters 6-58
					$pos = (CallStack::$mapPosition)($entry["file"], $entry["line"]);
					#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:152: lines 152-155
					if (($pos !== null) && ($pos->source !== null) && ($pos->originalLine !== null)) {
						#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:153: characters 7-33
						$entry["file"] = $pos->source;
						#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:154: characters 7-39
						$entry["line"] = $pos->originalLine;
					}
				}
				#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:157: characters 5-61
				$result->arr[$result->length] = StackItem::FilePos($item, $entry["file"], $entry["line"]);
				++$result->length;

			} else if ($item !== null) {
				#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:159: characters 5-22
				$result->arr[$result->length] = $item;
				++$result->length;
			}
		}

		#/usr/share/haxe/std/php/_std/haxe/CallStack.hx:163: characters 3-16
		return $result;
	}
}

Boot::registerClass(CallStack::class, 'haxe.CallStack');
