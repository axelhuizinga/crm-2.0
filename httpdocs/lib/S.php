<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: src/S.hx
 */

use \php\_Boot\HxDynamicStr;
use \php\_Boot\HxAnon;
use \db\DbUser;
use \php\Boot;
use \me\cunity\debug\Out;
use \haxe\Log;
use \db\DbQuery;
use \shared\DbData;
use \php\Lib;
use \sys\io\File;
use \db\DbRelation;
use \haxe\Json;
use \php\_Boot\HxString;
use \me\cunity\php\Debug;
use \haxe\ds\StringMap;
use \haxe\io\Bytes;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \model\auth\User;
use \hxbit\Serializer;

class S {
	/**
	 * @var bool
	 */
	const debug = true;

	/**
	 * @var string
	 */
	static public $action;
	/**
	 * @var StringMap
	 */
	static public $conf;
	/**
	 * @var string
	 */
	static public $db;
	/**
	 * @var string
	 */
	static public $dbHost;
	/**
	 * @var string
	 */
	static public $dbPass;
	/**
	 * @var DbQuery
	 */
	static public $dbQuery;
	/**
	 * @var string
	 */
	static public $dbSchema;
	/**
	 * @var string
	 */
	static public $dbUser;
	/**
	 * @var string
	 */
	static public $dbViciBoxCRM;
	/**
	 * @var string
	 */
	static public $dbViciBoxDB;
	/**
	 * @var string
	 */
	static public $dbViciBoxHost;
	/**
	 * @var string
	 */
	static public $dbViciBoxPass;
	/**
	 * @var string
	 */
	static public $dbViciBoxUser;
	/**
	 * @var \PDO
	 */
	static public $dbh;
	/**
	 * @var string
	 */
	static public $devIP;
	/**
	 * @var bool
	 */
	static public $headerSent = false;
	/**
	 * @var string
	 */
	static public $host;
	/**
	 * @var \Date
	 */
	static public $last_request_time;
	/**
	 * @var StringMap
	 */
	static public $params;
	/**
	 * @var string
	 */
	static public $request_scheme;
	/**
	 * @var object
	 */
	static public $response;
	/**
	 * @var string
	 */
	static public $secret;
	/**
	 * @var \PDO
	 */
	static public $syncDbh;
	/**
	 * @var float
	 */
	static public $ts;
	/**
	 * @var int
	 */
	static public $user_id;
	/**
	 * @var StringMap
	 */
	static public $viciDial;
	/**
	 * @var string
	 */
	static public $vicidialUser;

	/**
	 * @param object $ob
	 * @param bool $doExit
	 * 
	 * @return void
	 */
	public static function add2Response ($ob, $doExit = false) {
		#src/S.hx:182: lines 182-192
		if ($doExit === null) {
			$doExit = false;
		}
		#src/S.hx:183: lines 183-184
		if ($ob->content !== null) {
			#src/S.hx:184: characters 4-34
			S::$response->content = Boot::addOrConcat(S::$response->content, $ob->content);
		}
		#src/S.hx:185: lines 185-186
		if ($ob->error !== null) {
			#src/S.hx:186: characters 4-30
			S::$response->error = Boot::addOrConcat(S::$response->error, $ob->error);
		}
		#src/S.hx:187: lines 187-191
		if ($doExit || ($ob->data !== null)) {
			#src/S.hx:189: characters 4-27
			S::$response->data = $ob->data;
			#src/S.hx:190: characters 4-18
			S::exit(S::$response);
		}
	}

	/**
	 * @param \PDO $dbConn
	 * @param \PDOStatement $stmt
	 * @param string $err
	 * @param object $pos
	 * 
	 * @return bool
	 */
	public static function checkStmt ($dbConn, $stmt, $err, $pos = null) {
		#src/S.hx:248: lines 248-252
		if ($stmt === false) {
			#src/S.hx:250: characters 4-9
			(Log::$trace)("" . ($pos->fileName??'null') . "::" . ($pos->lineNumber??'null') . (\Std::string($dbConn->errorInfo())??'null'), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 250,
				"className" => "S",
				"methodName" => "checkStmt",
			]));
			#src/S.hx:251: characters 23-81
			$_g = new StringMap();
			$key = "" . ($pos->fileName??'null') . "::" . ($pos->lineNumber??'null');
			$value = $dbConn->errorInfo();
			$_g->data[$key] = $value;
			#src/S.hx:251: characters 4-82
			S::sendErrors(null, $_g, new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 251,
				"className" => "S",
				"methodName" => "checkStmt",
			]));
		}
		#src/S.hx:253: lines 253-257
		if ($stmt->errorCode() !== "00000") {
			#src/S.hx:255: characters 4-9
			(Log::$trace)("" . ($pos->fileName??'null') . "::" . ($pos->lineNumber??'null') . (\Std::string($stmt->errorInfo())??'null'), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 255,
				"className" => "S",
				"methodName" => "checkStmt",
			]));
			#src/S.hx:256: characters 23-79
			$_g = new StringMap();
			$key = "" . ($pos->fileName??'null') . "::" . ($pos->lineNumber??'null');
			$value = $stmt->errorInfo();
			$_g->data[$key] = $value;
			#src/S.hx:256: characters 4-80
			S::sendErrors(null, $_g, new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 256,
				"className" => "S",
				"methodName" => "checkStmt",
			]));
		}
		#src/S.hx:258: characters 3-14
		return true;
	}

	/**
	 * @param string $table
	 * @param string $schema
	 * 
	 * @return \Array_hx
	 */
	public static function columnDefaults ($table, $schema = "crm") {
		#src/S.hx:406: lines 406-444
		if ($schema === null) {
			$schema = "crm";
		}
		#src/S.hx:407: lines 407-412
		$sql = "\x0A" . "SELECT column_name, column_default\x0A" . "FROM information_schema.columns\x0A" . ("WHERE (table_schema, table_name) = ('" . (S::quoteIdent($schema)??'null') . "', '" . (S::quoteIdent($table)??'null') . "')\x0A") . "ORDER BY ordinal_position;\x0A" . "";
		#src/S.hx:413: characters 3-44
		$stmt = S::$dbh->query($sql);
		#src/S.hx:414: lines 414-419
		if (S::$dbh->errorCode() !== "00000") {
			#src/S.hx:416: characters 4-9
			(Log::$trace)(S::$dbh->errorCode(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 416,
				"className" => "S",
				"methodName" => "columnDefaults",
			]));
			#src/S.hx:417: characters 4-9
			(Log::$trace)(S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 417,
				"className" => "S",
				"methodName" => "columnDefaults",
			]));
			#src/S.hx:418: characters 4-15
			exit(0);
		}
		#src/S.hx:420: characters 3-39
		$res = new \Array_hx();
		#src/S.hx:421: characters 3-49
		$data = $stmt->fetch(\PDO::FETCH_OBJ);
		#src/S.hx:422: lines 422-442
		while ($data) {
			#src/S.hx:425: lines 425-439
			if (Boot::dynamicField($data, 'column_name') !== "id") {
				#src/S.hx:427: characters 5-94
				$value = (Boot::dynamicField($data, 'column_default') === null ? null : HxDynamicStr::wrap(Boot::dynamicField($data, 'column_default'))->split("::")[0]);
				#src/S.hx:428: lines 428-436
				$defaultValue = $value;
				#src/S.hx:438: characters 5-74
				$res->arr[$res->length++] = new HxAnon([
					"column_name" => Boot::dynamicField($data, 'column_name'),
					"column_default" => $defaultValue,
				]);
			}
			#src/S.hx:441: characters 4-36
			$data = $stmt->fetch(\PDO::FETCH_OBJ);
		}
		#src/S.hx:443: characters 3-13
		return $res;
	}

	/**
	 * [Returns a map of metadatas for the columns of a given table]
	 * @param table
	 * @param db
	 * @return Map<String,NativeArray>
	 * 
	 * @param string $table
	 * @param string $db
	 * 
	 * @return StringMap
	 */
	public static function columnsMeta ($table, $db = "crm") {
		#src/S.hx:503: lines 503-526
		if ($db === null) {
			$db = "crm";
		}
		#src/S.hx:504: lines 504-507
		$sql = "\x0A" . "select * \x0A" . ("from " . ($table??'null') . " limit 1;\x0A") . "";
		#src/S.hx:508: characters 3-44
		$stmt = S::$dbh->query($sql);
		#src/S.hx:509: lines 509-514
		if (S::$dbh->errorCode() !== "00000") {
			#src/S.hx:511: characters 4-9
			(Log::$trace)(S::$dbh->errorCode(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 511,
				"className" => "S",
				"methodName" => "columnsMeta",
			]));
			#src/S.hx:512: characters 4-9
			(Log::$trace)(S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 512,
				"className" => "S",
				"methodName" => "columnsMeta",
			]));
			#src/S.hx:513: characters 4-15
			exit(0);
		}
		#src/S.hx:517: characters 4-56
		$colNames = S::tableFields($table, $db);
		#src/S.hx:518: characters 4-14
		$i = 0;
		#src/S.hx:519: lines 519-522
		$_g = new StringMap();
		#src/S.hx:520: lines 520-521
		$_g1 = 0;
		while ($_g1 < $colNames->length) {
			#src/S.hx:520: characters 9-10
			$c = ($colNames->arr[$_g1] ?? null);
			#src/S.hx:520: lines 520-521
			++$_g1;
			#src/S.hx:521: characters 6-34
			$value = $stmt->getColumnMeta($i++);
			$_g->data[$c] = $value;
		}
		#src/S.hx:519: lines 519-522
		return $_g;
	}

	/**
	 * @param string $table
	 * @param string $db
	 * 
	 * @return StringMap
	 */
	public static function columnsMeta1 ($table, $db = "crm") {
		#src/S.hx:529: lines 529-552
		if ($db === null) {
			$db = "crm";
		}
		#src/S.hx:530: lines 530-533
		$sql = "\x0A" . "select * \x0A" . ("from " . ($table??'null') . " limit 1;\x0A") . "";
		#src/S.hx:534: characters 3-44
		$stmt = S::$dbh->query($sql);
		#src/S.hx:535: lines 535-540
		if (S::$dbh->errorCode() !== "00000") {
			#src/S.hx:537: characters 4-9
			(Log::$trace)(S::$dbh->errorCode(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 537,
				"className" => "S",
				"methodName" => "columnsMeta1",
			]));
			#src/S.hx:538: characters 4-9
			(Log::$trace)(S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 538,
				"className" => "S",
				"methodName" => "columnsMeta1",
			]));
			#src/S.hx:539: characters 4-15
			exit(0);
		}
		#src/S.hx:541: lines 541-549
		if ($stmt->rowCount() === 1) {
			#src/S.hx:543: characters 4-56
			$colNames = S::tableFields($table, $db);
			#src/S.hx:544: characters 4-14
			$i = 0;
			#src/S.hx:545: lines 545-548
			$_g = new StringMap();
			#src/S.hx:546: lines 546-547
			$_g1 = 0;
			while ($_g1 < $colNames->length) {
				#src/S.hx:546: characters 9-10
				$c = ($colNames->arr[$_g1] ?? null);
				#src/S.hx:546: lines 546-547
				++$_g1;
				#src/S.hx:547: characters 6-34
				$value = $stmt->getColumnMeta($i++);
				$_g->data[$c] = $value;
			}
			#src/S.hx:545: lines 545-548
			return $_g;
		}
		#src/S.hx:550: characters 3-8
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 550,
			"className" => "S",
			"methodName" => "columnsMeta1",
		]));
		#src/S.hx:551: characters 3-14
		return null;
	}

	/**
	 * @param mixed $d
	 * 
	 * @return void
	 */
	public static function dump ($d) {
		#src/S.hx:320: lines 320-324
		if (!S::$headerSent) {
			#src/S.hx:322: characters 4-53
			header("Content-Type" . ": " . "application/json");
			#src/S.hx:323: characters 4-21
			S::$headerSent = true;
		}
		#src/S.hx:326: characters 3-33
		Lib::println(Json::phpJsonEncode($d, null, null));
	}

	/**
	 * @param mixed $a
	 * @param object $i
	 * 
	 * @return string
	 */
	public static function dumpNativeArray ($a, $i = null) {
		#src/S.hx:370: characters 3-21
		$d = "";
		#src/S.hx:371: characters 3-8
		(Log::$trace)(\Reflect::fields($a), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 371,
			"className" => "S",
			"methodName" => "dumpNativeArray",
			"customParams" => \Array_hx::wrap([$i]),
		]));
		#src/S.hx:372: characters 3-8
		(Log::$trace)(\Type::getClass($a), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 372,
			"className" => "S",
			"methodName" => "dumpNativeArray",
			"customParams" => \Array_hx::wrap([$i]),
		]));
		#src/S.hx:378: characters 3-11
		return $d;
	}

	/**
	 * @param mixed $d
	 * 
	 * @return void
	 */
	public static function edump ($d) {
		#src/S.hx:332: characters 3-31
		edump($d);
	}

	/**
	 * @param mixed $m
	 * @param object $pos
	 * 
	 * @return string
	 */
	public static function errorInfo ($m, $pos = null) {
		#src/S.hx:383: lines 383-384
		if ($pos === null) {
			#src/S.hx:384: characters 4-12
			return $m;
		}
		#src/S.hx:385: characters 3-50
		return "" . ($pos->fileName??'null') . "::" . ($pos->lineNumber??'null') . "::" . (\Std::string($m)??'null');
	}

	/**
	 * @param mixed $r
	 * 
	 * @return void
	 */
	public static function exit ($r) {
		#src/S.hx:196: characters 3-8
		(Log::$trace)(!S::$headerSent, new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 196,
			"className" => "S",
			"methodName" => "exit",
		]));
		#src/S.hx:197: lines 197-204
		if (!S::$headerSent) {
			#src/S.hx:199: characters 4-53
			header("Content-Type" . ": " . "application/json");
			#src/S.hx:200: characters 4-140
			header("Access-Control-Allow-Headers" . ": " . "access-control-allow-headers, access-control-allow-methods, access-control-allow-origin");
			#src/S.hx:201: characters 4-61
			header("Access-Control-Allow-Credentials" . ": " . "true");
			#src/S.hx:202: characters 4-75
			header("Access-Control-Allow-Origin" . ": " . ("https://" . (S::$devIP??'null') . ":9000"));
			#src/S.hx:203: characters 4-21
			S::$headerSent = true;
		}
		#src/S.hx:207: characters 3-8
		(Log::$trace)(Json::phpJsonEncode($r, null, null), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 207,
			"className" => "S",
			"methodName" => "exit",
		]));
		#src/S.hx:210: characters 3-31
		echo(\Std::string(Json::phpJsonEncode($r, null, null)));
		#src/S.hx:211: characters 3-8
		(Log::$trace)("done at " . (microtime(true) - S::$ts) . " ms", new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 211,
			"className" => "S",
			"methodName" => "exit",
		]));
		#src/S.hx:212: characters 3-14
		exit(0);
	}

	/**
	 * @return StringMap
	 */
	public static function getViciDialData () {
		#src/S.hx:556: characters 3-31
		S::saveLog((S::$conf->data["ini"] ?? null), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 556,
			"className" => "S",
			"methodName" => "getViciDialData",
		]));
		#src/S.hx:557: characters 3-43
		$ini = (S::$conf->data["ini"] ?? null);
		#src/S.hx:558: characters 3-24
		$ini = $ini["vicidial"];
		#src/S.hx:559: characters 3-80
		$fields = \Reflect::fields(Lib::objectOfAssociativeArray($ini));
		#src/S.hx:560: lines 560-563
		$_g = new StringMap();
		#src/S.hx:561: lines 561-562
		$_g1 = 0;
		while ($_g1 < $fields->length) {
			#src/S.hx:561: characters 8-9
			$f = ($fields->arr[$_g1] ?? null);
			#src/S.hx:561: lines 561-562
			++$_g1;
			#src/S.hx:562: characters 4-15
			$_g->data[$f] = $ini[$f];
		}
		#src/S.hx:560: lines 560-563
		$info = $_g;
		#src/S.hx:564: characters 3-14
		return $info;
	}

	/**
	 * @return void
	 */
	public static function main () {
		#src/S.hx:111: characters 3-18
		S::$ts = microtime(true);
		#src/S.hx:112: characters 3-45
		S::$last_request_time = \Date::fromTime(S::$ts / 1000);
		#src/S.hx:113: characters 3-70
		$now = \DateTools::format(\Date::now(), "%d.%m.%y %H:%M:%S");
		#src/S.hx:115: characters 3-8
		(Log::$trace)((\DateTools::format(S::$last_request_time, "%d.%m.%y %H:%M:%S")??'null') . (" == " . ($now??'null')), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 115,
			"className" => "S",
			"methodName" => "main",
		]));
		#src/S.hx:120: lines 120-121
		if (isset($_SERVER['VERIFIED'])) {
			#src/S.hx:121: characters 4-9
			(Log::$trace)($_SERVER['VERIFIED'], new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 121,
				"className" => "S",
				"methodName" => "main",
			]));
		}
		#src/S.hx:124: characters 3-35
		S::$response = new HxAnon([
			"content" => "",
			"error" => "",
		]);
		#src/S.hx:127: characters 3-27
		S::$dbQuery = \Model::binary();
		#src/S.hx:130: characters 3-28
		S::$params = S::$dbQuery->dbParams;
		#src/S.hx:133: characters 3-30
		S::$devIP = (S::$params->data["devIP"] ?? null);
		#src/S.hx:134: characters 3-8
		(Log::$trace)((S::$params === null ? "null" : S::$params->toString()), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 134,
			"className" => "S",
			"methodName" => "main",
		]));
		#src/S.hx:136: characters 3-32
		S::$action = (S::$params->data["action"] ?? null);
		#src/S.hx:137: lines 137-140
		if ((mb_strlen(S::$action) === 0) || ((S::$params->data["classPath"] ?? null) === null)) {
			#src/S.hx:139: characters 4-71
			S::exit(new HxAnon(["error" => "required params action and/or classPath missing"]));
		}
		#src/S.hx:142: characters 18-55
		$tmp = "pgsql:dbname=" . (S::$db??'null') . ";client_encoding=UTF8";
		#src/S.hx:142: characters 57-63
		$tmp1 = S::$dbUser;
		#src/S.hx:142: characters 64-70
		$tmp2 = S::$dbPass;
		#src/S.hx:142: lines 142-143
		S::$dbh = new \PDO($tmp, $tmp1, $tmp2, ((array)(\Array_hx::wrap([
			\PDO::ATTR_PERSISTENT,
			true,
		]))));
		#src/S.hx:146: lines 146-153
		if ((S::$params->data["extDB"] ?? null)) {
			#src/S.hx:149: characters 4-9
			(Log::$trace)("mysql:host=" . (S::$dbViciBoxHost??'null') . ";dbname=" . (S::$dbViciBoxCRM??'null'), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 149,
				"className" => "S",
				"methodName" => "main",
			]));
			#src/S.hx:150: characters 23-69
			$tmp = "mysql:host=" . (S::$dbViciBoxHost??'null') . ";dbname=" . (S::$dbViciBoxCRM??'null');
			#src/S.hx:151: characters 5-18
			$tmp1 = S::$dbViciBoxUser;
			#src/S.hx:151: characters 19-32
			$tmp2 = S::$dbViciBoxPass;
			#src/S.hx:150: lines 150-151
			S::$syncDbh = new \PDO($tmp, $tmp1, $tmp2, ((array)(\Array_hx::wrap([
				\PDO::ATTR_PERSISTENT,
				true,
			]))));
		}
		#src/S.hx:155: characters 3-60
		S::$dbh->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
		#src/S.hx:156: lines 156-157
		if ((S::$params->data["extDB"] ?? null)) {
			#src/S.hx:157: characters 4-65
			S::$syncDbh->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
		}
		#src/S.hx:159: characters 3-23
		S::saveRequest(S::$dbQuery);
		#src/S.hx:161: lines 161-165
		if (S::$action === "resetPassword") {
			#src/S.hx:163: characters 4-30
			User::resetPassword(S::$params);
			#src/S.hx:164: characters 4-18
			S::exit(S::$response);
		}
		#src/S.hx:167: characters 3-39
		$jwt = S::$dbQuery->dbUser->jwt;
		#src/S.hx:169: characters 3-8
		(Log::$trace)((mb_strlen($jwt)??'null') . ":" . (\Std::string($jwt !== null)??'null'), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 169,
			"className" => "S",
			"methodName" => "main",
		]));
		#src/S.hx:170: lines 170-175
		if (mb_strlen($jwt) > 0) {
			#src/S.hx:172: lines 172-173
			if (User::verify(S::$dbQuery)) {
				#src/S.hx:173: characters 5-28
				\Model::dispatch(S::$dbQuery);
			}
			#src/S.hx:174: characters 4-93
			S::exit(new HxAnon(["Error" => "Model.dispatch " . (\Std::string((S::$params->data["classPath"] ?? null))??'null') . "." . (S::$action??'null') . " did not send anything"]));
		}
		#src/S.hx:177: characters 3-29
		User::login(S::$dbQuery->dbUser);
		#src/S.hx:178: characters 3-17
		S::exit(S::$response);
	}

	/**
	 * @return int
	 */
	public static function newMemberID () {
		#src/S.hx:336: lines 336-338
		$stmt = S::$dbh->query("SELECT  MAX(CAST(vendor_lead_code AS UNSIGNED)) FROM vicidial_list WHERE list_id=10000");
		#src/S.hx:339: characters 10-66
		if ($stmt->rowCount() === 0) {
			#src/S.hx:339: characters 32-33
			return 1;
		} else {
			#src/S.hx:339: characters 35-65
			return $stmt->fetch(\PDO::FETCH_COLUMN) + 1;
		}
	}

	/**
	 * @param string $f
	 * 
	 * @return string
	 */
	public static function quoteIdent ($f) {
		#src/S.hx:448: lines 448-451
		if ((new \EReg("^([a-zA-Z_])[a-zA-Z0-9_]+\$", ""))->match($f)) {
			#src/S.hx:450: characters 4-12
			return $f;
		}
		#src/S.hx:452: characters 3-16
		return "\"" . ($f??'null') . "\"";
	}

	/**
	 * @param mixed $what
	 * @param object $pos
	 * 
	 * @return void
	 */
	public static function saveLog ($what, $pos = null) {
		#src/S.hx:392: characters 3-51
		$fields = \Reflect::fields($what);
		#src/S.hx:393: lines 393-400
		$_g = 0;
		while ($_g < $fields->length) {
			#src/S.hx:393: characters 8-9
			$f = ($fields->arr[$_g] ?? null);
			#src/S.hx:393: lines 393-400
			++$_g;
			#src/S.hx:395: lines 395-398
			if (HxString::indexOf($f, "pass") > -1) {
				#src/S.hx:397: characters 5-13
				continue;
			}
			#src/S.hx:399: characters 4-9
			(Log::$trace)(\Reflect::field($what, $f), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 399,
				"className" => "S",
				"methodName" => "saveLog",
				"customParams" => \Array_hx::wrap([$pos]),
			]));
		}
	}

	/**
	 * @param DbQuery $dbQuery
	 * 
	 * @return bool
	 */
	public static function saveRequest ($dbQuery) {
		#src/S.hx:576: characters 3-83
		$rTime = \DateTools::format(S::$last_request_time, "'%Y-%m-%d %H:%M:%S'");
		#src/S.hx:577: characters 3-158
		$stmt = S::$dbh->prepare("UPDATE activity SET \"request\"=:request FROM users WHERE users.id=:id AND users.id=activity.user", ((array)(null)));
		#src/S.hx:580: characters 41-58
		$dbQuery1 = $dbQuery->dbUser->id;
		#src/S.hx:579: lines 579-581
		$success = \Model::paramExecute($stmt, ((array)(new HxAnon([
			":id" => $dbQuery1,
			":request" => Json::phpJsonEncode($dbQuery, null, null),
		]))));
		#src/S.hx:582: lines 582-583
		if (\Std::parseInt($stmt->errorCode()) > 0) {
			#src/S.hx:583: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 583,
				"className" => "S",
				"methodName" => "saveRequest",
			]));
		}
		#src/S.hx:584: characters 3-17
		return $success;
	}

	/**
	 * @param string $r
	 * 
	 * @return void
	 */
	public static function send ($r) {
		#src/S.hx:217: lines 217-224
		if (!S::$headerSent) {
			#src/S.hx:219: characters 4-47
			header("Content-Type" . ": " . "text/plain");
			#src/S.hx:220: characters 4-140
			header("Access-Control-Allow-Headers" . ": " . "access-control-allow-headers, access-control-allow-methods, access-control-allow-origin");
			#src/S.hx:221: characters 4-61
			header("Access-Control-Allow-Credentials" . ": " . "true");
			#src/S.hx:222: characters 4-75
			header("Access-Control-Allow-Origin" . ": " . ("https://" . (S::$devIP??'null') . ":9000"));
			#src/S.hx:223: characters 4-21
			S::$headerSent = true;
		}
		#src/S.hx:225: characters 3-15
		echo(\Std::string($r));
		#src/S.hx:226: characters 3-8
		(Log::$trace)("done at " . (microtime(true) - S::$ts) . " ms", new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 226,
			"className" => "S",
			"methodName" => "send",
		]));
		#src/S.hx:227: characters 3-14
		exit(0);
	}

	/**
	 * @param DbData $dbData
	 * @param object $data
	 * 
	 * @return bool
	 */
	public static function sendData ($dbData, $data) {
		#src/S.hx:232: characters 3-39
		$s = new Serializer();
		#src/S.hx:234: lines 234-239
		if ($data !== null) {
			#src/S.hx:235: characters 4-19
			$dbData->dataInfo = \Util::copyStringMap($dbData->dataInfo, $data->info);
			#src/S.hx:236: lines 236-238
			if ($data->rows !== null) {
				#src/S.hx:237: characters 16-36
				$data1 = array_values($data->rows);
				$_g_current = 0;
				$_g_length = count($data1);
				$_g_data = $data1;
				#src/S.hx:237: lines 237-238
				while ($_g_current < $_g_length) {
					$row = $_g_data[$_g_current++];
					#src/S.hx:238: characters 6-59
					$_this = $dbData->dataRows;
					$x = Lib::hashOfAssociativeArray($row);
					$_this->arr[$_this->length++] = $x;
				}
			}
		}
		#src/S.hx:242: characters 9-27
		$tmp = ($dbData->dataRows->arr[0] ?? null);
		#src/S.hx:242: characters 3-8
		(Log::$trace)(($tmp === null ? "null" : $tmp->toString()), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 242,
			"className" => "S",
			"methodName" => "sendData",
		]));
		#src/S.hx:243: characters 3-40
		return S::sendbytes($s->serialize($dbData));
	}

	/**
	 * @param DbData $dbData
	 * @param StringMap $err
	 * @param object $pos
	 * 
	 * @return bool
	 */
	public static function sendErrors ($dbData = null, $err = null, $pos = null) {
		#src/S.hx:263: characters 4-9
		(Log::$trace)("" . ($pos->fileName??'null') . "::" . ($pos->lineNumber??'null'), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 263,
			"className" => "S",
			"methodName" => "sendErrors",
		]));
		#src/S.hx:264: lines 264-265
		if ($dbData === null) {
			#src/S.hx:265: characters 4-25
			$dbData = new DbData();
		}
		#src/S.hx:267: characters 3-39
		$s = new Serializer();
		#src/S.hx:268: lines 268-274
		if ($err !== null) {
			#src/S.hx:270: characters 14-24
			$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($err->data))));
			while ($k->hasNext()) {
				#src/S.hx:270: lines 270-273
				$k1 = $k->next();
				#src/S.hx:272: characters 5-34
				$this1 = $dbData->dataErrors;
				$v = ($err->data[$k1] ?? null);
				$this1->data[$k1] = $v;
			}
		}
		#src/S.hx:275: characters 3-8
		(Log::$trace)(($dbData->dataErrors === null ? "null" : $dbData->dataErrors->toString()), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 275,
			"className" => "S",
			"methodName" => "sendErrors",
		]));
		#src/S.hx:276: characters 3-40
		return S::sendbytes($s->serialize($dbData));
	}

	/**
	 * @param DbData $dbData
	 * @param StringMap $info
	 * 
	 * @return bool
	 */
	public static function sendInfo ($dbData, $info = null) {
		#src/S.hx:281: characters 3-39
		$s = new Serializer();
		#src/S.hx:282: lines 282-288
		if ($info !== null) {
			#src/S.hx:284: characters 14-25
			$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($info->data))));
			while ($k->hasNext()) {
				#src/S.hx:284: lines 284-287
				$k1 = $k->next();
				#src/S.hx:286: characters 5-33
				$this1 = $dbData->dataInfo;
				$v = ($info->data[$k1] ?? null);
				$this1->data[$k1] = $v;
			}
		}
		#src/S.hx:292: characters 3-40
		return S::sendbytes($s->serialize($dbData));
	}

	/**
	 * @param Bytes $b
	 * 
	 * @return bool
	 */
	public static function sendbytes ($b) {
		#src/S.hx:302: characters 3-8
		(Log::$trace)("OK " . ($b->length??'null'), new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 302,
			"className" => "S",
			"methodName" => "sendbytes",
		]));
		#src/S.hx:303: characters 3-60
		header("Content-Type" . ": " . "application/octet-stream");
		#src/S.hx:304: characters 3-139
		header("Access-Control-Allow-Headers" . ": " . "access-control-allow-headers, access-control-allow-methods, access-control-allow-origin");
		#src/S.hx:305: characters 3-60
		header("Access-Control-Allow-Credentials" . ": " . "true");
		#src/S.hx:306: lines 306-307
		if (S::$devIP !== null) {
			#src/S.hx:307: characters 3-74
			header("Access-Control-Allow-Origin" . ": " . ("https://" . (S::$devIP??'null') . ":9000"));
		}
		#src/S.hx:309: characters 3-46
		$out = File::write("php://output", true);
		#src/S.hx:310: characters 3-23
		$out->set_bigEndian(true);
		#src/S.hx:311: characters 3-15
		$out->write($b);
		#src/S.hx:312: characters 3-8
		(Log::$trace)("done at " . (microtime(true) - S::$ts) . " ms", new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 312,
			"className" => "S",
			"methodName" => "sendbytes",
		]));
		#src/S.hx:313: characters 3-14
		exit(0);
		#src/S.hx:314: characters 3-8
		(Log::$trace)("SHOULD NEVER EVER HAPPEN", new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 314,
			"className" => "S",
			"methodName" => "sendbytes",
		]));
		#src/S.hx:315: characters 3-14
		return true;
	}

	/**
	 * @param string $table
	 * @param string $db
	 * 
	 * @return \Array_hx
	 */
	public static function syncTableFields ($table, $db = "fly_crm") {
		#src/S.hx:477: lines 477-493
		if ($db === null) {
			$db = "fly_crm";
		}
		#src/S.hx:478: lines 478-480
		$sql = "\x0A" . ("SELECT GROUP_CONCAT(COLUMN_NAME) FROM information_schema.columns WHERE table_schema = '" . ($db??'null') . "' AND table_name = '" . ($table??'null') . "'\x0A") . "";
		#src/S.hx:481: characters 3-46
		$stmt = S::$syncDbh->query($sql);
		#src/S.hx:482: lines 482-487
		if (S::$dbh->errorCode() !== "00000") {
			#src/S.hx:484: characters 4-9
			(Log::$trace)(S::$syncDbh->errorCode(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 484,
				"className" => "S",
				"methodName" => "syncTableFields",
			]));
			#src/S.hx:485: characters 4-9
			(Log::$trace)(S::$syncDbh->errorInfo(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 485,
				"className" => "S",
				"methodName" => "syncTableFields",
			]));
			#src/S.hx:486: characters 4-15
			exit(0);
		}
		#src/S.hx:488: lines 488-491
		if ($stmt->rowCount() === 1) {
			#src/S.hx:490: characters 4-40
			return HxString::split($stmt->fetchColumn(), ",");
		}
		#src/S.hx:492: characters 3-14
		return null;
	}

	/**
	 * @param string $table
	 * @param string $db
	 * 
	 * @return \Array_hx
	 */
	public static function tableFields ($table, $db = "crm") {
		#src/S.hx:456: lines 456-473
		if ($db === null) {
			$db = "crm";
		}
		#src/S.hx:457: lines 457-459
		$sql = "\x0A" . ("SELECT string_agg(COLUMN_NAME,',') FROM information_schema.columns WHERE table_schema = '" . ($db??'null') . "' AND table_name = '" . ($table??'null') . "'\x0A") . "";
		#src/S.hx:461: characters 3-44
		$stmt = S::$dbh->query($sql);
		#src/S.hx:462: lines 462-467
		if (S::$dbh->errorCode() !== "00000") {
			#src/S.hx:464: characters 4-9
			(Log::$trace)(S::$dbh->errorCode(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 464,
				"className" => "S",
				"methodName" => "tableFields",
			]));
			#src/S.hx:465: characters 4-9
			(Log::$trace)(S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 465,
				"className" => "S",
				"methodName" => "tableFields",
			]));
			#src/S.hx:466: characters 4-15
			exit(0);
		}
		#src/S.hx:468: lines 468-471
		if ($stmt->rowCount() === 1) {
			#src/S.hx:470: characters 4-40
			return HxString::split($stmt->fetchColumn(), ",");
		}
		#src/S.hx:472: characters 3-14
		return null;
	}

	/**
	 * @param string $db
	 * 
	 * @return \Array_hx
	 */
	public static function tables ($db = "crm") {
		#src/S.hx:343: lines 343-366
		if ($db === null) {
			$db = "crm";
		}
		#src/S.hx:344: lines 344-346
		$sql = "\x0A" . ("SELECT string_agg(TABLE_NAME,',') FROM information_schema.tables WHERE table_schema = '" . ($db??'null') . "'\x0A") . "";
		#src/S.hx:347: characters 3-8
		(Log::$trace)($sql, new HxAnon([
			"fileName" => "src/S.hx",
			"lineNumber" => 347,
			"className" => "S",
			"methodName" => "tables",
		]));
		#src/S.hx:348: lines 348-350
		$stmt = S::$dbh->query($sql);
		#src/S.hx:355: lines 355-360
		if (S::$dbh->errorCode() !== "00000") {
			#src/S.hx:357: characters 4-9
			(Log::$trace)(S::$dbh->errorCode(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 357,
				"className" => "S",
				"methodName" => "tables",
			]));
			#src/S.hx:358: characters 4-9
			(Log::$trace)(S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/S.hx",
				"lineNumber" => 358,
				"className" => "S",
				"methodName" => "tables",
			]));
			#src/S.hx:359: characters 4-15
			exit(0);
		}
		#src/S.hx:361: lines 361-364
		if ($stmt->rowCount() === 1) {
			#src/S.hx:363: characters 4-40
			return HxString::split($stmt->fetchColumn(), ",");
		}
		#src/S.hx:365: characters 3-14
		return null;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;

		#src/S.hx:588: characters 3-54
		$branch = "crm";
		#src/S.hx:589: characters 3-57
		require_once(("../." . ($branch??'null') . "/db.php"));
		#src/S.hx:590: characters 3-61
		file_put_contents($appLog,'.', FILE_APPEND);
		#src/S.hx:591: characters 3-64
		require_once(("../." . ($branch??'null') . "/functions.php"));
		#src/S.hx:593: characters 3-49
		Debug::$logFile = $appLog;
		#src/S.hx:594: characters 3-32
		Log::$trace = Boot::getStaticClosure(Debug::class, '_trace');
		#src/S.hx:595: characters 3-59
		Out::$skipFields = \Array_hx::wrap([
			"admin",
			"keyPhrase",
			"pass",
			"password",
		]);
		#src/S.hx:597: characters 3-26
		S::$db = $DB;
		#src/S.hx:598: characters 3-39
		S::$dbSchema = $DB_schema;
		#src/S.hx:599: characters 3-37
		S::$dbHost = $DB_server;
		#src/S.hx:600: characters 3-35
		S::$dbUser = $DB_user;
		#src/S.hx:601: characters 3-35
		S::$dbPass = $DB_pass;
		#src/S.hx:602: characters 3-50
		S::$dbViciBoxUser = $DB_vicibox_user;
		#src/S.hx:603: characters 3-48
		S::$dbViciBoxCRM = $DB_vicibox_crm;
		#src/S.hx:604: characters 3-46
		S::$dbViciBoxDB = $DB_vicibox_db;
		#src/S.hx:605: characters 3-52
		S::$dbViciBoxHost = $DB_vicibox_server;
		#src/S.hx:606: characters 3-50
		S::$dbViciBoxPass = $DB_vicibox_pass;
		#src/S.hx:607: characters 3-27
		S::$host = $_SERVER["SERVER_NAME"];
		#src/S.hx:608: characters 3-61
		S::$request_scheme = $_SERVER['REQUEST_SCHEME'];
		#src/S.hx:609: characters 3-34
		S::$secret = $secret;
		#src/S.hx:611: characters 3-36
		S::$conf = \Config::load("appData.js");
		#src/S.hx:612: characters 3-45
		$ini = $ini;
		#src/S.hx:613: characters 3-23
		S::$conf->data["ini"] = $ini;
		#src/S.hx:615: characters 3-15
		new DbData();
		#src/S.hx:616: characters 3-19
		new DbUser(null);
		#src/S.hx:617: characters 3-23
		new DbRelation(null);
		#src/S.hx:618: characters 3-16
		new DbQuery();

	}
}

Boot::registerClass(S::class, 'S');
S::__hx__init();
