<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: ../lib/db/DbQuery.hx
 */

namespace db;

use \hxbit\Serializable;
use \haxe\io\_BytesData\Container;
use \php\Boot;
use \haxe\Exception;
use \hxbit\Schema;
use \haxe\io\Error;
use \hxbit\PropTypeDesc;
use \haxe\ds\StringMap;
use \haxe\io\Bytes;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \hxbit\Serializer;

class DbQuery implements Serializable {
	/**
	 * @var int
	 */
	static public $__clid;

	/**
	 * @var int
	 */
	public $__uid;
	/**
	 * @var StringMap
	 */
	public $dbParams;
	/**
	 * @var DbUser
	 */
	public $dbUser;
	/**
	 * @var StringMap
	 */
	public $relations;

	/**
	 * @param object $dp
	 * 
	 * @return void
	 */
	public function __construct ($dp = null) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:658: characters 52-79
		$this->__uid = (Serializer::$SEQ << 24) | ++Serializer::$UID;
		#../lib/db/DbQuery.hx:39: characters 3-23
		$this->dbParams = new StringMap();
		#../lib/db/DbQuery.hx:40: lines 40-53
		if ($dp !== null) {
			#../lib/db/DbQuery.hx:41: characters 4-22
			$this->dbUser = $dp->dbUser;
			#../lib/db/DbQuery.hx:42: characters 4-28
			$this->relations = $dp->relations;
			#../lib/db/DbQuery.hx:43: lines 43-52
			$_g = 0;
			$_g1 = \Reflect::fields($dp);
			while ($_g < $_g1->length) {
				#../lib/db/DbQuery.hx:43: characters 8-9
				$f = ($_g1->arr[$_g] ?? null);
				#../lib/db/DbQuery.hx:43: lines 43-52
				++$_g;
				#../lib/db/DbQuery.hx:44: lines 44-51
				if ($f === "__uid" || $f === "dbUser" || $f === "getCLID" || $f === "getSerializeSchema" || $f === "relations" || $f === "serialize" || $f === "unserialize" || $f === "unserializeInit") {
				} else {
					#../lib/db/DbQuery.hx:48: characters 7-35
					$v = \Reflect::field($dp, $f);
					#../lib/db/DbQuery.hx:50: characters 8-26
					$this->dbParams->data[$f] = $v;
				}
			}
		}
	}

	/**
	 * @return int
	 */
	public function getCLID () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:674: characters 61-74
		return DbQuery::$__clid;
	}

	/**
	 * @return Schema
	 */
	public function getSerializeSchema () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:708: characters 7-101
		$schema = new Schema();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "dbParams";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PMap(PropTypeDesc::PString(), PropTypeDesc::PDynamic());
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "relations";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PMap(PropTypeDesc::PString(), PropTypeDesc::PSerializable("db.DbRelation"));
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 13-46
		$_this = $schema->fieldsNames;
		$_this->arr[$_this->length++] = "dbUser";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:697: characters 48-110
		$_this = $schema->fieldsTypes;
		$_this->arr[$_this->length++] = PropTypeDesc::PSerializable("db.DbUser");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:710: characters 7-61
		$schema->isFinal = Serializer::isClassFinal(DbQuery::$__clid);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:711: characters 7-20
		return $schema;
	}

	/**
	 * @param Serializer $__ctx
	 * 
	 * @return void
	 */
	public function serialize ($__ctx) {
		#../lib/db/DbQuery.hx:33: characters 6-46
		$a = $this->dbParams;
		if ($a === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$_g = new \Array_hx();
			$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($a->data))));
			while ($k->hasNext()) {
				$k1 = $k->next();
				$_g->arr[$_g->length++] = $k1;
			}
			$keys = $_g;
			$v = $keys->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_g = 0;
			while ($_g < $keys->length) {
				$k = ($keys->arr[$_g] ?? null);
				++$_g;
				if ($k === null) {
					$_this = $__ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$b = strlen($k);
					$b1 = new Bytes($b, new Container($k));
					$v = $b1->length + 1;
					if (($v >= 0) && ($v < 128)) {
						$_this1 = $__ctx->out;
						$_this1->b = ($_this1->b . chr($v));
					} else {
						$_this2 = $__ctx->out;
						$_this2->b = ($_this2->b . chr(128));
						$__ctx->out->addInt32($v);
					}
					$_this3 = $__ctx->out;
					$_this3->b = ($_this3->b . $b1->b->s);
				}
				$__ctx->addDynamic(($a->data[$k] ?? null));
			}
		}
		#../lib/db/DbQuery.hx:34: characters 6-50
		$a = $this->relations;
		if ($a === null) {
			$_this = $__ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			$_g = new \Array_hx();
			$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($a->data))));
			while ($k->hasNext()) {
				$k1 = $k->next();
				$_g->arr[$_g->length++] = $k1;
			}
			$keys = $_g;
			$v = $keys->length + 1;
			if (($v >= 0) && ($v < 128)) {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr($v));
			} else {
				$_this = $__ctx->out;
				$_this->b = ($_this->b . chr(128));
				$__ctx->out->addInt32($v);
			}
			$_g = 0;
			while ($_g < $keys->length) {
				$k = ($keys->arr[$_g] ?? null);
				++$_g;
				if ($k === null) {
					$_this = $__ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$b = strlen($k);
					$b1 = new Bytes($b, new Container($k));
					$v = $b1->length + 1;
					if (($v >= 0) && ($v < 128)) {
						$_this1 = $__ctx->out;
						$_this1->b = ($_this1->b . chr($v));
					} else {
						$_this2 = $__ctx->out;
						$_this2->b = ($_this2->b . chr(128));
						$__ctx->out->addInt32($v);
					}
					$_this3 = $__ctx->out;
					$_this3->b = ($_this3->b . $b1->b->s);
				}
				$__ctx->addKnownRef(($a->data[$k] ?? null));
			}
		}
		#../lib/db/DbQuery.hx:35: characters 6-31
		$__ctx->addKnownRef($this->dbUser);
	}

	/**
	 * @param Serializer $__ctx
	 * 
	 * @return void
	 */
	public function unserialize ($__ctx) {
		#../lib/db/DbQuery.hx:33: characters 6-46
		$k0 = null;
		$v0 = null;
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			$m = new StringMap();
			while (--$len > 0) {
				$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
				if ($v === 128) {
					$_this = $__ctx->input;
					$pos = $__ctx->inPos;
					$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
					$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
					$__ctx->inPos += 4;
				}
				$len1 = $v;
				if ($len1 === 0) {
					$k0 = null;
				} else {
					--$len1;
					$_this1 = $__ctx->input;
					$pos1 = $__ctx->inPos;
					$s = null;
					if (($pos1 < 0) || ($len1 < 0) || (($pos1 + $len1) > $_this1->length)) {
						throw Exception::thrown(Error::OutsideBounds());
					} else {
						$s = substr($_this1->b->s, $pos1, $len1);
					}
					$__ctx->inPos += $len1;
					$k0 = $s;
				}
				$k = $k0;
				$v0 = $__ctx->getDynamic();
				$v2 = $v0;
				$m->data[$k] = $v2;
			}
			$tmp = $m;
		}
		$this->dbParams = $tmp;
		#../lib/db/DbQuery.hx:34: characters 6-50
		$k0 = null;
		$v0 = null;
		$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
		if ($v === 128) {
			$_this = $__ctx->input;
			$pos = $__ctx->inPos;
			$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
			$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
			$__ctx->inPos += 4;
		}
		$len = $v;
		$tmp = null;
		if ($len === 0) {
			$tmp = null;
		} else {
			$m = new StringMap();
			while (--$len > 0) {
				$v = ord($__ctx->input->b->s[$__ctx->inPos++]);
				if ($v === 128) {
					$_this = $__ctx->input;
					$pos = $__ctx->inPos;
					$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
					$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
					$__ctx->inPos += 4;
				}
				$len1 = $v;
				if ($len1 === 0) {
					$k0 = null;
				} else {
					--$len1;
					$_this1 = $__ctx->input;
					$pos1 = $__ctx->inPos;
					$s = null;
					if (($pos1 < 0) || ($len1 < 0) || (($pos1 + $len1) > $_this1->length)) {
						throw Exception::thrown(Error::OutsideBounds());
					} else {
						$s = substr($_this1->b->s, $pos1, $len1);
					}
					$__ctx->inPos += $len1;
					$k0 = $s;
				}
				$k = $k0;
				$v0 = $__ctx->getRef(Boot::getClass(DbRelation::class), DbRelation::$__clid);
				$v2 = $v0;
				$m->data[$k] = $v2;
			}
			$tmp = $m;
		}
		$this->relations = $tmp;
		#../lib/db/DbQuery.hx:35: characters 6-31
		$this->dbUser = $__ctx->getRef(Boot::getClass(DbUser::class), DbUser::$__clid);
	}

	/**
	 * @return void
	 */
	public function unserializeInit () {
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$__clid = Serializer::registerClass(Boot::getClass(DbQuery::class));
	}
}

Boot::registerClass(DbQuery::class, 'db.DbQuery');
DbQuery::__hx__init();
