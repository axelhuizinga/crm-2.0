<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: /opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx
 */

namespace hxbit\enumSer;

use \php\_Boot\HxAnon;
use \haxe\io\_BytesData\Container;
use \php\Boot;
use \haxe\Exception;
use \hxbit\Schema;
use \haxe\io\Error;
use \hxbit\PropTypeDesc;
use \haxe\io\Bytes;
use \hxbit\Serializer;

class Hxbit_PropTypeDesc {
	/**
	 * @param Serializer $ctx
	 * @param PropTypeDesc $v
	 * 
	 * @return void
	 */
	public static function doSerialize ($ctx, $v) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:846: characters 37-125
		if ($v === null) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:846: characters 53-67
			$_this = $ctx->out;
			$_this->b = ($_this->b . chr(0));
		} else {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			$__hx__switch = ($v->index);
			if ($__hx__switch === 0) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:825: characters 21-47
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(1));
			} else if ($__hx__switch === 1) {
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(2));
			} else if ($__hx__switch === 2) {
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(3));
			} else if ($__hx__switch === 3) {
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(4));
			} else if ($__hx__switch === 4) {
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(5));
			} else if ($__hx__switch === 5) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
				$name = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:801: characters 9-35
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(6));
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:65: characters 2-33
				if ($name === null) {
					$_this = $ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$b = strlen($name);
					$b1 = new Bytes($b, new Container($name));
					$v1 = $b1->length + 1;
					if (($v1 >= 0) && ($v1 < 128)) {
						$_this = $ctx->out;
						$_this->b = ($_this->b . chr($v1));
					} else {
						$_this = $ctx->out;
						$_this->b = ($_this->b . chr(128));
						$ctx->out->addInt32($v1);
					}
					$_this = $ctx->out;
					$_this->b = ($_this->b . $b1->b->s);
				}
			} else if ($__hx__switch === 6) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
				$name = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:801: characters 9-35
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(7));
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:66: characters 2-25
				if ($name === null) {
					$_this = $ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$b = strlen($name);
					$b1 = new Bytes($b, new Container($name));
					$v1 = $b1->length + 1;
					if (($v1 >= 0) && ($v1 < 128)) {
						$_this = $ctx->out;
						$_this->b = ($_this->b . chr($v1));
					} else {
						$_this = $ctx->out;
						$_this->b = ($_this->b . chr(128));
						$ctx->out->addInt32($v1);
					}
					$_this = $ctx->out;
					$_this->b = ($_this->b . $b1->b->s);
				}
			} else if ($__hx__switch === 7) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
				$v1 = $v->params[1];
				$k = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:801: characters 9-35
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(8));
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:67: characters 2-37
				Hxbit_PropTypeDesc::doSerialize($ctx, $k);
				Hxbit_PropTypeDesc::doSerialize($ctx, $v1);
			} else if ($__hx__switch === 8) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
				$k = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:801: characters 9-35
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(9));
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:68: characters 2-25
				Hxbit_PropTypeDesc::doSerialize($ctx, $k);
			} else if ($__hx__switch === 9) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
				$fields = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:801: characters 9-35
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(10));
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:69: characters 2-73
				if ($fields === null) {
					$_this = $ctx->out;
					$_this->b = ($_this->b . chr(0));
				} else {
					$v1 = $fields->length + 1;
					if (($v1 >= 0) && ($v1 < 128)) {
						$_this = $ctx->out;
						$_this->b = ($_this->b . chr($v1));
					} else {
						$_this = $ctx->out;
						$_this->b = ($_this->b . chr(128));
						$ctx->out->addInt32($v1);
					}
					$_g = 0;
					while ($_g < $fields->length) {
						$v1 = ($fields->arr[$_g] ?? null);
						++$_g;
						$v2 = $v1;
						if ($v2 === null) {
							$_this = $ctx->out;
							$_this->b = ($_this->b . chr(0));
						} else {
							$fbits = 0;
							if ($v2->name !== null) {
								$fbits |= 1;
							}
							if ($v2->type !== null) {
								$fbits |= 2;
							}
							$v3 = $fbits + 1;
							if (($v3 >= 0) && ($v3 < 128)) {
								$_this1 = $ctx->out;
								$_this1->b = ($_this1->b . chr($v3));
							} else {
								$_this2 = $ctx->out;
								$_this2->b = ($_this2->b . chr(128));
								$ctx->out->addInt32($v3);
							}
							if (($fbits & 1) !== 0) {
								$s = $v2->name;
								if ($s === null) {
									$_this3 = $ctx->out;
									$_this3->b = ($_this3->b . chr(0));
								} else {
									$b = strlen($s);
									$b1 = new Bytes($b, new Container($s));
									$v4 = $b1->length + 1;
									if (($v4 >= 0) && ($v4 < 128)) {
										$_this4 = $ctx->out;
										$_this4->b = ($_this4->b . chr($v4));
									} else {
										$_this5 = $ctx->out;
										$_this5->b = ($_this5->b . chr(128));
										$ctx->out->addInt32($v4);
									}
									$_this6 = $ctx->out;
									$_this6->b = ($_this6->b . $b1->b->s);
								}
							}
							$_this7 = $ctx->out;
							$_this7->b = ($_this7->b . chr(($v2->opt ? 1 : 0)));
							if (($fbits & 2) !== 0) {
								Hxbit_PropTypeDesc::doSerialize($ctx, $v2->type);
							}
						}
					}
				}
			} else if ($__hx__switch === 10) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
				$k = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:801: characters 9-35
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(11));
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:70: characters 2-25
				Hxbit_PropTypeDesc::doSerialize($ctx, $k);
			} else if ($__hx__switch === 11) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
				$k = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:801: characters 9-35
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(12));
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:71: characters 2-26
				Hxbit_PropTypeDesc::doSerialize($ctx, $k);
			} else if ($__hx__switch === 12) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
				$t = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:801: characters 9-35
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(13));
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:72: characters 2-24
				Hxbit_PropTypeDesc::doSerialize($ctx, $t);
			} else if ($__hx__switch === 13) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:825: characters 21-47
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(14));
			} else if ($__hx__switch === 14) {
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(15));
			} else if ($__hx__switch === 15) {
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(16));
			} else if ($__hx__switch === 16) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
				$t = $v->params[0];
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:801: characters 9-35
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(17));
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:76: characters 2-25
				Hxbit_PropTypeDesc::doSerialize($ctx, $t);
			} else if ($__hx__switch === 17) {
				#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:825: characters 21-47
				$_this = $ctx->out;
				$_this->b = ($_this->b . chr(18));
			}
		}
	}

	/**
	 * @param Serializer $ctx
	 * 
	 * @return PropTypeDesc
	 */
	public static function doUnserialize ($ctx) {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:856: characters 9-31
		$b = ord($ctx->input->b->s[$ctx->inPos++]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:857: lines 857-858
		if ($b === 0) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:858: characters 10-21
			return null;
		}
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
		if ($b === 1) {
			return PropTypeDesc::PInt();
		} else if ($b === 2) {
			return PropTypeDesc::PFloat();
		} else if ($b === 3) {
			return PropTypeDesc::PBool();
		} else if ($b === 4) {
			return PropTypeDesc::PString();
		} else if ($b === 5) {
			return PropTypeDesc::PBytes();
		} else if ($b === 6) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_name = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$v = ord($ctx->input->b->s[$ctx->inPos++]);
			if ($v === 128) {
				$_this = $ctx->input;
				$pos = $ctx->inPos;
				$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
				$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
				$ctx->inPos += 4;
			}
			$len = $v;
			if ($len === 0) {
				$_name = null;
			} else {
				--$len;
				$_this = $ctx->input;
				$pos = $ctx->inPos;
				$s = null;
				if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
					throw Exception::thrown(Error::OutsideBounds());
				} else {
					$s = substr($_this->b->s, $pos, $len);
				}
				$ctx->inPos += $len;
				$_name = $s;
			}
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			return PropTypeDesc::PSerializable($_name);
		} else if ($b === 7) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_name = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$v = ord($ctx->input->b->s[$ctx->inPos++]);
			if ($v === 128) {
				$_this = $ctx->input;
				$pos = $ctx->inPos;
				$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
				$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
				$ctx->inPos += 4;
			}
			$len = $v;
			if ($len === 0) {
				$_name = null;
			} else {
				--$len;
				$_this = $ctx->input;
				$pos = $ctx->inPos;
				$s = null;
				if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
					throw Exception::thrown(Error::OutsideBounds());
				} else {
					$s = substr($_this->b->s, $pos, $len);
				}
				$ctx->inPos += $len;
				$_name = $s;
			}
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			return PropTypeDesc::PEnum($_name);
		} else if ($b === 8) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_k = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$__e = Hxbit_PropTypeDesc::doUnserialize($ctx);
			$_k = $__e;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_v = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$__e = Hxbit_PropTypeDesc::doUnserialize($ctx);
			$_v = $__e;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			return PropTypeDesc::PMap($_k, $_v);
		} else if ($b === 9) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_k = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$__e = Hxbit_PropTypeDesc::doUnserialize($ctx);
			$_k = $__e;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			return PropTypeDesc::PArray($_k);
		} else if ($b === 10) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_fields = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$e0 = null;
			$v = ord($ctx->input->b->s[$ctx->inPos++]);
			if ($v === 128) {
				$_this = $ctx->input;
				$pos = $ctx->inPos;
				$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
				$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
				$ctx->inPos += 4;
			}
			$len = $v;
			if ($len === 0) {
				$_fields = null;
			} else {
				--$len;
				$a = new \Array_hx();
				$_g = 0;
				$_g1 = $len;
				while ($_g < $_g1) {
					$i = $_g++;
					$v = ord($ctx->input->b->s[$ctx->inPos++]);
					if ($v === 128) {
						$_this = $ctx->input;
						$pos = $ctx->inPos;
						$v1 = ord($_this->b->s[$pos]) | (ord($_this->b->s[$pos + 1]) << 8) | (ord($_this->b->s[$pos + 2]) << 16) | (ord($_this->b->s[$pos + 3]) << 24);
						$v = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
						$ctx->inPos += 4;
					}
					$fbits = $v;
					if ($fbits === 0) {
						$e0 = null;
					} else {
						--$fbits;
						$type = null;
						$name = null;
						if (($fbits & 1) !== 0) {
							$v2 = ord($ctx->input->b->s[$ctx->inPos++]);
							if ($v2 === 128) {
								$_this1 = $ctx->input;
								$pos1 = $ctx->inPos;
								$v3 = ord($_this1->b->s[$pos1]) | (ord($_this1->b->s[$pos1 + 1]) << 8) | (ord($_this1->b->s[$pos1 + 2]) << 16) | (ord($_this1->b->s[$pos1 + 3]) << 24);
								$v2 = (($v3 & ((int)-2147483648)) !== 0 ? $v3 | ((int)-2147483648) : $v3);
								$ctx->inPos += 4;
							}
							$len = $v2;
							if ($len === 0) {
								$name = null;
							} else {
								--$len;
								$_this2 = $ctx->input;
								$pos2 = $ctx->inPos;
								$s = null;
								if (($pos2 < 0) || ($len < 0) || (($pos2 + $len) > $_this2->length)) {
									throw Exception::thrown(Error::OutsideBounds());
								} else {
									$s = substr($_this2->b->s, $pos2, $len);
								}
								$ctx->inPos += $len;
								$name = $s;
							}
						}
						$opt = ord($ctx->input->b->s[$ctx->inPos++]) !== 0;
						if (($fbits & 2) !== 0) {
							$__e = Hxbit_PropTypeDesc::doUnserialize($ctx);
							$type = $__e;
						}
						$e0 = new HxAnon([
							"name" => $name,
							"opt" => $opt,
							"type" => $type,
						]);
					}
					$a->offsetSet($i, $e0);
				}
				$_fields = $a;
			}
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			return PropTypeDesc::PObj($_fields);
		} else if ($b === 11) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_k = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$__e = Hxbit_PropTypeDesc::doUnserialize($ctx);
			$_k = $__e;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			return PropTypeDesc::PAlias($_k);
		} else if ($b === 12) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_k = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$__e = Hxbit_PropTypeDesc::doUnserialize($ctx);
			$_k = $__e;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			return PropTypeDesc::PVector($_k);
		} else if ($b === 13) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_t = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$__e = Hxbit_PropTypeDesc::doUnserialize($ctx);
			$_t = $__e;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			return PropTypeDesc::PNull($_t);
		} else if ($b === 14) {
			return PropTypeDesc::PUnknown();
		} else if ($b === 15) {
			return PropTypeDesc::PDynamic();
		} else if ($b === 16) {
			return PropTypeDesc::PInt64();
		} else if ($b === 17) {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:810: characters 25-28
			$_t = null;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:811: characters 61-68
			$__e = Hxbit_PropTypeDesc::doUnserialize($ctx);
			$_t = $__e;
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:404: character 25
			return PropTypeDesc::PFlags($_t);
		} else if ($b === 18) {
			return PropTypeDesc::PStruct();
		} else {
			#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:859: characters 56-61
			throw Exception::thrown("Invalid enum index " . ($b??'null'));
		}
	}

	/**
	 * @return Schema
	 */
	public static function getSchema () {
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:871: characters 23-44
		$s = new Schema();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:831: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length++] = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PInt";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:831: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length++] = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PFloat";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:831: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length++] = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PBool";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:831: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length++] = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PString";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:831: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length++] = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PBytes";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:812: characters 28-40
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 68-76
		$t = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 80-116
		$_g->arr[$_g->length++] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this->arr[$_this->length++] = PropTypeDesc::PObj($_g);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PSerializable";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:812: characters 28-40
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 68-76
		$t = PropTypeDesc::PString();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 80-116
		$_g->arr[$_g->length++] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this->arr[$_this->length++] = PropTypeDesc::PObj($_g);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PEnum";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:812: characters 28-40
		$v = null;
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 68-76
		$t = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 80-116
		$_g->arr[$_g->length++] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this->arr[$_this->length++] = PropTypeDesc::PObj($_g);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PMap";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:812: characters 28-40
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 68-76
		$t = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 80-116
		$_g->arr[$_g->length++] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this->arr[$_this->length++] = PropTypeDesc::PObj($_g);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PArray";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:812: characters 28-40
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 68-76
		$t = PropTypeDesc::PArray(PropTypeDesc::PObj(\Array_hx::wrap([
			new HxAnon([
				"name" => "name",
				"opt" => false,
				"type" => PropTypeDesc::PString(),
			]),
			new HxAnon([
				"name" => "opt",
				"opt" => false,
				"type" => PropTypeDesc::PBool(),
			]),
			new HxAnon([
				"name" => "type",
				"opt" => false,
				"type" => PropTypeDesc::PEnum("hxbit.PropTypeDesc"),
			]),
		])));
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 80-116
		$_g->arr[$_g->length++] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this->arr[$_this->length++] = PropTypeDesc::PObj($_g);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PObj";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:812: characters 28-40
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 68-76
		$t = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 80-116
		$_g->arr[$_g->length++] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this->arr[$_this->length++] = PropTypeDesc::PObj($_g);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PAlias";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:812: characters 28-40
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 68-76
		$t = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 80-116
		$_g->arr[$_g->length++] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this->arr[$_this->length++] = PropTypeDesc::PObj($_g);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PVector";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:812: characters 28-40
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 68-76
		$t = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 80-116
		$_g->arr[$_g->length++] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this->arr[$_this->length++] = PropTypeDesc::PObj($_g);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PNull";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:831: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length++] = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PUnknown";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:831: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length++] = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PDynamic";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:831: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length++] = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PInt64";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this = $s->fieldsTypes;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 54-117
		$_g = new \Array_hx();
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:812: characters 28-40
		$v = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 68-76
		$t = PropTypeDesc::PEnum("hxbit.PropTypeDesc");
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 80-116
		$_g->arr[$_g->length++] = new HxAnon([
			"name" => "",
			"type" => $t,
			"opt" => false,
		]);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:819: characters 30-119
		$_this->arr[$_this->length++] = PropTypeDesc::PObj($_g);
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PFlags";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:831: characters 30-54
		$_this = $s->fieldsTypes;
		$_this->arr[$_this->length++] = null;
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:833: characters 29-54
		$_this = $s->fieldsNames;
		$_this->arr[$_this->length++] = "PStruct";
		#/opt/src/crm-2.0/server/.haxelib/hxbit/1,5,0/hxbit/Macros.hx:871: characters 62-70
		return $s;
	}
}

Boot::registerClass(Hxbit_PropTypeDesc::class, 'hxbit.enumSer.Hxbit_PropTypeDesc');
