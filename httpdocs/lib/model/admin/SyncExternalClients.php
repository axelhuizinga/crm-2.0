<?php
/**
 * Generated by Haxe 4.1.1
 * Haxe source file: src/model/admin/SyncExternalClients.hx
 */

namespace model\admin;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \haxe\Log;
use \php\Lib;
use \shared\DbData;
use \haxe\ds\StringMap;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;

/**
 * ...
 * @author axel@bi4.me
 */
class SyncExternalClients extends \Model {
	/**
	 * @var \Array_hx
	 */
	public $keys;
	/**
	 * @var int
	 */
	public $synced;

	/**
	 * @param StringMap $param
	 * 
	 * @return void
	 */
	public function __construct ($param) {
		#src/model/admin/SyncExternalClients.hx:39: characters 3-15
		parent::__construct($param);
		#src/model/admin/SyncExternalClients.hx:41: lines 41-45
		if (array_key_exists("synced", $param->data)) {
			#src/model/admin/SyncExternalClients.hx:43: characters 4-33
			$this->synced = ($param->data["synced"] ?? null);
		} else {
			#src/model/admin/SyncExternalClients.hx:45: characters 8-18
			$this->synced = 0;
		}
		#src/model/admin/SyncExternalClients.hx:46: characters 3-35
		$this->keys = \S::tableFields("contacts");
		#src/model/admin/SyncExternalClients.hx:47: characters 9-14
		(Log::$trace)("calling " . ($this->action??'null'), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 47,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "new",
		]));
		#src/model/admin/SyncExternalClients.hx:48: characters 3-8
		(Log::$trace)($this->action, new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 48,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "new",
		]));
		#src/model/admin/SyncExternalClients.hx:50: characters 10-16
		$__hx__switch = ($this->action);
		if ($__hx__switch === "mergeContacts") {
			#src/model/admin/SyncExternalClients.hx:57: characters 5-20
			$this->mergeContacts();
		} else if ($__hx__switch === "syncAll") {
			#src/model/admin/SyncExternalClients.hx:52: characters 5-14
			$this->syncAll();
		} else if ($__hx__switch === "syncImportDeals") {
			#src/model/admin/SyncExternalClients.hx:55: characters 5-22
			$this->syncImportDeals();
		} else {
			#src/model/admin/SyncExternalClients.hx:59: characters 5-10
			$this->run();
		}
	}

	/**
	 * @param int $min_id
	 * 
	 * @return mixed
	 */
	public function getCrmData ($min_id = 9999999) {
		#src/model/admin/SyncExternalClients.hx:385: lines 385-442
		if ($min_id === null) {
			$min_id = 9999999;
		}
		#src/model/admin/SyncExternalClients.hx:386: characters 3-8
		(Log::$trace)($min_id, new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 386,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "getCrmData",
		]));
		#src/model/admin/SyncExternalClients.hx:388: characters 3-48
		$firstBatch = ($this->param->data["offset"] ?? null) === "0";
		#src/model/admin/SyncExternalClients.hx:389: characters 3-36
		$selectTotalCount = "";
		#src/model/admin/SyncExternalClients.hx:390: lines 390-395
		if (\Std::parseInt(($this->param->data["limit"] ?? null)) > 10000) {
			#src/model/admin/SyncExternalClients.hx:392: characters 4-53
			ini_set('max_execution_time',3600);
			#src/model/admin/SyncExternalClients.hx:393: characters 4-47
			ini_set('memory_limit','1G');
			#src/model/admin/SyncExternalClients.hx:394: characters 4-9
			(Log::$trace)(ini_get('memory_limit'), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 394,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getCrmData",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:396: characters 3-8
		(Log::$trace)("offset:" . (\Std::string(($this->param->data["offset"] ?? null))??'null') . " firstBatch:" . (\Std::string($firstBatch)??'null') . " ", new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 396,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "getCrmData",
		]));
		#src/model/admin/SyncExternalClients.hx:397: lines 397-400
		if ($firstBatch) {
			#src/model/admin/SyncExternalClients.hx:399: characters 4-44
			$selectTotalCount = "SQL_CALC_FOUND_ROWS";
		}
		#src/model/admin/SyncExternalClients.hx:401: lines 401-418
		$sql = "\x0D\x0A\x09\x09SELECT " . ($selectTotalCount??'null') . " cl.client_id id,cl.lead_id,cl.creation_date,cl.state,cl.use_email,cl.register_on,cl.register_off,cl.register_off_to,cl.teilnahme_beginn,cl.title title_pro,cl.anrede title,cl.namenszusatz,cl.co_field,cl.storno_grund,IF(TO_DAYS(STR_TO_DATE(cl.birth_date, '%Y-%m-%d'))>500000 ,cl.birth_date,null) date_of_birth,IF(cl.old_active=1,'true','false')old_active,\x0D\x0App.pay_plan_id,pp.creation_date,pp.pay_source_id,pp.target_id,pp.start_day,pp.start_date,pp.buchungs_tag,pp.cycle,pp.amount,IF(pp.product='K',2,3) product ,pp.agent,pp.agency_project project,pp.pay_plan_state,pp.pay_method,pp.end_date,pp.end_reason,pp.repeat_date,pp.cycle_start_date,\x0D\x0A ps.pay_source_id,ps.debtor,ps.bank_name,ps.account,ps.blz,ps.iban,ps.sign_date,ps.pay_source_state,ps.creation_date account_creation_date,\x0D\x0Avl.entry_date,vl.modify_date,vl.status,vl.user,vl.source_id,vl.list_id,vl.phone_code,vl.phone_number,'' fax,vl.first_name,vl.last_name,vl.address1 address,vl.address2 address_2,vl.city,vl.postal_code,vl.country_code,IF(vl.gender='U','',vl.gender) gender,\x0D\x0AIF( vl.alt_phone LIKE '1%',vl.alt_phone,'')mobile,vl.email,vl.comments,vl.last_local_call_time,vl.owner,vl.entry_list_id, 1 mandator, 100 edited_by, '' company_name\x0D\x0A, cl.client_id contact,target_id target_account\x0D\x0AFROM clients cl\x0D\x0AINNER JOIN pay_plan pp\x0D\x0AON pp.client_id=cl.client_id\x0D\x0AINNER JOIN pay_source ps\x0D\x0AON ps.client_id=cl.client_id\x0D\x0AINNER JOIN asterisk.vicidial_list vl\x0D\x0AON vl.vendor_lead_code=cl.client_id\x0D\x0AWHERE cl.client_id>" . ($min_id??'null') . "\x0D\x0AORDER BY cl.client_id \x0D\x0ALIMIT \x0D\x0A";
		#src/model/admin/SyncExternalClients.hx:420: characters 3-8
		(Log::$trace)("" . ($sql??'null') . " " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null') . " OFFSET " . (\Std::parseInt(($this->param->data["offset"] ?? null))??'null'), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 420,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "getCrmData",
		]));
		#src/model/admin/SyncExternalClients.hx:421: characters 9-129
		$stmt = \S::$syncDbh->query("" . ($sql??'null') . " " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null') . " OFFSET " . (\Std::parseInt(($this->param->data["offset"] ?? null))??'null'));
		#src/model/admin/SyncExternalClients.hx:422: characters 3-8
		(Log::$trace)("loading  " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null') . " OFFSET " . (\Std::parseInt(($this->param->data["offset"] ?? null))??'null'), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 422,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "getCrmData",
		]));
		#src/model/admin/SyncExternalClients.hx:423: lines 423-427
		if ($stmt === false) {
			#src/model/admin/SyncExternalClients.hx:425: characters 4-9
			(Log::$trace)("" . ($sql??'null') . " " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null'), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 425,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getCrmData",
			]));
			#src/model/admin/SyncExternalClients.hx:426: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:426: characters 25-69
			$_g = new StringMap();
			$value = \S::$syncDbh->errorInfo();
			$_g->data["getCrmData query:"] = $value;
			#src/model/admin/SyncExternalClients.hx:426: characters 4-70
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 426,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getCrmData",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:428: lines 428-431
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalClients.hx:430: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 430,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getCrmData",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:432: characters 3-78
		$res = ($stmt->execute() ? $stmt->fetchAll(\PDO::FETCH_ASSOC) : null);
		#src/model/admin/SyncExternalClients.hx:434: lines 434-440
		if ($firstBatch) {
			#src/model/admin/SyncExternalClients.hx:436: characters 4-49
			$stmt = \S::$syncDbh->query("SELECT FOUND_ROWS()");
			#src/model/admin/SyncExternalClients.hx:437: characters 4-38
			$totalRes = $stmt->fetchColumn();
			#src/model/admin/SyncExternalClients.hx:438: characters 4-9
			(Log::$trace)($totalRes, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 438,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getCrmData",
			]));
			#src/model/admin/SyncExternalClients.hx:439: characters 4-46
			$this->dbData->dataInfo->data["totalRecords"] = $totalRes;
		}
		#src/model/admin/SyncExternalClients.hx:441: characters 3-13
		return $res;
	}

	/**
	 * @return void
	 */
	public function getMissing () {
		#src/model/admin/SyncExternalClients.hx:64: lines 64-69
		$sql = "\x0D\x0A\x09\x09SELECT DISTINCT(cl.client_id) FROM clients cl \x0D\x0AINNER JOIN pay_plan pp \x0D\x0AON pp.client_id=cl.client_id \x0D\x0AINNER JOIN pay_source ps \x0D\x0AON ps.client_id = cl.client_id;";
		#src/model/admin/SyncExternalClients.hx:70: characters 9-54
		$stmt = \S::$syncDbh->query($sql);
		#src/model/admin/SyncExternalClients.hx:71: lines 71-75
		if ($stmt === false) {
			#src/model/admin/SyncExternalClients.hx:73: characters 4-9
			(Log::$trace)(\S::$syncDbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 73,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
			#src/model/admin/SyncExternalClients.hx:74: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:74: characters 25-65
			$_g = new StringMap();
			$value = \S::$syncDbh->errorInfo();
			$_g->data["getAll query:"] = $value;
			#src/model/admin/SyncExternalClients.hx:74: characters 4-66
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 74,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:76: lines 76-79
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalClients.hx:78: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 78,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:80: characters 3-76
		$res = ($stmt->execute() ? $stmt->fetchAll(\PDO::FETCH_NUM) : null);
		#src/model/admin/SyncExternalClients.hx:82: characters 3-8
		(Log::$trace)(count($res), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 82,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "getMissing",
		]));
		#src/model/admin/SyncExternalClients.hx:84: characters 3-56
		$cleared = \S::$dbh->exec("TRUNCATE contact_ids");
		#src/model/admin/SyncExternalClients.hx:85: lines 85-90
		if (\S::$dbh->errorCode() !== "00000") {
			#src/model/admin/SyncExternalClients.hx:87: characters 4-9
			(Log::$trace)(\S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 87,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		} else {
			#src/model/admin/SyncExternalClients.hx:90: characters 4-9
			(Log::$trace)("cleared all IDs from contact_ids", new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 90,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:91: characters 3-89
		$cIDs = array_map(function($r){return $r[0];}, $res);
		#src/model/admin/SyncExternalClients.hx:92: characters 3-8
		(Log::$trace)(print_r($cIDs[0],1), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 92,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "getMissing",
		]));
		#src/model/admin/SyncExternalClients.hx:93: characters 3-62
		$ok = \S::$dbh->pgsqlCopyFromArray("contact_ids", $cIDs);
		#src/model/admin/SyncExternalClients.hx:94: lines 94-97
		if (!$ok) {
			#src/model/admin/SyncExternalClients.hx:96: characters 4-9
			(Log::$trace)(\S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 96,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:98: lines 98-101
		if (\S::$dbh->errorCode() !== "00000") {
			#src/model/admin/SyncExternalClients.hx:100: characters 4-9
			(Log::$trace)(\S::$dbh->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 100,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:102: characters 3-6
		$sql = "\x0D\x0A" . "SELECT ARRAY_TO_STRING(array_agg(acid.id),',') from contact_ids acid\x0D\x0A" . "left join \x0D\x0A" . "(SELECT 1 as gg,id from contacts) c\x0D\x0A" . "ON acid.id=c.id\x0D\x0A" . "where c.id IS NULL\x0D\x0A" . "GROUP BY gg;\x0D\x0A" . "";
		#src/model/admin/SyncExternalClients.hx:110: characters 3-7
		$stmt = \S::$dbh->query($sql);
		#src/model/admin/SyncExternalClients.hx:111: lines 111-115
		if ($stmt === false) {
			#src/model/admin/SyncExternalClients.hx:113: characters 4-9
			(Log::$trace)("" . ($sql??'null') . " " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null'), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 113,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
			#src/model/admin/SyncExternalClients.hx:114: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:114: characters 25-72
			$_g = new StringMap();
			$value = \S::$syncDbh->errorInfo();
			$_g->data["getMissingIDs query:"] = $value;
			#src/model/admin/SyncExternalClients.hx:114: characters 4-73
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 114,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:116: lines 116-119
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalClients.hx:118: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 118,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:120: characters 3-73
		$ids = ($stmt->execute() ? $stmt->fetch(\PDO::FETCH_COLUMN, 0) : null);
		#src/model/admin/SyncExternalClients.hx:122: characters 3-6
		$sql = "\x0D\x0A\x09\x09SELECT cl.client_id id,cl.lead_id,cl.creation_date,cl.state,cl.use_email,cl.register_on,cl.register_off,cl.register_off_to,cl.teilnahme_beginn,cl.title title_pro,cl.anrede title,cl.namenszusatz,cl.co_field,cl.storno_grund,IF(TO_DAYS(STR_TO_DATE(cl.birth_date, '%Y-%m-%d'))>500000 ,cl.birth_date,null) date_of_birth,IF(cl.old_active=1,'true','false')old_active,\x0D\x0App.pay_plan_id,pp.creation_date,pp.pay_source_id,pp.target_id,pp.start_day,pp.start_date,pp.buchungs_tag,pp.cycle,pp.amount,IF(pp.product='K',2,3) product ,pp.agent,pp.agency_project project,pp.pay_plan_state,pp.pay_method,pp.end_date,pp.end_reason,pp.repeat_date,\x0D\x0A ps.pay_source_id,ps.debtor,ps.bank_name,ps.account,ps.blz,ps.iban,ps.sign_date,ps.pay_source_state,ps.creation_date account_creation_date,\x0D\x0Avl.entry_date,vl.modify_date,vl.status,vl.user,vl.source_id,vl.list_id,vl.phone_code,vl.phone_number,'' fax,vl.first_name,vl.last_name,vl.address1 address,vl.address2 address_2,vl.city,vl.postal_code,vl.country_code,IF(vl.gender='U','',vl.gender) gender,\x0D\x0AIF( vl.alt_phone LIKE '1%',vl.alt_phone,'')mobile,vl.email,vl.comments,vl.last_local_call_time,vl.owner,vl.entry_list_id, 1 mandator, 100 edited_by, '' company_name\x0D\x0AFROM clients cl\x0D\x0AINNER JOIN pay_plan pp\x0D\x0AON pp.client_id=cl.client_id\x0D\x0AINNER JOIN pay_source ps\x0D\x0AON ps.client_id=cl.client_id\x0D\x0AINNER JOIN asterisk.vicidial_list vl\x0D\x0AON (vl.lead_id=cl.lead_id )\x0D\x0AWHERE cl.client_id IN(" . ($ids??'null') . ")\x0D\x0AORDER BY cl.client_id  \x0D\x0ALIMIT " . (\Util::limit()??'null') . "\x0D\x0A";
		#src/model/admin/SyncExternalClients.hx:140: characters 9-13
		$stmt = \S::$syncDbh->query($sql);
		#src/model/admin/SyncExternalClients.hx:141: lines 141-145
		if ($stmt === false) {
			#src/model/admin/SyncExternalClients.hx:143: characters 4-9
			(Log::$trace)($sql, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 143,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
			#src/model/admin/SyncExternalClients.hx:144: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:144: characters 25-76
			$_g = new StringMap();
			$value = \S::$syncDbh->errorInfo();
			$_g->data["getMissingCrmData query:"] = $value;
			#src/model/admin/SyncExternalClients.hx:144: characters 4-77
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 144,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:146: lines 146-149
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalClients.hx:148: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:148: characters 24-63
			$_g = new StringMap();
			$value = $stmt->errorInfo();
			$_g->data["getMissingCrmData"] = $value;
			#src/model/admin/SyncExternalClients.hx:148: characters 4-64
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 148,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "getMissing",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:150: characters 25-55
		$res = ($stmt->execute() ? $stmt->fetchAll(\PDO::FETCH_ASSOC) : null);
		#src/model/admin/SyncExternalClients.hx:151: characters 3-51
		$missing = count($res);
		#src/model/admin/SyncExternalClients.hx:152: characters 3-8
		(Log::$trace)($missing, new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 152,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "getMissing",
		]));
		#src/model/admin/SyncExternalClients.hx:153: characters 14-28
		$data = array_values($res);
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		#src/model/admin/SyncExternalClients.hx:153: lines 153-170
		while ($_g_current < $_g_length) {
			$row = $_g_data[$_g_current++];
			#src/model/admin/SyncExternalClients.hx:157: characters 4-46
			$stmt = $this->upsertClient($row);
			#src/model/admin/SyncExternalClients.hx:158: lines 158-169
			try {
				#src/model/admin/SyncExternalClients.hx:159: characters 5-58
				$res = $stmt->fetchAll(\PDO::FETCH_ASSOC);
			} catch(\Throwable $_g) {
				$e = Exception::caught($_g)->unwrap();
				#src/model/admin/SyncExternalClients.hx:164: characters 19-25
				$tmp = $this->dbData;
				#src/model/admin/SyncExternalClients.hx:164: lines 164-168
				$_g1 = new StringMap();
				$value = \S::$dbh->errorInfo();
				$_g1->data["dbError"] = $value;
				$value1 = \S::errorInfo($row, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 166,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "getMissing",
				]));
				$_g1->data["upsertClient"] = $value1;
				$_g1->data["exception"] = $e;
				\S::sendErrors($tmp, $_g1, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 164,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "getMissing",
				]));
			}
		}
		#src/model/admin/SyncExternalClients.hx:171: characters 9-14
		(Log::$trace)("done", new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 171,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "getMissing",
		]));
		#src/model/admin/SyncExternalClients.hx:173: characters 3-8
		(Log::$trace)(($this->dbData->dataInfo === null ? "null" : $this->dbData->dataInfo->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 173,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "getMissing",
		]));
		#src/model/admin/SyncExternalClients.hx:175: characters 14-20
		$tmp = $this->dbData;
		#src/model/admin/SyncExternalClients.hx:175: characters 21-50
		$_g = new StringMap();
		$_g->data["gotMissing"] = "OK:" . ($missing??'null');
		#src/model/admin/SyncExternalClients.hx:175: characters 3-51
		\S::sendInfo($tmp, $_g);
	}

	/**
	 * @return void
	 */
	public function importCrmData () {
		#src/model/admin/SyncExternalClients.hx:267: characters 9-46
		$cData = $this->getCrmData();
		#src/model/admin/SyncExternalClients.hx:270: characters 14-30
		$data = array_values($cData);
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		#src/model/admin/SyncExternalClients.hx:270: lines 270-287
		while ($_g_current < $_g_length) {
			$row = $_g_data[$_g_current++];
			#src/model/admin/SyncExternalClients.hx:274: characters 4-46
			$stmt = $this->upsertClient($row);
			#src/model/admin/SyncExternalClients.hx:275: lines 275-286
			try {
				#src/model/admin/SyncExternalClients.hx:276: characters 5-58
				$res = $stmt->fetchAll(\PDO::FETCH_ASSOC);
			} catch(\Throwable $_g) {
				$e = Exception::caught($_g)->unwrap();
				#src/model/admin/SyncExternalClients.hx:281: characters 19-25
				$tmp = $this->dbData;
				#src/model/admin/SyncExternalClients.hx:281: lines 281-285
				$_g1 = new StringMap();
				$value = \S::$dbh->errorInfo();
				$_g1->data["dbError"] = $value;
				$value1 = \S::errorInfo($row, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 283,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "importCrmData",
				]));
				$_g1->data["upsertClient"] = $value1;
				$_g1->data["exception"] = $e;
				\S::sendErrors($tmp, $_g1, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 281,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "importCrmData",
				]));
			}
		}
		#src/model/admin/SyncExternalClients.hx:288: characters 9-14
		(Log::$trace)("done", new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 288,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "importCrmData",
		]));
		#src/model/admin/SyncExternalClients.hx:289: characters 3-55
		$this1 = $this->dbData->dataInfo;
		$v = ($this->param->data["offset"] ?? null) + $this->synced;
		$this1->data["offset"] = $v;
		#src/model/admin/SyncExternalClients.hx:290: characters 3-8
		(Log::$trace)(($this->dbData->dataInfo === null ? "null" : $this->dbData->dataInfo->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 290,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "importCrmData",
		]));
		#src/model/admin/SyncExternalClients.hx:291: characters 9-33
		\S::sendData($this->dbData, null);
	}

	/**
	 * @return void
	 */
	public function importDealData2 () {
		#src/model/admin/SyncExternalClients.hx:296: characters 9-46
		$cData = $this->getCrmData();
		#src/model/admin/SyncExternalClients.hx:299: characters 14-30
		$data = array_values($cData);
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		#src/model/admin/SyncExternalClients.hx:299: lines 299-316
		while ($_g_current < $_g_length) {
			$row = $_g_data[$_g_current++];
			#src/model/admin/SyncExternalClients.hx:303: characters 4-46
			$stmt = $this->upsertClient($row);
			#src/model/admin/SyncExternalClients.hx:304: lines 304-315
			try {
				#src/model/admin/SyncExternalClients.hx:305: characters 5-58
				$res = $stmt->fetchAll(\PDO::FETCH_ASSOC);
			} catch(\Throwable $_g) {
				$e = Exception::caught($_g)->unwrap();
				#src/model/admin/SyncExternalClients.hx:310: characters 19-25
				$tmp = $this->dbData;
				#src/model/admin/SyncExternalClients.hx:310: lines 310-314
				$_g1 = new StringMap();
				$value = \S::$dbh->errorInfo();
				$_g1->data["dbError"] = $value;
				$value1 = \S::errorInfo($row, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 312,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "importDealData2",
				]));
				$_g1->data["upsertClient"] = $value1;
				$_g1->data["exception"] = $e;
				\S::sendErrors($tmp, $_g1, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 310,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "importDealData2",
				]));
			}
		}
		#src/model/admin/SyncExternalClients.hx:317: characters 9-14
		(Log::$trace)("done", new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 317,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "importDealData2",
		]));
		#src/model/admin/SyncExternalClients.hx:318: characters 3-55
		$this1 = $this->dbData->dataInfo;
		$v = ($this->param->data["offset"] ?? null) + $this->synced;
		$this1->data["offset"] = $v;
		#src/model/admin/SyncExternalClients.hx:319: characters 3-8
		(Log::$trace)(($this->dbData->dataInfo === null ? "null" : $this->dbData->dataInfo->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 319,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "importDealData2",
		]));
		#src/model/admin/SyncExternalClients.hx:320: characters 9-33
		\S::sendData($this->dbData, null);
	}

	/**
	 * @return void
	 */
	public function mergeContacts () {
		#src/model/admin/SyncExternalClients.hx:201: lines 201-202
		$sql = "SELECT array_to_string(array(SELECT unnest(merged) from contacts group by merged), ',')";
		#src/model/admin/SyncExternalClients.hx:203: characters 3-44
		$stmt = \S::$dbh->query($sql);
		#src/model/admin/SyncExternalClients.hx:204: lines 204-208
		if ($stmt === false) {
			#src/model/admin/SyncExternalClients.hx:206: characters 4-9
			(Log::$trace)("" . ($sql??'null') . " " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null'), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 206,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
			#src/model/admin/SyncExternalClients.hx:207: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:207: characters 25-67
			$_g = new StringMap();
			$value = \S::$dbh->errorInfo();
			$_g->data["getMergedIDs query:"] = $value;
			#src/model/admin/SyncExternalClients.hx:207: characters 4-68
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 207,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:209: lines 209-212
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalClients.hx:211: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 211,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:213: characters 3-80
		$merged_ids = ($stmt->execute() ? $stmt->fetch(\PDO::FETCH_COLUMN, 0) : null);
		#src/model/admin/SyncExternalClients.hx:214: characters 3-8
		(Log::$trace)((mb_substr($merged_ids, 0, 40)??'null') . "...", new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 214,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "mergeContacts",
		]));
		#src/model/admin/SyncExternalClients.hx:215: characters 3-33
		$sql = "\x0D\x0A" . ("UPDATE contacts SET state='merged' WHERE id IN(" . ($merged_ids??'null') . ")\x0D\x0A") . "";
		#src/model/admin/SyncExternalClients.hx:218: characters 3-26
		$stmt = \S::$dbh->query($sql);
		#src/model/admin/SyncExternalClients.hx:219: lines 219-223
		if ($stmt === false) {
			#src/model/admin/SyncExternalClients.hx:221: characters 4-9
			(Log::$trace)("" . ($sql??'null'), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 221,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
			#src/model/admin/SyncExternalClients.hx:222: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:222: characters 25-70
			$_g = new StringMap();
			$value = \S::$dbh->errorInfo();
			$_g->data["updateMergedIDs query:"] = $value;
			#src/model/admin/SyncExternalClients.hx:222: characters 4-71
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 222,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:224: lines 224-227
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalClients.hx:226: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 226,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:228: characters 3-41
		$updated_ids = $stmt->execute();
		#src/model/admin/SyncExternalClients.hx:229: characters 3-8
		(Log::$trace)(($updated_ids ? "OK:" . ($stmt->rowCount()??'null') : "" . ($sql??'null')), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 229,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "mergeContacts",
		]));
		#src/model/admin/SyncExternalClients.hx:231: characters 3-67
		$sql = "SELECT id, merged from contacts WHERE merged IS NOT NULL";
		#src/model/admin/SyncExternalClients.hx:232: characters 3-26
		$stmt = \S::$dbh->query($sql);
		#src/model/admin/SyncExternalClients.hx:233: lines 233-237
		if ($stmt === false) {
			#src/model/admin/SyncExternalClients.hx:235: characters 4-9
			(Log::$trace)("" . ($sql??'null') . " " . (\Std::parseInt(($this->param->data["limit"] ?? null))??'null'), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 235,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
			#src/model/admin/SyncExternalClients.hx:236: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:236: characters 25-67
			$_g = new StringMap();
			$value = \S::$dbh->errorInfo();
			$_g->data["getMergedIDs query:"] = $value;
			#src/model/admin/SyncExternalClients.hx:236: characters 4-68
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 236,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:238: lines 238-242
		if ($stmt->errorCode() !== "00000") {
			#src/model/admin/SyncExternalClients.hx:240: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 240,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
			#src/model/admin/SyncExternalClients.hx:241: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:241: characters 25-66
			$_g = new StringMap();
			$value = $stmt->errorInfo();
			$_g->data["getMergedIDs query:"] = $value;
			#src/model/admin/SyncExternalClients.hx:241: characters 4-67
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 241,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "mergeContacts",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:243: characters 3-78
		$res = ($stmt->execute() ? $stmt->fetchAll(\PDO::FETCH_ASSOC) : null);
		#src/model/admin/SyncExternalClients.hx:244: characters 3-8
		(Log::$trace)((\Array_hx::wrap($res)->arr[0] ?? null), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 244,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "mergeContacts",
		]));
		#src/model/admin/SyncExternalClients.hx:245: characters 14-20
		$tmp = $this->dbData;
		#src/model/admin/SyncExternalClients.hx:245: characters 21-45
		$_g = new StringMap();
		$value = $stmt->rowCount();
		$_g->data["OK"] = $value;
		#src/model/admin/SyncExternalClients.hx:245: characters 3-46
		\S::sendInfo($tmp, $_g);
	}

	/**
	 * @return DbData
	 */
	public function saveClientDetails () {
		#src/model/admin/SyncExternalClients.hx:361: characters 9-29
		$updated = 0;
		#src/model/admin/SyncExternalClients.hx:363: characters 9-38
		$stmt = null;
		#src/model/admin/SyncExternalClients.hx:364: characters 15-56
		$tmp = ($this->dbData->dataRows->arr[$this->dbData->dataRows->length - 2] ?? null);
		#src/model/admin/SyncExternalClients.hx:364: characters 9-14
		(Log::$trace)(($tmp === null ? "null" : $tmp->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 364,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "saveClientDetails",
		]));
		#src/model/admin/SyncExternalClients.hx:365: lines 365-378
		$_g = 0;
		$_g1 = $this->dbData->dataRows;
		while ($_g < $_g1->length) {
			#src/model/admin/SyncExternalClients.hx:365: characters 13-15
			$dR = ($_g1->arr[$_g] ?? null);
			#src/model/admin/SyncExternalClients.hx:365: lines 365-378
			++$_g;
			#src/model/admin/SyncExternalClients.hx:367: characters 13-105
			$external_text = $this->row2jsonb(Lib::objectOfAssociativeArray($dR->data));
			#src/model/admin/SyncExternalClients.hx:368: lines 368-370
			$sql = "\x0D\x0A" . ("UPDATE crm.users SET active='" . (($dR->data["active"] ?? null)??'null') . "',edited_by=101, external = jsonb_object('{" . ($external_text??'null') . "}')::jsonb WHERE user_name='" . (($dR->data["user"] ?? null)??'null') . "'\x0D\x0A") . "";
			#src/model/admin/SyncExternalClients.hx:372: characters 13-68
			$q = \S::$dbh->query($sql);
			#src/model/admin/SyncExternalClients.hx:373: lines 373-377
			if (!$q) {
				#src/model/admin/SyncExternalClients.hx:375: characters 16-78
				$this1 = $this->dbData->dataErrors;
				$k = "" . ($this->action??'null');
				$v = \Std::string(\S::$dbh->errorInfo());
				$this1->data[$k] = $v;
				#src/model/admin/SyncExternalClients.hx:376: characters 16-29
				return $this->dbData;
			}
		}
		#src/model/admin/SyncExternalClients.hx:379: characters 27-94
		$_g = new StringMap();
		$_g->data["saveClientDetails"] = "OK";
		$value = \Std::string($updated);
		$_g->data["updatedRows"] = $value;
		#src/model/admin/SyncExternalClients.hx:379: characters 9-94
		$this->dbData->dataInfo = $_g;
		#src/model/admin/SyncExternalClients.hx:380: characters 9-14
		(Log::$trace)(($this->dbData->dataInfo === null ? "null" : $this->dbData->dataInfo->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 380,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "saveClientDetails",
		]));
		#src/model/admin/SyncExternalClients.hx:381: characters 3-16
		return $this->dbData;
	}

	/**
	 * @return void
	 */
	public function syncAll () {
		#src/model/admin/SyncExternalClients.hx:249: characters 3-8
		(Log::$trace)(($this->param === null ? "null" : $this->param->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 249,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalClients.hx:250: characters 3-15
		$this->getMissing();
		#src/model/admin/SyncExternalClients.hx:252: lines 252-253
		if (($this->param->data["offset"] ?? null) === null) {
			#src/model/admin/SyncExternalClients.hx:253: characters 4-25
			$this->param->data["offset"] = "0";
		}
		#src/model/admin/SyncExternalClients.hx:254: lines 254-255
		if (($this->param->data["limit"] ?? null) === null) {
			#src/model/admin/SyncExternalClients.hx:255: characters 4-27
			$this->param->data["limit"] = "1000";
		}
		#src/model/admin/SyncExternalClients.hx:256: lines 256-259
		if ((\Std::parseInt(($this->param->data["offset"] ?? null)) + \Std::parseInt(($this->param->data["limit"] ?? null))) > \Std::parseInt(($this->param->data["maxImport"] ?? null))) {
			#src/model/admin/SyncExternalClients.hx:258: characters 4-97
			$this1 = $this->param;
			$v = \Std::string(\Std::parseInt(($this->param->data["maxImport"] ?? null)) - \Std::parseInt(($this->param->data["offset"] ?? null)));
			$this1->data["limit"] = $v;
		}
		#src/model/admin/SyncExternalClients.hx:260: characters 3-8
		(Log::$trace)(($this->param === null ? "null" : $this->param->toString()), new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 260,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "syncAll",
		]));
		#src/model/admin/SyncExternalClients.hx:261: characters 3-18
		$this->importCrmData();
		#src/model/admin/SyncExternalClients.hx:262: characters 16-22
		$tmp = $this->dbData;
		#src/model/admin/SyncExternalClients.hx:262: characters 23-43
		$_g = new StringMap();
		$_g->data["syncAll"] = "NOTOK";
		#src/model/admin/SyncExternalClients.hx:262: characters 3-44
		\S::sendErrors($tmp, $_g, new HxAnon([
			"fileName" => "src/model/admin/SyncExternalClients.hx",
			"lineNumber" => 262,
			"className" => "model.admin.SyncExternalClients",
			"methodName" => "syncAll",
		]));
	}

	/**
	 * @return void
	 */
	public function syncImportDeals () {
		#src/model/admin/SyncExternalClients.hx:179: characters 3-25
		$max_id = null;
		#src/model/admin/SyncExternalClients.hx:180: lines 180-196
		if (($this->param->data["onlyNew"] ?? null)) {
			#src/model/admin/SyncExternalClients.hx:181: characters 4-54
			$sql = "SELECT MAX(contact) FROM deals";
			#src/model/admin/SyncExternalClients.hx:182: characters 4-45
			$stmt = \S::$dbh->query($sql);
			#src/model/admin/SyncExternalClients.hx:183: lines 183-187
			if ($stmt === false) {
				#src/model/admin/SyncExternalClients.hx:185: characters 5-10
				(Log::$trace)("" . ($sql??'null'), new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 185,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "syncImportDeals",
				]));
				#src/model/admin/SyncExternalClients.hx:186: characters 18-24
				$tmp = $this->dbData;
				#src/model/admin/SyncExternalClients.hx:186: characters 26-73
				$_g = new StringMap();
				$value = \S::$dbh->errorInfo();
				$_g->data["syncImportDeals onlyNew:"] = $value;
				#src/model/admin/SyncExternalClients.hx:186: characters 5-74
				\S::sendErrors($tmp, $_g, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 186,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "syncImportDeals",
				]));
			}
			#src/model/admin/SyncExternalClients.hx:188: lines 188-192
			if ($stmt->errorCode() !== "00000") {
				#src/model/admin/SyncExternalClients.hx:190: characters 5-10
				(Log::$trace)($stmt->errorInfo(), new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 190,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "syncImportDeals",
				]));
				#src/model/admin/SyncExternalClients.hx:191: characters 18-24
				$tmp = $this->dbData;
				#src/model/admin/SyncExternalClients.hx:191: characters 26-72
				$_g = new StringMap();
				$value = $stmt->errorInfo();
				$_g->data["syncImportDeals onlyNew:"] = $value;
				#src/model/admin/SyncExternalClients.hx:191: characters 5-73
				\S::sendErrors($tmp, $_g, new HxAnon([
					"fileName" => "src/model/admin/SyncExternalClients.hx",
					"lineNumber" => 191,
					"className" => "model.admin.SyncExternalClients",
					"methodName" => "syncImportDeals",
				]));
			}
			#src/model/admin/SyncExternalClients.hx:193: characters 29-59
			$max_id = ($stmt->execute() ? $stmt->fetch(\PDO::FETCH_COLUMN, 0) : null);
			#src/model/admin/SyncExternalClients.hx:194: characters 4-9
			(Log::$trace)("imported deals max_id: " . ($max_id??'null'), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 194,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "syncImportDeals",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:197: characters 3-67
		SyncExternalDeals::importDeals(\S::$dbh, $this->dbData, $this->getCrmData($max_id));
	}

	/**
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	public function testValue ($v) {
		#src/model/admin/SyncExternalClients.hx:323: characters 47-60
		return $v;
	}

	/**
	 * @param mixed $rD
	 * 
	 * @return \PDOStatement
	 */
	public function upsertClient ($rD) {
		#src/model/admin/SyncExternalClients.hx:328: characters 3-58
		$cD = \Util::map2fields($rD, $this->keys);
		#src/model/admin/SyncExternalClients.hx:329: characters 36-59
		$_g = new \Array_hx();
		#src/model/admin/SyncExternalClients.hx:329: characters 46-55
		$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($cD->data))));
		while ($k->hasNext()) {
			#src/model/admin/SyncExternalClients.hx:329: characters 37-58
			$k1 = $k->next();
			#src/model/admin/SyncExternalClients.hx:329: characters 57-58
			$_g->arr[$_g->length++] = $k1;
		}
		#src/model/admin/SyncExternalClients.hx:329: characters 9-60
		$cNames = $_g;
		#src/model/admin/SyncExternalClients.hx:331: characters 38-58
		$_g = new \Array_hx();
		#src/model/admin/SyncExternalClients.hx:331: characters 39-57
		$_g1 = 0;
		while ($_g1 < $cNames->length) {
			#src/model/admin/SyncExternalClients.hx:331: characters 43-44
			$k = ($cNames->arr[$_g1] ?? null);
			#src/model/admin/SyncExternalClients.hx:331: characters 39-57
			++$_g1;
			#src/model/admin/SyncExternalClients.hx:331: characters 56-57
			$_g->arr[$_g->length++] = $k;
		}
		#src/model/admin/SyncExternalClients.hx:331: characters 38-89
		$result = [];
		$data = $_g->arr;
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = (":" . ($item??'null'));
		}
		#src/model/admin/SyncExternalClients.hx:331: characters 3-90
		$cPlaceholders = \Array_hx::wrap($result);
		#src/model/admin/SyncExternalClients.hx:332: lines 332-334
		$_g = new \Array_hx();
		#src/model/admin/SyncExternalClients.hx:333: characters 4-56
		$_g1 = 0;
		#src/model/admin/SyncExternalClients.hx:333: characters 13-53
		$result = [];
		$data = $cNames->arr;
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			if ($item !== "id") {
				$result[] = $item;
			}
		}
		#src/model/admin/SyncExternalClients.hx:333: characters 4-56
		$_g2 = \Array_hx::wrap($result);
		while ($_g1 < $_g2->length) {
			#src/model/admin/SyncExternalClients.hx:333: characters 8-9
			$k = ($_g2->arr[$_g1] ?? null);
			#src/model/admin/SyncExternalClients.hx:333: characters 4-56
			++$_g1;
			#src/model/admin/SyncExternalClients.hx:333: characters 55-56
			$_g->arr[$_g->length++] = $k;
		}
		#src/model/admin/SyncExternalClients.hx:332: lines 332-334
		$result = [];
		$data = $_g->arr;
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = (" \"" . ($item??'null') . "\"=:" . ($item??'null'));
		}
		$cSet = \Array_hx::wrap($result)->join(",");
		#src/model/admin/SyncExternalClients.hx:336: lines 336-341
		$sql = "\x0D\x0A" . ("INSERT INTO contacts (" . ($cNames->join(",")??'null') . ")\x0D\x0A") . ("VALUES (" . ($cPlaceholders->join(",")??'null') . ")\x0D\x0A") . "ON CONFLICT (id) DO UPDATE\x0D\x0A" . ("SET " . ($cSet??'null') . " returning id;\x0D\x0A") . "";
		#src/model/admin/SyncExternalClients.hx:343: characters 3-65
		$stmt = \S::$dbh->prepare($sql, ((array)(null)));
		#src/model/admin/SyncExternalClients.hx:344: characters 3-49
		\Util::bindClientData("contacts", $stmt, $rD, $this->dbData);
		#src/model/admin/SyncExternalClients.hx:345: lines 345-351
		if (!$stmt->execute()) {
			#src/model/admin/SyncExternalClients.hx:346: characters 4-9
			(Log::$trace)($rD, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 346,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "upsertClient",
			]));
			#src/model/admin/SyncExternalClients.hx:347: characters 4-9
			(Log::$trace)($stmt->errorInfo(), new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 347,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "upsertClient",
			]));
			#src/model/admin/SyncExternalClients.hx:348: characters 17-23
			$tmp = $this->dbData;
			#src/model/admin/SyncExternalClients.hx:348: lines 348-350
			$_g = new StringMap();
			$value = Lib::hashOfAssociativeArray($stmt->errorInfo());
			$_g->data["execute"] = $value;
			$_g->data["sql"] = $sql;
			$value = \Std::string($rD['id']);
			$_g->data["id"] = $value;
			\S::sendErrors($tmp, $_g, new HxAnon([
				"fileName" => "src/model/admin/SyncExternalClients.hx",
				"lineNumber" => 348,
				"className" => "model.admin.SyncExternalClients",
				"methodName" => "upsertClient",
			]));
		}
		#src/model/admin/SyncExternalClients.hx:354: characters 3-11
		$this->synced++;
		#src/model/admin/SyncExternalClients.hx:355: characters 3-14
		return $stmt;
	}
}

Boot::registerClass(SyncExternalClients::class, 'model.admin.SyncExternalClients');
